# N8N Workflow Builder - Ubuntu VPS Deployment Guide

## Prerequisites
- Ubuntu 22.04 VPS with root access
- Domain name pointed to your VPS IP
- At least 2GB RAM and 20GB storage

## Step 1: Server Setup and Dependencies

### Update system packages
sudo apt update && sudo apt upgrade -y

### Install Node.js 18.x
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs

### Install additional dependencies
sudo apt install -y curl git nginx certbot python3-certbot-nginx build-essential

### Install PM2 globally
npm install -g pm2

### Verify installations
node --version
npm --version
pm2 --version

## Step 2: Clone and Setup Application

### Navigate to web directory
cd /var/www

### Clone your repository
sudo git clone <YOUR_REPO_URL> n8n-workflow-builder
sudo chown -R $USER:$USER /var/www/n8n-workflow-builder
cd n8n-workflow-builder

### Install dependencies
npm install

## Step 3: Environment Configuration

### Create production environment file
cp .env.example .env.production
# OR create new file:
nano .env.production

### Required environment variables:
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
ANTHROPIC_API_KEY=your_anthropic_api_key
MCP_SERVER_URL=http://localhost:3001
MCP_API_KEY=your_generated_mcp_api_key
MCP_PROFILE=default
NEXTAUTH_SECRET=your_nextauth_secret
NEXTAUTH_URL=https://yourdomain.com
NODE_ENV=production

### Set proper permissions
chmod 600 .env.production

## Step 4: Build Application

### Build for production
npm run build

### Test the build locally
npm run start:prod

## Step 5: PM2 Process Management

### Start application with PM2
pm2 start npm --name "n8n-workflow-builder" -- run start:prod

### Configure PM2 to start on boot
pm2 startup
# Follow the instructions provided by the command above

### Save PM2 configuration
pm2 save

### Verify PM2 status
pm2 status
pm2 logs n8n-workflow-builder

## Step 6: Nginx Configuration

### Create Nginx configuration
sudo nano /etc/nginx/sites-available/yourdomain.com

### Add this configuration (replace yourdomain.com):
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    # Static files caching
    location /_next/static/ {
        proxy_pass http://localhost:3000;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    # Favicon and robots.txt
    location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://localhost:3000;
        add_header Cache-Control "public, max-age=86400";
    }
}

### Enable the site
sudo ln -s /etc/nginx/sites-available/yourdomain.com /etc/nginx/sites-enabled/

### Test Nginx configuration
sudo nginx -t

### Reload Nginx
sudo systemctl reload nginx

## Step 7: SSL Certificate with Let's Encrypt

### Install SSL certificate
sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com

### Test SSL renewal
sudo certbot renew --dry-run

## Step 8: Firewall Configuration

### Configure UFW firewall
sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw allow 3001/tcp
sudo ufw --force enable

### Check firewall status
sudo ufw status

## Step 9: Monitoring and Maintenance

### Monitor PM2 processes
pm2 monit

### View application logs
pm2 logs n8n-workflow-builder

### Restart application
pm2 restart n8n-workflow-builder

### Update application
cd /var/www/n8n-workflow-builder
git pull origin main
npm install
npm run build
pm2 restart n8n-workflow-builder

## Step 10: MCP Server Setup and Configuration

### Install and Setup czlonkowski/n8n-mcp Server
The application will use the comprehensive czlonkowski/n8n-mcp server which provides:
- 535+ n8n nodes with 99% property coverage
- 90% documentation coverage including AI nodes
- Smart validation and configuration tools
- Pre-built database with optimized performance

### Install Docker and Docker Compose
First, install Docker and Docker Compose if not already installed:

### Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

### Add user to docker group (optional, to run without sudo)
sudo usermod -aG docker $USER

### Install Docker Compose V2 (recommended)
# Docker Compose V2 is included with Docker Desktop, but for server installations:
sudo apt update

# Install Docker Compose V2 plugin (preferred method)
sudo apt install docker-compose-plugin

# Alternative: Install standalone docker-compose if needed
sudo apt install docker-compose

### Start and enable Docker service
sudo systemctl start docker
sudo systemctl enable docker

### Verify Docker installation
docker --version
docker compose version
# OR for older versions: docker-compose --version

### Pull the optimized Docker image
# Try the latest tag first, if it fails we'll use a specific version
docker pull ghcr.io/czlonkowski/n8n-mcp:latest

# If the latest image has issues, try a specific version
# docker pull ghcr.io/czlonkowski/n8n-mcp:v2.7.16

### Create MCP server directory and configuration
mkdir -p /var/www/mcp-server
cd /var/www/mcp-server

### Create environment file for MCP server
nano .env

### Add environment variables following the official configuration format:
# ====================
# COMMON CONFIGURATION
# ====================

# Database Configuration
# For Docker: /app/data/nodes.db (mounted volume)
NODE_DB_PATH=/app/data/nodes.db

# Logging Level (debug, info, warn, error)
MCP_LOG_LEVEL=info

# Node Environment (development, production)
NODE_ENV=production

# Rebuild database on startup (true/false)
REBUILD_ON_START=false

# =========================
# SIMPLE HTTP MODE
# =========================
# Used for private single-user deployments

# Server mode: stdio (local) or http (remote)
MCP_MODE=http

# Use fixed HTTP implementation (recommended for stability)
USE_FIXED_HTTP=true

# HTTP Server Configuration
PORT=3001
HOST=0.0.0.0

# Authentication token for HTTP mode (REQUIRED)
# Generate with: openssl rand -base64 32
AUTH_TOKEN=your-secure-token-here

# CORS origin for HTTP mode (optional)
# Default: * (allow all origins)
# For production, set to your specific domain
CORS_ORIGIN=*

# Trust proxy configuration for correct IP logging
# Set to 1 when running behind a reverse proxy (Nginx, Traefik, etc.)
TRUST_PROXY=1

# =========================
# N8N API CONFIGURATION
# =========================
# Optional: Enable n8n management tools by providing API credentials

# n8n instance API URL (without /api/v1 suffix)
# N8N_API_URL=https://your-n8n-instance.com

# n8n API Key (get from Settings > API in your n8n instance)
# N8N_API_KEY=

# n8n API request timeout in milliseconds (default: 30000)
# N8N_API_TIMEOUT=30000

# Maximum number of API request retries (default: 3)
# N8N_API_MAX_RETRIES=3

### Generate a secure auth token for MCP
openssl rand -base64 32

### Update the AUTH_TOKEN in .env file with the generated token
# Replace "your-secure-token-here" with the generated token

### Create Docker Compose file for MCP server
nano docker-compose.mcp.yml

### Add Docker Compose configuration:
services:
  n8n-mcp:
    image: ghcr.io/czlonkowski/n8n-mcp:latest
    container_name: n8n-mcp-server
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./data:/app/data
    env_file:
      - .env
    # Remove user specification to let container run as root initially
    # user: "1000:1000"
    environment:
      - REBUILD_ON_START=true
      # Try to force database rebuild
      - FORCE_REBUILD=true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

### Create data directory for persistent storage with correct permissions
mkdir -p ./data
# Set broad permissions initially to allow container to initialize
sudo chmod -R 777 ./data
# We'll fix permissions after the database is created

### Start MCP server with Docker Compose
# Try Docker Compose V2 first (recommended)
docker compose -f docker-compose.mcp.yml up -d

# If V2 fails, try V1 syntax
# docker-compose -f docker-compose.mcp.yml up -d

### Verify Docker Compose started successfully
docker compose -f docker-compose.mcp.yml ps
# OR: docker-compose -f docker-compose.mcp.yml ps

### Check if container is running and healthy
docker ps | grep n8n-mcp-server

### If container is not running, check logs for errors
docker compose -f docker-compose.mcp.yml logs n8n-mcp
# OR: docker-compose -f docker-compose.mcp.yml logs n8n-mcp

### Verify MCP Server Installation
Test the MCP server is running correctly:

### Test health endpoint (replace YOUR_TOKEN with your actual AUTH_TOKEN)
curl -H "Authorization: Bearer YOUR_TOKEN" \
     -H "Content-Type: application/json" \
     http://localhost:3001/health

### Test MCP endpoint information
curl -H "Authorization: Bearer YOUR_TOKEN" \
     -H "Content-Type: application/json" \
     http://localhost:3001/mcp

### Test MCP JSON-RPC protocol (example tool call)
curl -X POST -H "Authorization: Bearer YOUR_TOKEN" \
     -H "Content-Type: application/json" \
     -d '{
       "jsonrpc": "2.0",
       "id": 1,
       "method": "tools/call",
       "params": {
         "name": "search_nodes",
         "arguments": {"query": "http", "limit": 5}
       }
     }' \
     http://localhost:3001/mcp

### Configure Application Environment Variables
Update your main application's .env.production file:

### Required MCP configuration in .env.production:
MCP_SERVER_URL=http://localhost:3001
MCP_API_KEY=28d8026f-fad7-4bc6-87c5-9fcacba57fde
MCP_PROFILE=default

### MCP Health Check via Application:
Once deployed, test the MCP integration through your application:
curl https://yourdomain.com/api/health

This endpoint will verify:
- Environment variables are properly set
- MCP server connectivity (via JSON-RPC protocol)
- Authentication with czlonkowski/n8n-mcp service
- Available MCP tools and capabilities

Note: The MCP server uses JSON-RPC protocol via the /mcp endpoint, not direct REST API calls to individual tools.

### Available MCP Tools
The czlonkowski/n8n-mcp server provides these powerful tools:

Core Documentation Tools:
- tools_documentation - Get documentation for any MCP tool
- list_nodes - List all n8n nodes with filtering
- get_node_info - Comprehensive node information
- get_node_essentials - Essential properties only (10-20 vs 200+)
- search_nodes - Full-text search across node documentation
- search_node_properties - Find specific properties within nodes
- get_node_documentation - Parsed documentation from n8n-docs

Advanced Configuration Tools:
- get_node_for_task - Pre-configured settings for common tasks
- list_tasks - Discover available task templates
- validate_node_operation - Validate node configurations
- validate_node_minimal - Quick validation for required fields
- validate_workflow - Complete workflow validation
- validate_workflow_connections - Check workflow structure
- validate_workflow_expressions - Validate n8n expressions

AI Integration Tools:
- list_ai_tools - List all AI-capable nodes
- get_node_as_tool_info - Guidance for using nodes as AI tools

### Monitor MCP Server
Check MCP server status:

### For Docker deployment:
docker compose -f /var/www/mcp-server/docker-compose.mcp.yml ps
docker compose -f /var/www/mcp-server/docker-compose.mcp.yml logs -f

### Restart MCP server if needed:
docker compose -f /var/www/mcp-server/docker-compose.mcp.yml restart

## Step 11: Database Setup (if using Supabase)

### Ensure your Supabase project is configured:
1. Create tables as needed
2. Set up Row Level Security (RLS) policies
3. Configure authentication providers
4. Update environment variables with correct URLs and keys

## Step 12: Health Checks

### Test application endpoints
curl -I https://yourdomain.com
curl https://yourdomain.com/api/health

### Verify MCP integration
The health endpoint will show MCP status:
- MCP server connectivity
- Authentication status
- Available MCP tools and capabilities

### Check system resources
htop
df -h
free -h

## Troubleshooting

### Common issues and solutions:

1. **Application won't start**
   - Check PM2 logs: pm2 logs n8n-workflow-builder
   - Verify environment variables are set correctly
   - Ensure all dependencies are installed

2. **502 Bad Gateway**
   - Check if application is running: pm2 status
   - Verify Nginx configuration: sudo nginx -t
   - Check if port 3000 is accessible: netstat -tlnp | grep 3000

3. **SSL certificate issues**
   - Verify domain DNS is pointing to your server
   - Check certbot logs: sudo journalctl -u certbot

4. **MCP connection issues**
   - **MOST COMMON**: Authentication token mismatch between application and MCP server
     ```bash
     # Check MCP server token
     grep AUTH_TOKEN /var/www/mcp-server/.env
     # Check application token  
     grep MCP_API_KEY /var/www/n8n-workflow-builder/.env.production
     # They should match exactly - if not, update .env.production and restart app
     ```
   - Verify MCP environment variables are set correctly
   - Check if Docker Compose service started: docker compose -f /var/www/mcp-server/docker-compose.mcp.yml ps
   - Check if container is running: docker ps | grep n8n-mcp-server
   - Check container logs for errors: docker compose -f /var/www/mcp-server/docker-compose.mcp.yml logs n8n-mcp
   - Verify port 3001 is listening: netstat -tlnp | grep 3001
   - Test MCP server connectivity: curl -H "Authorization: Bearer YOUR_TOKEN" http://localhost:3001/health
   - Check application logs for MCP-related errors: pm2 logs n8n-workflow-builder | grep -i mcp
   - Restart MCP server if needed: docker compose -f /var/www/mcp-server/docker-compose.mcp.yml restart
   - Test MCP endpoint info: curl -H "Authorization: Bearer YOUR_TOKEN" http://localhost:3001/mcp
   - Test MCP JSON-RPC protocol: curl -X POST -H "Authorization: Bearer YOUR_TOKEN" -H "Content-Type: application/json" -d '{"jsonrpc": "2.0", "id": 1, "method": "tools/list", "params": {}}' http://localhost:3001/mcp
   - If container won't start, check Docker service: sudo systemctl status docker
   - If Docker Compose file has issues, validate syntax: docker compose -f /var/www/mcp-server/docker-compose.mcp.yml config
   - For ContainerConfig errors, try: docker system prune -a (removes unused images/containers)
   - If using old docker-compose version, try: docker-compose -f /var/www/mcp-server/docker-compose.mcp.yml down --remove-orphans
   - **For permission issues**: Stop container, fix data directory permissions: `sudo chmod -R 777 /var/www/mcp-server/data`, then restart
   - **For missing schema.sql errors**: The container should rebuild the database automatically with `REBUILD_ON_START=true` and `FORCE_REBUILD=true`
   - **If database initialization fails**: Try different image versions:
     ```bash
     docker compose -f docker-compose.mcp.yml down
     docker pull ghcr.io/czlonkowski/n8n-mcp:v2.7.16
     # Update docker-compose.mcp.yml to use :v2.7.16 instead of :latest
     docker compose -f docker-compose.mcp.yml up -d
     ```
   - **Alternative approach**: If the Docker image continues to fail, try running the MCP server directly:
     ```bash
     # Clone and build the MCP server manually
     cd /var/www
     git clone https://github.com/czlonkowski/n8n-mcp.git
     cd n8n-mcp
     npm install
     npm run build
     npm run rebuild
     # Copy your .env file from /var/www/mcp-server/.env to /var/www/n8n-mcp/.env
     npm run start:http
     ```

5. **Performance issues**
   - Monitor system resources: htop, free -h
   - Check PM2 monitoring: pm2 monit
   - Consider enabling PM2 cluster mode for multiple instances

### Useful commands:
- Restart Nginx: sudo systemctl restart nginx
- Restart PM2: pm2 restart all
- View system logs: sudo journalctl -f
- Check disk usage: du -sh /var/www/n8n-workflow-builder

## Security Recommendations

1. **Regular updates**
   - Keep system packages updated: sudo apt update && sudo apt upgrade
   - Update Node.js dependencies: npm audit fix

2. **Backup strategy**
   - Set up automated backups of your database
   - Create regular snapshots of your VPS

3. **Monitoring**
   - Set up uptime monitoring
   - Configure log rotation
   - Monitor resource usage

## Production Checklist

- [ ] Domain DNS configured
- [ ] SSL certificate installed
- [ ] Environment variables set (including MCP configuration)
- [ ] Application builds successfully
- [ ] PM2 configured for auto-restart
- [ ] Nginx configured and tested
- [ ] Firewall configured
- [ ] Database connected and accessible
- [ ] Docker and Docker Compose installed
- [ ] czlonkowski/n8n-mcp server installed and configured
- [ ] MCP server running via Docker Compose
- [ ] MCP server connection verified
- [ ] MCP tools functionality tested
- [ ] Health check endpoint responding (including MCP status)
- [ ] Monitoring set up
- [ ] Backup strategy implemented

Your N8N Workflow Builder should now be successfully deployed with the comprehensive czlonkowski/n8n-mcp server and accessible at https://yourdomain.com

The czlonkowski/n8n-mcp server provides:
- 535+ n8n nodes with comprehensive documentation
- 99% property coverage with smart validation
- AI-optimized tools for workflow building
- Pre-built database for fast response times (~12ms average)
- Advanced validation and configuration capabilities

## Additional MCP Server Management

### View MCP server status
docker compose -f /var/www/mcp-server/docker-compose.mcp.yml ps

### View MCP server logs
docker compose -f /var/www/mcp-server/docker-compose.mcp.yml logs -f n8n-mcp

### Restart MCP server
docker compose -f /var/www/mcp-server/docker-compose.mcp.yml restart

### Update MCP server
cd /var/www/mcp-server
docker compose -f docker-compose.mcp.yml pull
docker compose -f docker-compose.mcp.yml up -d

### Monitor MCP server
docker stats n8n-mcp-server
docker compose -f /var/www/mcp-server/docker-compose.mcp.yml logs -f

### Test MCP server functionality
# Test MCP endpoint information (replace YOUR_TOKEN with your actual AUTH_TOKEN)
curl -H "Authorization: Bearer YOUR_TOKEN" \
     -H "Content-Type: application/json" \
     http://localhost:3001/mcp

# Test available tools via MCP JSON-RPC
curl -X POST -H "Authorization: Bearer YOUR_TOKEN" \
     -H "Content-Type: application/json" \
     -d '{
       "jsonrpc": "2.0",
       "id": 1,
       "method": "tools/list",
       "params": {}
     }' \
     http://localhost:3001/mcp

# Test node search via MCP JSON-RPC
curl -X POST -H "Authorization: Bearer YOUR_TOKEN" \
     -H "Content-Type: application/json" \
     -d '{
       "jsonrpc": "2.0",
       "id": 2,
       "method": "tools/call",
       "params": {
         "name": "search_nodes",
         "arguments": {"query": "slack", "limit": 3}
       }
     }' \
     http://localhost:3001/mcp
