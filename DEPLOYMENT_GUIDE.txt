# N8N Workflow Builder - Ubuntu VPS Deployment Guide

## Prerequisites
- Ubuntu 22.04 VPS with root access
- Domain name pointed to your VPS IP
- At least 2GB RAM and 20GB storage

## Step 1: Server Setup and Dependencies

### Update system packages
sudo apt update && sudo apt upgrade -y

### Install Node.js 18.x
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs

### Install additional dependencies
sudo apt install -y curl git nginx certbot python3-certbot-nginx build-essential

### Install PM2 globally
npm install -g pm2

### Verify installations
node --version
npm --version
pm2 --version

## Step 2: Clone and Setup Application

### Navigate to web directory
cd /var/www

### Clone your repository
sudo git clone <YOUR_REPO_URL> n8n-workflow-builder
sudo chown -R $USER:$USER /var/www/n8n-workflow-builder
cd n8n-workflow-builder

### Install dependencies
npm install

## Step 3: Environment Configuration

### Create production environment file
cp .env.example .env.production
# OR create new file:
nano .env.production

### Required environment variables:
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
ANTHROPIC_API_KEY=your_anthropic_api_key
MCP_SERVER_URL=http://localhost:3001
MCP_API_KEY=your_generated_mcp_api_key
MCP_PROFILE=default
NEXTAUTH_SECRET=your_nextauth_secret
NEXTAUTH_URL=https://yourdomain.com
NODE_ENV=production

### Set proper permissions
chmod 600 .env.production

## Step 4: Build Application

### Build for production
npm run build

### Test the build locally
npm run start:prod

## Step 5: PM2 Process Management

### Start application with PM2
pm2 start npm --name "n8n-workflow-builder" -- run start:prod

### Configure PM2 to start on boot
pm2 startup
# Follow the instructions provided by the command above

### Save PM2 configuration
pm2 save

### Verify PM2 status
pm2 status
pm2 logs n8n-workflow-builder

## Step 6: Nginx Configuration

### Create Nginx configuration
sudo nano /etc/nginx/sites-available/yourdomain.com

### Add this configuration (replace yourdomain.com):
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    # Static files caching
    location /_next/static/ {
        proxy_pass http://localhost:3000;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    # Favicon and robots.txt
    location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://localhost:3000;
        add_header Cache-Control "public, max-age=86400";
    }
}

### Enable the site
sudo ln -s /etc/nginx/sites-available/yourdomain.com /etc/nginx/sites-enabled/

### Test Nginx configuration
sudo nginx -t

### Reload Nginx
sudo systemctl reload nginx

## Step 7: SSL Certificate with Let's Encrypt

### Install SSL certificate
sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com

### Test SSL renewal
sudo certbot renew --dry-run

## Step 8: Firewall Configuration

### Configure UFW firewall
sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw allow 3001/tcp
sudo ufw --force enable

### Check firewall status
sudo ufw status

## Step 9: Monitoring and Maintenance

### Monitor PM2 processes
pm2 monit

### View application logs
pm2 logs n8n-workflow-builder

### Restart application
pm2 restart n8n-workflow-builder

### Update application
cd /var/www/n8n-workflow-builder
git pull origin main
npm install
npm run build
pm2 restart n8n-workflow-builder

## Step 10: MCP Server Setup and Configuration

### Install and Setup Local MCP Server
The application will use a self-hosted MCP server for N8N workflow operations.

### Create custom MCP server for N8N workflow operations
mkdir -p /var/www/mcp-server
cd /var/www/mcp-server

### Initialize new Node.js project
npm init -y

### Install required dependencies
npm install express cors helmet morgan dotenv

### Generate a secure API key for MCP
openssl rand -hex 32

### Create MCP server implementation
nano /var/www/mcp-server/server.js

### Add MCP server content:
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;
const API_KEY = process.env.API_KEY || 'your_generated_mcp_api_key';

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json());

// Authentication middleware
const authenticate = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'Missing or invalid authorization header' });
  }
  
  const token = authHeader.substring(7);
  if (token !== API_KEY) {
    return res.status(401).json({ error: 'Invalid API key' });
  }
  
  next();
};

// Health check endpoint
app.get('/health', authenticate, (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    services: {
      mcp: 'running',
      auth: 'enabled'
    }
  });
});

// MCP Tools endpoints
app.post('/tools/search-nodes', authenticate, (req, res) => {
  const { query, limit = 10, category } = req.body;
  
  // Mock response for now - replace with actual N8N node search logic
  const mockNodes = [
    {
      nodeType: 'n8n-nodes-base.httpRequest',
      displayName: 'HTTP Request',
      description: 'Makes HTTP requests to any URL',
      category: 'core',
      relevance: 'high'
    },
    {
      nodeType: 'n8n-nodes-base.webhook',
      displayName: 'Webhook',
      description: 'Receives HTTP requests',
      category: 'trigger',
      relevance: 'high'
    },
    {
      nodeType: 'n8n-nodes-base.code',
      displayName: 'Code',
      description: 'Execute custom JavaScript code',
      category: 'transform',
      relevance: 'medium'
    }
  ];
  
  const filteredNodes = mockNodes.filter(node => 
    !query || node.displayName.toLowerCase().includes(query.toLowerCase()) ||
    node.description.toLowerCase().includes(query.toLowerCase())
  ).slice(0, limit);
  
  res.json({
    results: filteredNodes,
    total: filteredNodes.length,
    query: query || 'all'
  });
});

app.post('/tools/categorize-nodes', authenticate, (req, res) => {
  const { nodes } = req.body;
  
  // Mock categorization response
  res.json({
    categorized: {
      triggers: nodes?.filter(n => n.category === 'trigger') || [],
      transforms: nodes?.filter(n => n.category === 'transform') || [],
      outputs: nodes?.filter(n => n.category === 'output') || [],
      inputs: nodes?.filter(n => n.category === 'input') || []
    },
    configurationStrategy: {
      order: ['triggers', 'inputs', 'transforms', 'outputs'],
      estimatedTokens: 1500
    }
  });
});

app.post('/tools/validate-workflow', authenticate, (req, res) => {
  const { workflow } = req.body;
  
  // Mock validation response
  res.json({
    isValid: true,
    errors: [],
    warnings: [],
    suggestions: ['Consider adding error handling nodes']
  });
});

// Catch-all for unsupported endpoints
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  res.status(500).json({ error: 'Internal server error' });
});

app.listen(PORT, 'localhost', () => {
  console.log(`MCP Server running on http://localhost:${PORT}`);
  console.log(`API Key: ${API_KEY.substring(0, 8)}...`);
});

### Create environment file for MCP server
nano /var/www/mcp-server/.env

### Add environment variables:
PORT=3001
API_KEY=your_generated_mcp_api_key_here
NODE_ENV=production

### Start MCP server with PM2
pm2 start /var/www/mcp-server/server.js --name "mcp-server" --env production

### Verify MCP configuration in environment:
- MCP_SERVER_URL: Points to your local MCP server (http://localhost:3001)
- MCP_API_KEY: Your generated API key for authentication
- MCP_PROFILE: Profile identifier (default)

### Test MCP connection:
curl -H "Authorization: Bearer your_generated_mcp_api_key" \
     -H "Content-Type: application/json" \
     http://localhost:3001/health

### Test MCP tools endpoint:
curl -X POST -H "Authorization: Bearer your_generated_mcp_api_key" \
     -H "Content-Type: application/json" \
     -d '{"query": "http", "limit": 5}' \
     http://localhost:3001/tools/search-nodes

### MCP Health Check via Application:
Once deployed, test the MCP integration:
curl https://yourdomain.com/api/health

This endpoint will verify:
- Environment variables are properly set
- MCP server connectivity
- Authentication with local MCP service

## Step 11: Database Setup (if using Supabase)

### Ensure your Supabase project is configured:
1. Create tables as needed
2. Set up Row Level Security (RLS) policies
3. Configure authentication providers
4. Update environment variables with correct URLs and keys

## Step 12: Health Checks

### Test application endpoints
curl -I https://yourdomain.com
curl https://yourdomain.com/api/health

### Verify MCP integration
The health endpoint will show MCP status:
- MCP server connectivity
- Authentication status
- Available MCP tools and capabilities

### Check system resources
htop
df -h
free -h

## Troubleshooting

### Common issues and solutions:

1. **Application won't start**
   - Check PM2 logs: pm2 logs n8n-workflow-builder
   - Verify environment variables are set correctly
   - Ensure all dependencies are installed

2. **502 Bad Gateway**
   - Check if application is running: pm2 status
   - Verify Nginx configuration: sudo nginx -t
   - Check if port 3000 is accessible: netstat -tlnp | grep 3000

3. **SSL certificate issues**
   - Verify domain DNS is pointing to your server
   - Check certbot logs: sudo journalctl -u certbot

4. **MCP connection issues**
   - Verify MCP environment variables are set correctly
   - Test MCP server connectivity: curl -H "Authorization: Bearer YOUR_MCP_API_KEY" http://localhost:3001/health
   - Check MCP server logs: pm2 logs mcp-server
   - Check application logs for MCP-related errors: pm2 logs n8n-workflow-builder | grep -i mcp
   - Ensure local MCP server is running: pm2 status
   - Restart MCP server if needed: pm2 restart mcp-server

5. **Performance issues**
   - Monitor system resources: htop, free -h
   - Check PM2 monitoring: pm2 monit
   - Consider enabling PM2 cluster mode for multiple instances

### Useful commands:
- Restart Nginx: sudo systemctl restart nginx
- Restart PM2: pm2 restart all
- View system logs: sudo journalctl -f
- Check disk usage: du -sh /var/www/n8n-workflow-builder

## Security Recommendations

1. **Regular updates**
   - Keep system packages updated: sudo apt update && sudo apt upgrade
   - Update Node.js dependencies: npm audit fix

2. **Backup strategy**
   - Set up automated backups of your database
   - Create regular snapshots of your VPS

3. **Monitoring**
   - Set up uptime monitoring
   - Configure log rotation
   - Monitor resource usage

## Production Checklist

- [ ] Domain DNS configured
- [ ] SSL certificate installed
- [ ] Environment variables set (including MCP configuration)
- [ ] Application builds successfully
- [ ] PM2 configured for auto-restart
- [ ] Nginx configured and tested
- [ ] Firewall configured
- [ ] Database connected and accessible
- [ ] MCP server installed and configured
- [ ] MCP server running via PM2
- [ ] MCP server connection verified
- [ ] Health check endpoint responding (including MCP status)
- [ ] Monitoring set up
- [ ] Backup strategy implemented

Your N8N Workflow Builder should now be successfully deployed with a self-hosted MCP server and accessible at https://yourdomain.com

## Additional MCP Server Management

### View MCP server status
pm2 status mcp-server

### View MCP server logs
pm2 logs mcp-server

### Restart MCP server
pm2 restart mcp-server

### Update MCP server configuration
nano /var/www/mcp-config/server.json
pm2 restart mcp-server

### Monitor both services
pm2 monit
