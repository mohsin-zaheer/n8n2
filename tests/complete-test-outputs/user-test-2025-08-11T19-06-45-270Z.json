{
  "name": "AI-Powered Image Processing and Social Media Automation",
  "nodes": [
    {
      "id": "googleDrive_1",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        250,
        300
      ],
      "parameters": {
        "operation": "list",
        "folderId": "={{ $parameter.folderId }}",
        "filters": {
          "mimeType": "image/jpeg,image/png,image/gif,image/webp"
        },
        "options": {
          "fields": "files(id,name,mimeType,createdTime,size,webViewLink)"
        }
      },
      "name": "Monitor Google Drive",
      "typeVersion": 3,
      "onError": "continueRegularOutput"
    },
    {
      "id": "if_1",
      "type": "n8n-nodes-base.if",
      "position": [
        550,
        300
      ],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.createdTime }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Check for New Images",
      "typeVersion": 2.2,
      "onError": "continueRegularOutput"
    },
    {
      "id": "googleDrive_2",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        850,
        300
      ],
      "parameters": {
        "operation": "download",
        "fileId": "={{ $json.id }}",
        "options": {
          "binaryPropertyName": "imageData"
        }
      },
      "name": "Download Image",
      "typeVersion": 3,
      "onError": "continueRegularOutput"
    },
    {
      "id": "openAi_1",
      "type": "n8n-nodes-base.openAi",
      "position": [
        1150,
        300
      ],
      "parameters": {
        "resource": "image",
        "operation": "create",
        "model": "gpt-4-vision-preview",
        "prompt": "Analyze this image and provide: 1) A list of objects, people, and scenes detected 2) Dominant colors 3) Mood/atmosphere 4) Suggested hashtags 5) Key visual elements for SEO. Format as JSON with keys: objects, colors, mood, hashtags, elements.",
        "maxTokens": 500,
        "options": {
          "temperature": 0.3
        }
      },
      "name": "AI Vision Analysis",
      "typeVersion": 1.1,
      "onError": "continueRegularOutput",
      "maxTries": 3
    },
    {
      "id": "openAi_2",
      "type": "n8n-nodes-base.openAi",
      "position": [
        1450,
        300
      ],
      "parameters": {
        "resource": "text",
        "operation": "complete",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an SEO content specialist. Create compelling, SEO-optimized descriptions for images based on AI vision analysis."
            },
            {
              "role": "user",
              "content": "Based on this image analysis: {{ $('AI Vision Analysis').item.json.choices[0].message.content }}, create: 1) SEO-optimized title (60 chars max) 2) Meta description (160 chars max) 3) Alt text (125 chars max) 4) Social media caption with hashtags 5) Long description for blog/website. Format as JSON."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 800
        }
      },
      "name": "Generate SEO Description",
      "typeVersion": 1.1,
      "notes": "Generate SEO-optimized descriptions for images using GPT-4 based on AI vision analysis and detected content tags",
      "onError": "continueRegularOutput",
      "maxTries": 3
    },
    {
      "id": "code_1",
      "type": "n8n-nodes-base.code",
      "position": [
        1750,
        300
      ],
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Image resizing logic for web and mobile\nconst sharp = require('sharp');\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const imageBuffer = item.binary.imageData.data;\n  \n  // Create different sizes\n  const sizes = {\n    thumbnail: { width: 150, height: 150 },\n    mobile: { width: 480, height: 320 },\n    web: { width: 1200, height: 800 },\n    social: { width: 1080, height: 1080 }\n  };\n  \n  const resizedImages = {};\n  \n  for (const [sizeName, dimensions] of Object.entries(sizes)) {\n    const resized = await sharp(imageBuffer)\n      .resize(dimensions.width, dimensions.height, { fit: 'cover' })\n      .jpeg({ quality: 85 })\n      .toBuffer();\n    \n    resizedImages[sizeName] = {\n      data: resized,\n      mimeType: 'image/jpeg',\n      fileName: `${item.json.name.split('.')[0]}_${sizeName}.jpg`\n    };\n  }\n  \n  results.push({\n    json: {\n      ...item.json,\n      resizedImages: Object.keys(resizedImages),\n      originalSize: imageBuffer.length\n    },\n    binary: {\n      ...item.binary,\n      ...resizedImages\n    }\n  });\n}\n\nreturn results;"
      },
      "name": "Process Image Sizes",
      "typeVersion": 2,
      "onError": "continueRegularOutput"
    },
    {
      "id": "awsS3_1",
      "type": "n8n-nodes-base.awsS3",
      "position": [
        2050,
        300
      ],
      "parameters": {
        "operation": "upload",
        "bucketName": "={{ $parameter.s3Bucket }}",
        "fileName": "images/{{ $json.name }}",
        "binaryData": true,
        "binaryPropertyName": "imageData",
        "options": {
          "acl": "public-read",
          "storageClass": "STANDARD_IA"
        }
      },
      "name": "Upload to S3",
      "typeVersion": 2,
      "onError": "continueRegularOutput",
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "id": "set_1",
      "type": "n8n-nodes-base.set",
      "position": [
        2350,
        300
      ],
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "file_id",
              "name": "file_id",
              "value": "={{ $('Monitor Google Drive').item.json.id }}",
              "type": "string"
            },
            {
              "id": "file_name",
              "name": "file_name",
              "value": "={{ $('Monitor Google Drive').item.json.name }}",
              "type": "string"
            },
            {
              "id": "s3_url",
              "name": "s3_url",
              "value": "={{ $('Upload to S3').item.json.Location }}",
              "type": "string"
            },
            {
              "id": "ai_tags",
              "name": "ai_tags",
              "value": "={{ JSON.parse($('AI Vision Analysis').item.json.choices[0].message.content).hashtags }}",
              "type": "string"
            },
            {
              "id": "seo_description",
              "name": "seo_description",
              "value": "={{ JSON.parse($('Generate SEO Description').item.json.choices[0].message.content).meta_description }}",
              "type": "string"
            },
            {
              "id": "social_caption",
              "name": "social_caption",
              "value": "={{ JSON.parse($('Generate SEO Description').item.json.choices[0].message.content).social_caption }}",
              "type": "string"
            },
            {
              "id": "created_at",
              "name": "created_at",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            },
            {
              "id": "status",
              "name": "status",
              "value": "processed",
              "type": "string"
            }
          ]
        }
      },
      "name": "Prepare Database Data",
      "typeVersion": 3.4,
      "onError": "continueRegularOutput"
    },
    {
      "id": "postgres_1",
      "type": "n8n-nodes-base.postgres",
      "position": [
        2650,
        300
      ],
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "image_metadata",
        "columns": "file_id, file_name, s3_url, ai_tags, seo_description, social_caption, created_at, status",
        "returnFields": "*",
        "options": {
          "queryBatching": "independently"
        }
      },
      "name": "Update Database",
      "typeVersion": 2.6,
      "notes": "Insert image metadata into PostgreSQL database including file paths, AI-generated tags, descriptions, and social media posting status",
      "onError": "stopWorkflow",
      "maxTries": 2
    },
    {
      "id": "twitter_1",
      "type": "n8n-nodes-base.twitter",
      "position": [
        2950,
        200
      ],
      "parameters": {
        "operation": "tweet",
        "text": "={{ $('Prepare Database Data').item.json.social_caption }}",
        "additionalFields": {
          "attachments": "={{ $('Upload to S3').item.json.Location }}"
        }
      },
      "name": "Post to Twitter",
      "typeVersion": 2,
      "onError": "continueRegularOutput",
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "id": "instagram_1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2950,
        400
      ],
      "parameters": {
        "method": "POST",
        "url": "https://graph.instagram.com/v18.0/me/media",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "instagramApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "image_url",
              "value": "={{ $('Upload to S3').item.json.Location }}"
            },
            {
              "name": "caption",
              "value": "={{ $('Prepare Database Data').item.json.social_caption }}"
            }
          ]
        }
      },
      "name": "Post to Instagram",
      "typeVersion": 4.2,
      "onError": "continueRegularOutput",
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "id": "set_2",
      "type": "n8n-nodes-base.set",
      "position": [
        3250,
        300
      ],
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "twitter_posted",
              "name": "twitter_posted",
              "value": "={{ $('Post to Twitter').item.json.id ? true : false }}",
              "type": "boolean"
            },
            {
              "id": "instagram_posted",
              "name": "instagram_posted",
              "value": "={{ $('Post to Instagram').item.json.id ? true : false }}",
              "type": "boolean"
            },
            {
              "id": "social_status",
              "name": "social_status",
              "value": "completed",
              "type": "string"
            }
          ]
        }
      },
      "name": "Update Social Status",
      "typeVersion": 3.4,
      "onError": "continueRegularOutput"
    },
    {
      "id": "sticky_promo_1754939204716",
      "name": "Ghost Team Promo",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        -130
      ],
      "parameters": {
        "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team.",
        "height": 710,
        "width": 280,
        "color": 4
      }
    },
    {
      "id": "sticky_triggers_1754939204716",
      "name": "Triggers Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        480,
        -130
      ],
      "parameters": {
        "content": "## 📥 Triggers\nMonitors Google Drive folder for new image files and filters them by supported image formats. Acts as the workflow trigger to start processing when new images are detected.",
        "height": 710,
        "width": 310,
        "color": 6
      }
    },
    {
      "id": "sticky_inputs_1754939204716",
      "name": "Inputs Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        890,
        -130
      ],
      "parameters": {
        "content": "## 📊 Inputs\nDownloads the actual image file from Google Drive to make it available for AI analysis and processing. Retrieves the binary image data for subsequent operations.",
        "height": 710,
        "width": 310,
        "color": 5
      }
    },
    {
      "id": "sticky_transforms_1754939204716",
      "name": "Transform Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1300,
        -130
      ],
      "parameters": {
        "content": "## ⚙️ Transform\nUses AI vision to analyze image content and detect objects, colors, mood, and visual elements. Generates SEO-optimized descriptions, titles, and social media captions based on the analysis. Creates multiple image sizes for different platforms.",
        "height": 710,
        "width": 910,
        "color": 4
      }
    },
    {
      "id": "sticky_decision_1754939204716",
      "name": "Decision Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2310,
        -130
      ],
      "parameters": {
        "content": "## 🔀 Decision\nEvaluates whether detected files are new images that need processing. Filters out files that don't meet the criteria for further processing.",
        "height": 710,
        "width": 310,
        "color": 3
      }
    },
    {
      "id": "sticky_outputs_1754939204716",
      "name": "Outputs Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2720,
        -130
      ],
      "parameters": {
        "content": "## 🚀 Outputs\nUploads processed images to AWS S3 for permanent storage and public access. Prepares structured metadata for database insertion including file paths, AI tags, and descriptions.\n\nUpdates PostgreSQL database with comprehensive image metadata and posts content to social media platforms. Tracks posting status and completion across all integrated services.",
        "height": 710,
        "width": 1510,
        "color": 7
      }
    }
  ],
  "connections": {
    "Monitor Google Drive": {
      "main": [
        [
          {
            "node": "Check for New Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for New Images": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "AI Vision Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Vision Analysis": {
      "main": [
        [
          {
            "node": "Generate SEO Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate SEO Description": {
      "main": [
        [
          {
            "node": "Process Image Sizes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Image Sizes": {
      "main": [
        [
          {
            "node": "Upload to S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to S3": {
      "main": [
        [
          {
            "node": "Prepare Database Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Database Data": {
      "main": [
        [
          {
            "node": "Update Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Database": {
      "main": [
        [
          {
            "node": "Post to Twitter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to Instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Twitter": {
      "main": [
        [
          {
            "node": "Update Social Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Instagram": {
      "main": [
        [
          {
            "node": "Update Social Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all",
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-11T19:06:45.270Z",
  "versionId": null,
  "__metadata": {
    "prompt": "Create a workflow that monitors a Google Drive folder for new images, uses AI vision to analyze and tag them, generates SEO-optimized descriptions with GPT-4, automatically resizes images for web/mobile, uploads to AWS S3, updates a database with metadata, and posts to social media with custom captions based on the content detected.",
    "testName": "User Test",
    "generatedAt": "2025-08-11T19:06:45.270Z",
    "phases": {
      "discovery": true,
      "configuration": true,
      "building": true,
      "validation": true,
      "documentation": true
    },
    "validationAttempts": 2,
    "stickyNotesAdded": 6
  }
}