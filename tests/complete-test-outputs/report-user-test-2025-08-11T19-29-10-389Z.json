{
  "testName": "User Test",
  "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
  "sessionId": "complete_e2e_user_test_1754940408149",
  "timestamp": "2025-08-11T19:26:48.149Z",
  "duration": 142240,
  "success": true,
  "phases": {
    "discovery": {
      "name": "Discovery",
      "success": true,
      "metrics": {
        "startTime": 1754940408768,
        "endTime": 1754940434155,
        "duration": 25387,
        "memoryUsage": {
          "heapUsed": 1468208,
          "heapTotal": 32112640,
          "external": 6462148
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T19:26:48.768Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting discovery phase"
        },
        {
          "timestamp": "2025-08-11T19:26:48.768Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for discovery phase"
        },
        {
          "timestamp": "2025-08-11T19:27:07.124Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T19:27:07.124Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"chat_with_ai\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"get_api_data\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"transform_data\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"send_slack_message\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"post_json_request\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"insert_postgres_data\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T19:27:07.125Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"send_email\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.305Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.312Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.340Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.341Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.347Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.348Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.398Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.398Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T19:27:07.398Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"html\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.398Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T19:27:07.398Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"schedule\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.398Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T19:27:07.398Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"if\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T19:27:07.517Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.521Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:07.604Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.httpRequest (Make a simple GET request to retrieve data from an API)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.emailSend (Send an email notification)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.openAi (Send a message to an AI model and get response)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.httpRequest (Send JSON data to an API endpoint)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.postgres (Insert data into PostgreSQL table)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.slack (Send a message to Slack channel)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.htmlExtract (Extract product prices and availability data from competitor website HTML)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.scheduleTrigger (Trigger the competitive pricing workflow every hour)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.050Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Route items based on pricing conditions and profit margin thresholds)"
        },
        {
          "timestamp": "2025-08-11T19:27:14.155Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T19:27:14.155Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_2",
          "type": "nodes-base.httpRequest",
          "purpose": "Make a simple GET request to retrieve data from an API"
        },
        {
          "id": "task_node_7",
          "type": "nodes-base.emailSend",
          "purpose": "Send an email notification"
        },
        {
          "id": "task_node_1",
          "type": "nodes-base.openAi",
          "purpose": "Send a message to an AI model and get response"
        },
        {
          "id": "task_node_5",
          "type": "nodes-base.httpRequest",
          "purpose": "Send JSON data to an API endpoint"
        },
        {
          "id": "task_node_6",
          "type": "nodes-base.postgres",
          "purpose": "Insert data into PostgreSQL table"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.slack",
          "purpose": "Send a message to Slack channel"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.htmlExtract",
          "purpose": "Extract product prices and availability data from competitor website HTML"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.scheduleTrigger",
          "purpose": "Trigger the competitive pricing workflow every hour"
        },
        {
          "id": "search_node_3",
          "type": "nodes-base.if",
          "purpose": "Route items based on pricing conditions and profit margin thresholds"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754940408149",
        "createdAt": "2025-08-11T19:26:48.709Z",
        "state": {
          "phase": "configuration",
          "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
          "discovered": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "authentication": "none",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Make a simple GET request to retrieve data from an API",
              "displayName": "get api data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "POST",
                "onError": "continueRegularOutput",
                "jsonBody": "",
                "maxTries": 2,
                "sendBody": true,
                "contentType": "json",
                "retryOnFail": true,
                "specifyBody": "json",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Send JSON data to an API endpoint",
              "displayName": "post json request",
              "isPreConfigured": true
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds"
            }
          ],
          "selected": [
            "task_node_2",
            "task_node_7",
            "task_node_1",
            "task_node_5",
            "task_node_6",
            "task_node_3",
            "task_node_4",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "authentication": "none",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Make a simple GET request to retrieve data from an API",
                "displayName": "get api data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_7",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_7",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "POST",
                  "onError": "continueRegularOutput",
                  "jsonBody": "",
                  "maxTries": 2,
                  "sendBody": true,
                  "contentType": "json",
                  "retryOnFail": true,
                  "specifyBody": "json",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Send JSON data to an API endpoint",
                "displayName": "post json request",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_6",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_6",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.htmlExtract",
                "purpose": "Extract product prices and availability data from competitor website HTML"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Trigger the competitive pricing workflow every hour"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Route items based on pricing conditions and profit margin thresholds"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T19:27:13.627Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "prompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations."
        },
        "output": {
          "nodes": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "displayName": "get api data",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "isPreConfigured": true,
              "config": {
                "method": "GET",
                "url": "",
                "authentication": "none",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 1000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "displayName": "send email",
              "purpose": "Send an email notification",
              "isPreConfigured": true,
              "config": {
                "fromEmail": "",
                "toEmail": "",
                "subject": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 3000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "displayName": "post json request",
              "purpose": "Send JSON data to an API endpoint",
              "isPreConfigured": true,
              "config": {
                "method": "POST",
                "url": "",
                "sendBody": true,
                "contentType": "json",
                "specifyBody": "json",
                "jsonBody": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "displayName": "insert postgres data",
              "purpose": "Insert data into PostgreSQL table",
              "isPreConfigured": true,
              "config": {
                "operation": "insert",
                "table": "",
                "columns": "",
                "returnFields": "*",
                "onError": "stopWorkflow",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "displayName": "send slack message",
              "purpose": "Send a message to Slack channel",
              "isPreConfigured": true,
              "config": {
                "resource": "message",
                "operation": "post",
                "channel": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 2000,
                "parameters": {}
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "displayName": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "displayName": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "needsConfiguration": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "displayName": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "needsConfiguration": true
            }
          ]
        },
        "transformations": [
          "Intent Analysis",
          "Node Discovery",
          "Selection"
        ]
      }
    },
    "configuration": {
      "name": "Configuration",
      "success": true,
      "metrics": {
        "startTime": 1754940434155,
        "endTime": 1754940476908,
        "duration": 42753,
        "memoryUsage": {
          "heapUsed": 2262200,
          "heapTotal": 36110336,
          "external": 7324422
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T19:27:14.155Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting configuration phase"
        },
        {
          "timestamp": "2025-08-11T19:27:14.155Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for configuration phase"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.httpRequest\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.emailSend\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.openAi\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.httpRequest\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.slack\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.htmlExtract\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.scheduleTrigger\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T19:27:14.211Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\"}"
        },
        {
          "timestamp": "2025-08-11T19:27:14.396Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.407Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.408Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.413Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.453Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.515Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.526Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.618Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.659Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:14.731Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:21.895Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:21.895Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.httpRequest\",\"config\":{\"url\":\"={{ $json.competitor_url }}\",\"method\":\"GET\",\"authentication\":\"none\",\"options\":{\"timeout\":30000,\"headers\":{\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"},\"response\":{\"response\":{\"fullResponse\":false,\"responseFormat\":\"autodetect\"}}}}}"
        },
        {
          "timestamp": "2025-08-11T19:27:22.082Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:22.543Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:22.543Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.emailSend\",\"config\":{\"text\":\"{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}\",\"subject\":\"{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}\",\"toEmail\":\"{{ $json.recipientEmail || 'pricing-team@company.com' }}\",\"fromEmail\":\"{{ $json.senderEmail || 'pricing-alerts@company.com' }}\"}}"
        },
        {
          "timestamp": "2025-08-11T19:27:22.651Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:25.370Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:25.370Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.openAi\",\"config\":{\"modelId\":\"gpt-4\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info.\"},{\"role\":\"user\",\"content\":\"Analyze this competitor website data and extract pricing information:\\n\\n{{ $json.scraped_content }}\\n\\nCompetitor: {{ $json.competitor_name }}\\nProduct Category: {{ $json.product_category || 'general' }}\"}]},\"resource\":\"chat\",\"operation\":\"message\",\"options\":{\"temperature\":0.1,\"maxTokens\":1000}}}"
        },
        {
          "timestamp": "2025-08-11T19:27:25.488Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:31.033Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:31.034Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\",\"config\":{\"table\":\"competitive_pricing_data\",\"columns\":\"competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at\",\"operation\":\"insert\",\"returnFields\":\"*\"}}"
        },
        {
          "timestamp": "2025-08-11T19:27:31.556Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:31.557Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:31.557Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\",\"config\":{\"table\":\"competitive_pricing_data\",\"columns\":\"competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at\",\"operation\":\"insert\",\"returnFields\":\"*\",\"schema\":\"public\"}}"
        },
        {
          "timestamp": "2025-08-11T19:27:32.071Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:36.212Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:36.212Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.httpRequest\",\"config\":{\"url\":\"{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update\",\"method\":\"POST\",\"jsonBody\":\"{\\n  \\\"pricing_updates\\\": [\\n    {\\n      \\\"product_id\\\": \\\"{{ $json.product_id }}\\\",\\n      \\\"sku\\\": \\\"{{ $json.sku }}\\\",\\n      \\\"new_price\\\": {{ $json.adjusted_price }},\\n      \\\"competitor_price\\\": {{ $json.competitor_price }},\\n      \\\"profit_margin\\\": {{ $json.calculated_margin }},\\n      \\\"price_change_reason\\\": \\\"{{ $json.adjustment_reason }}\\\",\\n      \\\"effective_date\\\": \\\"{{ $json.effective_timestamp }}\\\",\\n      \\\"market_position\\\": \\\"{{ $json.competitive_position }}\\\"\\n    }\\n  ],\\n  \\\"batch_id\\\": \\\"{{ $json.batch_id }}\\\",\\n  \\\"updated_by\\\": \\\"competitive_pricing_system\\\",\\n  \\\"timestamp\\\": \\\"{{ $now }}\\\"\\n}\",\"sendBody\":true,\"contentType\":\"json\",\"specifyBody\":\"json\",\"authentication\":\"predefinedCredentialType\",\"nodeCredentialType\":\"httpHeaderAuth\",\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"},{\"name\":\"X-API-Version\",\"value\":\"v2\"}]},\"options\":{\"timeout\":30000,\"followRedirect\":true,\"followAllRedirects\":false,\"ignoreHttpStatusErrors\":false,\"proxy\":\"\",\"allowUnauthorizedCerts\":false}}}"
        },
        {
          "timestamp": "2025-08-11T19:27:36.364Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:41.772Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:41.772Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\",\"config\":{\"jsCode\":\"// Transform scraped competitor data for pricing analysis\\nconst results = [];\\n\\nfor (const item of items) {\\n  try {\\n    const competitorData = item.json;\\n    \\n    // Extract and standardize product information\\n    const productInfo = {\\n      // Product identification\\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\\n      productName: competitorData.name || competitorData.title,\\n      competitor: competitorData.source || competitorData.competitor,\\n      \\n      // Pricing data\\n      currentPrice: parseFloat(competitorData.price) || 0,\\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\\n      currency: competitorData.currency || 'USD',\\n      \\n      // Availability\\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\\n      \\n      // Metadata\\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\\n      url: competitorData.url || competitorData.productUrl,\\n      \\n      // Calculate discount percentage if applicable\\n      discountPercent: competitorData.originalPrice && competitorData.price ? \\n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\\n      \\n      // Pricing analysis flags\\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\\n      \\n      // Processing timestamp\\n      processedAt: new Date().toISOString()\\n    };\\n    \\n    // Add competitive analysis markers\\n    productInfo.competitiveMetrics = {\\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \\n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\\n      hasDiscount: productInfo.discountPercent > 0,\\n      significantDiscount: productInfo.discountPercent > 20\\n    };\\n    \\n    results.push({\\n      json: productInfo\\n    });\\n    \\n  } catch (error) {\\n    // Handle malformed data gracefully\\n    results.push({\\n      json: {\\n        error: `Failed to process item: ${error.message}`,\\n        originalData: item.json,\\n        processedAt: new Date().toISOString(),\\n        needsReview: true\\n      }\\n    });\\n  }\\n}\\n\\nreturn results;\",\"language\":\"javaScript\"}}"
        },
        {
          "timestamp": "2025-08-11T19:27:41.931Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:45.227Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:45.227Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.slack\",\"config\":{\"text\":\"{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\\\n\\\\n' + \\n'Product: ' + $json.productName + '\\\\n' +\\n'Competitor: ' + $json.competitor + '\\\\n' +\\n'Previous Price: $' + $json.previousPrice + '\\\\n' +\\n'New Price: $' + $json.newPrice + '\\\\n' +\\n'Drop: ' + $json.priceDropPercent + '%\\\\n' +\\n'Our Current Price: $' + $json.ourPrice + '\\\\n' +\\n'Recommended Action: ' + $json.recommendation :\\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\\\n\\\\n' +\\n'Date: ' + $json.reportDate + '\\\\n' +\\n'Products Monitored: ' + $json.productsMonitored + '\\\\n' +\\n'Price Changes Detected: ' + $json.priceChanges + '\\\\n' +\\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\\\n' +\\n'Average Margin: ' + $json.averageMargin + '%\\\\n' +\\n'Top Recommendations:\\\\n' + $json.recommendations :\\n'💰 *Pricing System Update*\\\\n\\\\n' + $json.message }}\",\"resource\":\"message\",\"operation\":\"post\",\"parameters\":{},\"channelId\":\"{{ $json.channel || '#pricing-alerts' }}\",\"select\":\"channel\"}}"
        },
        {
          "timestamp": "2025-08-11T19:27:46.089Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:46.089Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.htmlExtract\",\"config\":{\"sourceData\":\"json\",\"dataPropertyName\":\"html\",\"extractionValues\":{\"values\":[{\"key\":\"productName\",\"cssSelector\":\".product-title, h1.product-name, .item-title\",\"returnValue\":\"text\"},{\"key\":\"price\",\"cssSelector\":\".price, .current-price, .product-price, [data-price]\",\"returnValue\":\"text\"},{\"key\":\"originalPrice\",\"cssSelector\":\".original-price, .was-price, .list-price, .msrp\",\"returnValue\":\"text\"},{\"key\":\"availability\",\"cssSelector\":\".stock-status, .availability, .in-stock, .out-of-stock\",\"returnValue\":\"text\"},{\"key\":\"productId\",\"cssSelector\":\"[data-product-id], .product-id, .sku\",\"returnValue\":\"attribute\",\"attributeName\":\"data-product-id\"},{\"key\":\"productUrl\",\"cssSelector\":\"link[rel='canonical'], meta[property='og:url']\",\"returnValue\":\"attribute\",\"attributeName\":\"href\"}]}}}"
        },
        {
          "timestamp": "2025-08-11T19:27:46.155Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:46.254Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:47.913Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:47.913Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.scheduleTrigger\",\"config\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":1}]},\"notice\":\"\"}}"
        },
        {
          "timestamp": "2025-08-11T19:27:48.019Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:54.263Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T19:27:54.263Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\",\"config\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"leftValue\":\"={{ $json.profitMargin }}\",\"rightValue\":0.15,\"operator\":{\"type\":\"number\",\"operation\":\"gte\"}},{\"id\":\"2\",\"leftValue\":\"={{ $json.competitorPriceDifference }}\",\"rightValue\":-0.05,\"operator\":{\"type\":\"number\",\"operation\":\"gt\"}},{\"id\":\"3\",\"leftValue\":\"={{ $json.inventoryLevel }}\",\"rightValue\":10,\"operator\":{\"type\":\"number\",\"operation\":\"gt\"}}],\"combineOperation\":\"all\"}}}"
        },
        {
          "timestamp": "2025-08-11T19:27:54.510Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.httpRequest (Make a simple GET request to retrieve data from an API)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.emailSend (Send an email notification)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.openAi (Send a message to an AI model and get response)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.httpRequest (Send JSON data to an API endpoint)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.postgres (Insert data into PostgreSQL table)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.slack (Send a message to Slack channel)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.htmlExtract (Extract product prices and availability data from competitor website HTML)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.scheduleTrigger (Trigger the competitive pricing workflow every hour)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.815Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Route items based on pricing conditions and profit margin thresholds)"
        },
        {
          "timestamp": "2025-08-11T19:27:56.908Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T19:27:56.908Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_2",
          "type": "nodes-base.httpRequest",
          "purpose": "Make a simple GET request to retrieve data from an API",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 1000,
            "typeVersion": 4.2,
            "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
            "parameters": {
              "url": "={{ $json.competitor_url }}",
              "method": "GET",
              "authentication": "none",
              "options": {
                "timeout": 30000,
                "headers": {
                  "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                },
                "response": {
                  "response": {
                    "fullResponse": false,
                    "responseFormat": "autodetect"
                  }
                }
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_7",
          "type": "nodes-base.emailSend",
          "purpose": "Send an email notification",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 3000,
            "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
            "parameters": {
              "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
              "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
              "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
              "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_1",
          "type": "nodes-base.openAi",
          "purpose": "Send a message to an AI model and get response",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 5000,
            "parameters": {
              "modelId": "gpt-4",
              "messages": {
                "values": [
                  {
                    "role": "system",
                    "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                  },
                  {
                    "role": "user",
                    "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                  }
                ]
              },
              "resource": "chat",
              "operation": "message",
              "options": {
                "temperature": 0.1,
                "maxTokens": 1000
              }
            },
            "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system"
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_5",
          "type": "nodes-base.httpRequest",
          "purpose": "Send JSON data to an API endpoint",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 2000,
            "typeVersion": 4.2,
            "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
            "parameters": {
              "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
              "method": "POST",
              "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
              "sendBody": true,
              "contentType": "json",
              "specifyBody": "json",
              "authentication": "predefinedCredentialType",
              "nodeCredentialType": "httpHeaderAuth",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "X-API-Version",
                    "value": "v2"
                  }
                ]
              },
              "options": {
                "timeout": 30000,
                "followRedirect": true,
                "followAllRedirects": false,
                "ignoreHttpStatusErrors": false,
                "proxy": "",
                "allowUnauthorizedCerts": false
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_6",
          "type": "nodes-base.postgres",
          "purpose": "Insert data into PostgreSQL table",
          "configuration": {
            "onError": "stopWorkflow",
            "maxTries": 2,
            "retryOnFail": true,
            "waitBetweenTries": 1000,
            "typeVersion": 2.4,
            "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
            "parameters": {
              "table": "competitive_pricing_data",
              "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
              "operation": "insert",
              "returnFields": "*",
              "schema": "public"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript",
          "configuration": {
            "typeVersion": 2,
            "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
            "parameters": {
              "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
              "language": "javaScript"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.slack",
          "purpose": "Send a message to Slack channel",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 2,
            "retryOnFail": true,
            "waitBetweenTries": 2000,
            "typeVersion": 2.1,
            "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
            "parameters": {
              "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
              "resource": "message",
              "operation": "post",
              "parameters": {},
              "channelId": "{{ $json.channel || '#pricing-alerts' }}",
              "select": "channel"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.htmlExtract",
          "purpose": "Extract product prices and availability data from competitor website HTML",
          "configuration": {
            "typeVersion": "1",
            "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
            "parameters": {
              "sourceData": "json",
              "dataPropertyName": "html",
              "extractionValues": {
                "values": [
                  {
                    "key": "productName",
                    "cssSelector": ".product-title, h1.product-name, .item-title",
                    "returnValue": "text"
                  },
                  {
                    "key": "price",
                    "cssSelector": ".price, .current-price, .product-price, [data-price]",
                    "returnValue": "text"
                  },
                  {
                    "key": "originalPrice",
                    "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                    "returnValue": "text"
                  },
                  {
                    "key": "availability",
                    "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                    "returnValue": "text"
                  },
                  {
                    "key": "productId",
                    "cssSelector": "[data-product-id], .product-id, .sku",
                    "returnValue": "attribute",
                    "attributeName": "data-product-id"
                  },
                  {
                    "key": "productUrl",
                    "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                    "returnValue": "attribute",
                    "attributeName": "href"
                  }
                ]
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.scheduleTrigger",
          "purpose": "Trigger the competitive pricing workflow every hour",
          "configuration": {
            "typeVersion": "1.2",
            "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
            "parameters": {
              "rule": {
                "interval": [
                  {
                    "field": "hours",
                    "hoursInterval": 1
                  }
                ]
              },
              "notice": ""
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_3",
          "type": "nodes-base.if",
          "purpose": "Route items based on pricing conditions and profit margin thresholds",
          "configuration": {
            "typeVersion": "2.2",
            "notes": "Routes pricing decisions based on profit margins and competitive conditions",
            "parameters": {
              "conditions": {
                "conditions": [
                  {
                    "id": "1",
                    "leftValue": "={{ $json.profitMargin }}",
                    "rightValue": 0.15,
                    "operator": {
                      "type": "number",
                      "operation": "gte"
                    }
                  },
                  {
                    "id": "2",
                    "leftValue": "={{ $json.competitorPriceDifference }}",
                    "rightValue": -0.05,
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    }
                  },
                  {
                    "id": "3",
                    "leftValue": "={{ $json.inventoryLevel }}",
                    "rightValue": 10,
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    }
                  }
                ],
                "combineOperation": "all"
              }
            }
          },
          "validationStatus": "valid"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754940408149",
        "createdAt": "2025-08-11T19:26:48.709Z",
        "state": {
          "phase": "building",
          "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
          "discovered": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "authentication": "none",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Make a simple GET request to retrieve data from an API",
              "displayName": "get api data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "POST",
                "onError": "continueRegularOutput",
                "jsonBody": "",
                "maxTries": 2,
                "sendBody": true,
                "contentType": "json",
                "retryOnFail": true,
                "specifyBody": "json",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Send JSON data to an API endpoint",
              "displayName": "post json request",
              "isPreConfigured": true
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds"
            }
          ],
          "selected": [
            "task_node_2",
            "task_node_7",
            "task_node_1",
            "task_node_5",
            "task_node_6",
            "task_node_3",
            "task_node_4",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "authentication": "none",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Make a simple GET request to retrieve data from an API",
                "displayName": "get api data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_7",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_7",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "POST",
                  "onError": "continueRegularOutput",
                  "jsonBody": "",
                  "maxTries": 2,
                  "sendBody": true,
                  "contentType": "json",
                  "retryOnFail": true,
                  "specifyBody": "json",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Send JSON data to an API endpoint",
                "displayName": "post json request",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_6",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_6",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.htmlExtract",
                "purpose": "Extract product prices and availability data from competitor website HTML"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Trigger the competitive pricing workflow every hour"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Route items based on pricing conditions and profit margin thresholds"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T19:27:13.627Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:54.511Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "={{ $json.competitor_url }}",
                  "method": "GET",
                  "options": {
                    "headers": {
                      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                    },
                    "timeout": 30000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "autodetect"
                      }
                    }
                  },
                  "authentication": "none"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_2",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
              "timestamp": "2025-08-11T19:27:54.734Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:54.899Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                  "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                  "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                  "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_7",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for competitive pricing system notifications",
              "timestamp": "2025-08-11T19:27:54.899Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_7",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 1000,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                      },
                      {
                        "role": "user",
                        "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_1",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
              "timestamp": "2025-08-11T19:27:55.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.307Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                  "method": "POST",
                  "options": {
                    "proxy": "",
                    "timeout": 30000,
                    "followRedirect": true,
                    "followAllRedirects": false,
                    "allowUnauthorizedCerts": false,
                    "ignoreHttpStatusErrors": false
                  },
                  "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                  "sendBody": true,
                  "contentType": "json",
                  "sendHeaders": true,
                  "specifyBody": "json",
                  "authentication": "predefinedCredentialType",
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "X-API-Version",
                        "value": "v2"
                      }
                    ]
                  },
                  "nodeCredentialType": "httpHeaderAuth"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Send JSON data to an API endpoint",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
              "timestamp": "2025-08-11T19:27:55.307Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.467Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "competitive_pricing_data",
                  "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_6",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
              "timestamp": "2025-08-11T19:27:55.467Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_6",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.635Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                "parameters": {
                  "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
              "timestamp": "2025-08-11T19:27:55.635Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.826Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 2.1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
              "timestamp": "2025-08-11T19:27:55.826Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.060Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title, h1.product-name, .item-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price, .current-price, .product-price, [data-price]",
                        "returnValue": "text"
                      },
                      {
                        "key": "originalPrice",
                        "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                        "returnValue": "text"
                      },
                      {
                        "key": "productId",
                        "cssSelector": "[data-product-id], .product-id, .sku",
                        "returnValue": "attribute",
                        "attributeName": "data-product-id"
                      },
                      {
                        "key": "productUrl",
                        "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                        "returnValue": "attribute",
                        "attributeName": "href"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "nodeType": "nodes-base.htmlExtract",
              "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
              "timestamp": "2025-08-11T19:27:56.060Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.246Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
              "timestamp": "2025-08-11T19:27:56.246Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.435Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "number",
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 0.15
                      },
                      {
                        "id": "2",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.competitorPriceDifference }}",
                        "rightValue": -0.05
                      },
                      {
                        "id": "3",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.inventoryLevel }}",
                        "rightValue": 10
                      }
                    ],
                    "combineOperation": "all"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
              "timestamp": "2025-08-11T19:27:56.435Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.673Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:56.673Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "discoveredNodes": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "displayName": "get api data",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "isPreConfigured": true,
              "config": {
                "method": "GET",
                "url": "",
                "authentication": "none",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 1000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "displayName": "send email",
              "purpose": "Send an email notification",
              "isPreConfigured": true,
              "config": {
                "fromEmail": "",
                "toEmail": "",
                "subject": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 3000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "displayName": "post json request",
              "purpose": "Send JSON data to an API endpoint",
              "isPreConfigured": true,
              "config": {
                "method": "POST",
                "url": "",
                "sendBody": true,
                "contentType": "json",
                "specifyBody": "json",
                "jsonBody": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "displayName": "insert postgres data",
              "purpose": "Insert data into PostgreSQL table",
              "isPreConfigured": true,
              "config": {
                "operation": "insert",
                "table": "",
                "columns": "",
                "returnFields": "*",
                "onError": "stopWorkflow",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "displayName": "send slack message",
              "purpose": "Send a message to Slack channel",
              "isPreConfigured": true,
              "config": {
                "resource": "message",
                "operation": "post",
                "channel": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 2000,
                "parameters": {}
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "displayName": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "displayName": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "needsConfiguration": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "displayName": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "needsConfiguration": true
            }
          ]
        },
        "output": {
          "configuredNodes": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 1000,
                "typeVersion": 4.2,
                "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                "parameters": {
                  "url": "={{ $json.competitor_url }}",
                  "method": "GET",
                  "authentication": "none",
                  "options": {
                    "timeout": 30000,
                    "headers": {
                      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                    },
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "autodetect"
                      }
                    }
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "purpose": "Send an email notification",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000,
                "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                "parameters": {
                  "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                  "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                  "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                  "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "purpose": "Send a message to an AI model and get response",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000,
                "parameters": {
                  "modelId": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                      },
                      {
                        "role": "user",
                        "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 1000
                  }
                },
                "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system"
              },
              "validated": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "purpose": "Send JSON data to an API endpoint",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000,
                "typeVersion": 4.2,
                "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                "parameters": {
                  "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                  "method": "POST",
                  "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                  "sendBody": true,
                  "contentType": "json",
                  "specifyBody": "json",
                  "authentication": "predefinedCredentialType",
                  "nodeCredentialType": "httpHeaderAuth",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "X-API-Version",
                        "value": "v2"
                      }
                    ]
                  },
                  "options": {
                    "timeout": 30000,
                    "followRedirect": true,
                    "followAllRedirects": false,
                    "ignoreHttpStatusErrors": false,
                    "proxy": "",
                    "allowUnauthorizedCerts": false
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "purpose": "Insert data into PostgreSQL table",
              "config": {
                "onError": "stopWorkflow",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 1000,
                "typeVersion": 2.4,
                "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                "parameters": {
                  "table": "competitive_pricing_data",
                  "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                  "operation": "insert",
                  "returnFields": "*",
                  "schema": "public"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 2,
                "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                "parameters": {
                  "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "purpose": "Send a message to Slack channel",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 2000,
                "typeVersion": 2.1,
                "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                "parameters": {
                  "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                  "select": "channel"
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "config": {
                "typeVersion": "1",
                "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title, h1.product-name, .item-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price, .current-price, .product-price, [data-price]",
                        "returnValue": "text"
                      },
                      {
                        "key": "originalPrice",
                        "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                        "returnValue": "text"
                      },
                      {
                        "key": "productId",
                        "cssSelector": "[data-product-id], .product-id, .sku",
                        "returnValue": "attribute",
                        "attributeName": "data-product-id"
                      },
                      {
                        "key": "productUrl",
                        "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                        "returnValue": "attribute",
                        "attributeName": "href"
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "config": {
                "typeVersion": "1.2",
                "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  },
                  "notice": ""
                }
              },
              "validated": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "config": {
                "typeVersion": "2.2",
                "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 0.15,
                        "operator": {
                          "type": "number",
                          "operation": "gte"
                        }
                      },
                      {
                        "id": "2",
                        "leftValue": "={{ $json.competitorPriceDifference }}",
                        "rightValue": -0.05,
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        }
                      },
                      {
                        "id": "3",
                        "leftValue": "={{ $json.inventoryLevel }}",
                        "rightValue": 10,
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        }
                      }
                    ],
                    "combineOperation": "all"
                  }
                }
              },
              "validated": true
            }
          ]
        },
        "transformations": [
          "Parameter Configuration",
          "Validation",
          "Type Checking"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "configuration",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "building",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:54.511Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "={{ $json.competitor_url }}",
                      "method": "GET",
                      "options": {
                        "headers": {
                          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        },
                        "timeout": 30000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "autodetect"
                          }
                        }
                      },
                      "authentication": "none"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
                  "timestamp": "2025-08-11T19:27:54.734Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:54.899Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                      "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                      "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                      "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_7",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for competitive pricing system notifications",
                  "timestamp": "2025-08-11T19:27:54.899Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_7",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 1000,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                          },
                          {
                            "role": "user",
                            "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
                  "timestamp": "2025-08-11T19:27:55.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.307Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                      "method": "POST",
                      "options": {
                        "proxy": "",
                        "timeout": 30000,
                        "followRedirect": true,
                        "followAllRedirects": false,
                        "allowUnauthorizedCerts": false,
                        "ignoreHttpStatusErrors": false
                      },
                      "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                      "sendBody": true,
                      "contentType": "json",
                      "sendHeaders": true,
                      "specifyBody": "json",
                      "authentication": "predefinedCredentialType",
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "X-API-Version",
                            "value": "v2"
                          }
                        ]
                      },
                      "nodeCredentialType": "httpHeaderAuth"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Send JSON data to an API endpoint",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:55.307Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.467Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "competitive_pricing_data",
                      "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_6",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
                  "timestamp": "2025-08-11T19:27:55.467Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_6",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.635Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                    "parameters": {
                      "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
                  "timestamp": "2025-08-11T19:27:55.635Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.826Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
                  "timestamp": "2025-08-11T19:27:55.826Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.060Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title, h1.product-name, .item-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price, .current-price, .product-price, [data-price]",
                            "returnValue": "text"
                          },
                          {
                            "key": "originalPrice",
                            "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                            "returnValue": "text"
                          },
                          {
                            "key": "productId",
                            "cssSelector": "[data-product-id], .product-id, .sku",
                            "returnValue": "attribute",
                            "attributeName": "data-product-id"
                          },
                          {
                            "key": "productUrl",
                            "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                            "returnValue": "attribute",
                            "attributeName": "href"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Extract product prices and availability data from competitor website HTML",
                  "nodeType": "nodes-base.htmlExtract",
                  "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
                  "timestamp": "2025-08-11T19:27:56.060Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.246Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Trigger the competitive pricing workflow every hour",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:56.246Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.435Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "number",
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 0.15
                          },
                          {
                            "id": "2",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.competitorPriceDifference }}",
                            "rightValue": -0.05
                          },
                          {
                            "id": "3",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.inventoryLevel }}",
                            "rightValue": 10
                          }
                        ],
                        "combineOperation": "all"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
                  "timestamp": "2025-08-11T19:27:56.435Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:56.673Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "building": {
      "name": "Building",
      "success": true,
      "metrics": {
        "startTime": 1754940476909,
        "endTime": 1754940522977,
        "duration": 46068,
        "memoryUsage": {
          "heapUsed": 2861720,
          "heapTotal": 40910848,
          "external": 8002661
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T19:27:56.909Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting building phase"
        },
        {
          "timestamp": "2025-08-11T19:27:56.909Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for building phase"
        },
        {
          "timestamp": "2025-08-11T19:28:42.909Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.scheduleTrigger (Hourly Pricing Trigger)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.httpRequest (Scrape Competitor Website)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.htmlExtract (Extract Product Data)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.openAi (AI Price Analysis)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.code (Transform Pricing Data)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.if (Pricing Decision Router)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.httpRequest (Update Inventory Pricing)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.postgres (Store Pricing Data)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.slack (Send Pricing Alerts)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.emailSend (Email Daily Report)"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 10 nodes"
        },
        {
          "timestamp": "2025-08-11T19:28:42.910Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 9 connection groups"
        },
        {
          "timestamp": "2025-08-11T19:28:42.976Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T19:28:42.977Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "scheduleTrigger_1",
          "type": "n8n-nodes-base.scheduleTrigger",
          "purpose": "Hourly Pricing Trigger"
        },
        {
          "id": "httpRequest_1",
          "type": "n8n-nodes-base.httpRequest",
          "purpose": "Scrape Competitor Website"
        },
        {
          "id": "htmlExtract_1",
          "type": "n8n-nodes-base.htmlExtract",
          "purpose": "Extract Product Data"
        },
        {
          "id": "openAi_1",
          "type": "n8n-nodes-base.openAi",
          "purpose": "AI Price Analysis"
        },
        {
          "id": "code_1",
          "type": "n8n-nodes-base.code",
          "purpose": "Transform Pricing Data"
        },
        {
          "id": "if_1",
          "type": "n8n-nodes-base.if",
          "purpose": "Pricing Decision Router"
        },
        {
          "id": "httpRequest_2",
          "type": "n8n-nodes-base.httpRequest",
          "purpose": "Update Inventory Pricing"
        },
        {
          "id": "postgres_1",
          "type": "n8n-nodes-base.postgres",
          "purpose": "Store Pricing Data"
        },
        {
          "id": "slack_1",
          "type": "n8n-nodes-base.slack",
          "purpose": "Send Pricing Alerts"
        },
        {
          "id": "emailSend_1",
          "type": "n8n-nodes-base.emailSend",
          "purpose": "Email Daily Report"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754940408149",
        "createdAt": "2025-08-11T19:26:48.709Z",
        "state": {
          "phase": "validation",
          "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
          "discovered": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "authentication": "none",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Make a simple GET request to retrieve data from an API",
              "displayName": "get api data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "POST",
                "onError": "continueRegularOutput",
                "jsonBody": "",
                "maxTries": 2,
                "sendBody": true,
                "contentType": "json",
                "retryOnFail": true,
                "specifyBody": "json",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Send JSON data to an API endpoint",
              "displayName": "post json request",
              "isPreConfigured": true
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds"
            }
          ],
          "selected": [
            "task_node_2",
            "task_node_7",
            "task_node_1",
            "task_node_5",
            "task_node_6",
            "task_node_3",
            "task_node_4",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "name": "Hourly Pricing Trigger",
                "type": "n8n-nodes-base.scheduleTrigger",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "typeVersion": 1
              },
              {
                "id": "httpRequest_1",
                "name": "Scrape Competitor Website",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "typeVersion": 4
              },
              {
                "id": "htmlExtract_1",
                "name": "Extract Product Data",
                "type": "n8n-nodes-base.htmlExtract",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "typeVersion": 1
              },
              {
                "id": "openAi_1",
                "name": "AI Price Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "model": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "typeVersion": 1
              },
              {
                "id": "code_1",
                "name": "Transform Pricing Data",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "typeVersion": 2
              },
              {
                "id": "if_1",
                "name": "Pricing Decision Router",
                "type": "n8n-nodes-base.if",
                "onError": "continueRegularOutput",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "typeVersion": 2
              },
              {
                "id": "httpRequest_2",
                "name": "Update Inventory Pricing",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendBody": true,
                  "sendHeaders": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  },
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  }
                },
                "typeVersion": 4
              },
              {
                "id": "postgres_1",
                "name": "Store Pricing Data",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "table": "competitive_pricing",
                  "schema": "public",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "operation": "insert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "typeVersion": 2
              },
              {
                "id": "slack_1",
                "name": "Send Pricing Alerts",
                "type": "n8n-nodes-base.slack",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                  "channel": "#pricing-alerts",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "typeVersion": 2
              },
              {
                "id": "emailSend_1",
                "name": "Email Daily Report",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                  "options": {
                    "allowUnauthorizedCerts": false
                  },
                  "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                  "toEmail": "management@company.com",
                  "fromEmail": "pricing-system@company.com"
                },
                "typeVersion": 2
              }
            ],
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "scheduleTrigger_1"
              ],
              "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "httpRequest_1",
                "htmlExtract_1"
              ],
              "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1",
                "code_1"
              ],
              "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
            },
            {
              "type": "integration",
              "nodeIds": [
                "httpRequest_2"
              ],
              "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
            },
            {
              "type": "notification",
              "nodeIds": [
                "slack_1",
                "emailSend_1"
              ],
              "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1"
              ],
              "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "authentication": "none",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Make a simple GET request to retrieve data from an API",
                "displayName": "get api data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_7",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_7",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "POST",
                  "onError": "continueRegularOutput",
                  "jsonBody": "",
                  "maxTries": 2,
                  "sendBody": true,
                  "contentType": "json",
                  "retryOnFail": true,
                  "specifyBody": "json",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Send JSON data to an API endpoint",
                "displayName": "post json request",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_6",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_6",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.htmlExtract",
                "purpose": "Extract product prices and availability data from competitor website HTML"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Trigger the competitive pricing workflow every hour"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Route items based on pricing conditions and profit margin thresholds"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T19:27:13.627Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:54.511Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "={{ $json.competitor_url }}",
                  "method": "GET",
                  "options": {
                    "headers": {
                      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                    },
                    "timeout": 30000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "autodetect"
                      }
                    }
                  },
                  "authentication": "none"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_2",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
              "timestamp": "2025-08-11T19:27:54.734Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:54.899Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                  "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                  "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                  "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_7",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for competitive pricing system notifications",
              "timestamp": "2025-08-11T19:27:54.899Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_7",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 1000,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                      },
                      {
                        "role": "user",
                        "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_1",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
              "timestamp": "2025-08-11T19:27:55.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.307Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                  "method": "POST",
                  "options": {
                    "proxy": "",
                    "timeout": 30000,
                    "followRedirect": true,
                    "followAllRedirects": false,
                    "allowUnauthorizedCerts": false,
                    "ignoreHttpStatusErrors": false
                  },
                  "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                  "sendBody": true,
                  "contentType": "json",
                  "sendHeaders": true,
                  "specifyBody": "json",
                  "authentication": "predefinedCredentialType",
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "X-API-Version",
                        "value": "v2"
                      }
                    ]
                  },
                  "nodeCredentialType": "httpHeaderAuth"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Send JSON data to an API endpoint",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
              "timestamp": "2025-08-11T19:27:55.307Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.467Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "competitive_pricing_data",
                  "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_6",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
              "timestamp": "2025-08-11T19:27:55.467Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_6",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.635Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                "parameters": {
                  "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
              "timestamp": "2025-08-11T19:27:55.635Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.826Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 2.1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
              "timestamp": "2025-08-11T19:27:55.826Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.060Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title, h1.product-name, .item-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price, .current-price, .product-price, [data-price]",
                        "returnValue": "text"
                      },
                      {
                        "key": "originalPrice",
                        "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                        "returnValue": "text"
                      },
                      {
                        "key": "productId",
                        "cssSelector": "[data-product-id], .product-id, .sku",
                        "returnValue": "attribute",
                        "attributeName": "data-product-id"
                      },
                      {
                        "key": "productUrl",
                        "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                        "returnValue": "attribute",
                        "attributeName": "href"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "nodeType": "nodes-base.htmlExtract",
              "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
              "timestamp": "2025-08-11T19:27:56.060Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.246Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
              "timestamp": "2025-08-11T19:27:56.246Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.435Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "number",
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 0.15
                      },
                      {
                        "id": "2",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.competitorPriceDifference }}",
                        "rightValue": -0.05
                      },
                      {
                        "id": "3",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.inventoryLevel }}",
                        "rightValue": 10
                      }
                    ],
                    "combineOperation": "all"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
              "timestamp": "2025-08-11T19:27:56.435Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.673Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:56.673Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T19:28:42.329Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T19:28:42.643Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "configuredNodes": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 1000,
                "typeVersion": 4.2,
                "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                "parameters": {
                  "url": "={{ $json.competitor_url }}",
                  "method": "GET",
                  "authentication": "none",
                  "options": {
                    "timeout": 30000,
                    "headers": {
                      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                    },
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "autodetect"
                      }
                    }
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "purpose": "Send an email notification",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000,
                "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                "parameters": {
                  "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                  "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                  "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                  "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "purpose": "Send a message to an AI model and get response",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000,
                "parameters": {
                  "modelId": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                      },
                      {
                        "role": "user",
                        "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 1000
                  }
                },
                "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system"
              },
              "validated": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "purpose": "Send JSON data to an API endpoint",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000,
                "typeVersion": 4.2,
                "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                "parameters": {
                  "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                  "method": "POST",
                  "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                  "sendBody": true,
                  "contentType": "json",
                  "specifyBody": "json",
                  "authentication": "predefinedCredentialType",
                  "nodeCredentialType": "httpHeaderAuth",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "X-API-Version",
                        "value": "v2"
                      }
                    ]
                  },
                  "options": {
                    "timeout": 30000,
                    "followRedirect": true,
                    "followAllRedirects": false,
                    "ignoreHttpStatusErrors": false,
                    "proxy": "",
                    "allowUnauthorizedCerts": false
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "purpose": "Insert data into PostgreSQL table",
              "config": {
                "onError": "stopWorkflow",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 1000,
                "typeVersion": 2.4,
                "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                "parameters": {
                  "table": "competitive_pricing_data",
                  "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                  "operation": "insert",
                  "returnFields": "*",
                  "schema": "public"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 2,
                "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                "parameters": {
                  "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "purpose": "Send a message to Slack channel",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 2000,
                "typeVersion": 2.1,
                "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                "parameters": {
                  "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                  "select": "channel"
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "config": {
                "typeVersion": "1",
                "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title, h1.product-name, .item-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price, .current-price, .product-price, [data-price]",
                        "returnValue": "text"
                      },
                      {
                        "key": "originalPrice",
                        "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                        "returnValue": "text"
                      },
                      {
                        "key": "productId",
                        "cssSelector": "[data-product-id], .product-id, .sku",
                        "returnValue": "attribute",
                        "attributeName": "data-product-id"
                      },
                      {
                        "key": "productUrl",
                        "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                        "returnValue": "attribute",
                        "attributeName": "href"
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "config": {
                "typeVersion": "1.2",
                "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  },
                  "notice": ""
                }
              },
              "validated": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "config": {
                "typeVersion": "2.2",
                "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 0.15,
                        "operator": {
                          "type": "number",
                          "operation": "gte"
                        }
                      },
                      {
                        "id": "2",
                        "leftValue": "={{ $json.competitorPriceDifference }}",
                        "rightValue": -0.05,
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        }
                      },
                      {
                        "id": "3",
                        "leftValue": "={{ $json.inventoryLevel }}",
                        "rightValue": 10,
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        }
                      }
                    ],
                    "combineOperation": "all"
                  }
                }
              },
              "validated": true
            }
          ]
        },
        "output": {
          "workflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "name": "Hourly Pricing Trigger",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "name": "Scrape Competitor Website",
                "typeVersion": 4,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "htmlExtract_1",
                "type": "n8n-nodes-base.htmlExtract",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "name": "Extract Product Data",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "message",
                  "model": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                },
                "name": "AI Price Analysis",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "name": "Transform Pricing Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "name": "Pricing Decision Router",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "httpRequest_2",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  },
                  "sendBody": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  }
                },
                "name": "Update Inventory Pricing",
                "typeVersion": 4,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "competitive_pricing",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "name": "Store Pricing Data",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "channel": "#pricing-alerts",
                  "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "name": "Send Pricing Alerts",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 2
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "fromEmail": "pricing-system@company.com",
                  "toEmail": "management@company.com",
                  "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                  "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Email Daily Report",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "transformations": [
          "Workflow Generation",
          "Connection Building",
          "Settings Configuration"
        ]
      },
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "name": "Competitive Pricing System with AI Analysis",
              "settings": {
                "executionOrder": "v1",
                "saveManualExecutions": true,
                "saveDataErrorExecution": "all",
                "saveDataSuccessExecution": "all"
              },
              "connections": {
                "AI Price Analysis": {
                  "main": [
                    [
                      {
                        "node": "Transform Pricing Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Store Pricing Data": {
                  "main": [
                    [
                      {
                        "node": "Email Daily Report",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Send Pricing Alerts": {
                  "main": [
                    [
                      {
                        "node": "Store Pricing Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Extract Product Data": {
                  "main": [
                    [
                      {
                        "node": "AI Price Analysis",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Hourly Pricing Trigger": {
                  "main": [
                    [
                      {
                        "node": "Scrape Competitor Website",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Transform Pricing Data": {
                  "main": [
                    [
                      {
                        "node": "Pricing Decision Router",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Pricing Decision Router": {
                  "main": [
                    [
                      {
                        "node": "Update Inventory Pricing",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Send Pricing Alerts",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Update Inventory Pricing": {
                  "main": [
                    [
                      {
                        "node": "Store Pricing Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Scrape Competitor Website": {
                  "main": [
                    [
                      {
                        "node": "Extract Product Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "building",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:54.511Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "={{ $json.competitor_url }}",
                      "method": "GET",
                      "options": {
                        "headers": {
                          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        },
                        "timeout": 30000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "autodetect"
                          }
                        }
                      },
                      "authentication": "none"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
                  "timestamp": "2025-08-11T19:27:54.734Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:54.899Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                      "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                      "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                      "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_7",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for competitive pricing system notifications",
                  "timestamp": "2025-08-11T19:27:54.899Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_7",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 1000,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                          },
                          {
                            "role": "user",
                            "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
                  "timestamp": "2025-08-11T19:27:55.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.307Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                      "method": "POST",
                      "options": {
                        "proxy": "",
                        "timeout": 30000,
                        "followRedirect": true,
                        "followAllRedirects": false,
                        "allowUnauthorizedCerts": false,
                        "ignoreHttpStatusErrors": false
                      },
                      "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                      "sendBody": true,
                      "contentType": "json",
                      "sendHeaders": true,
                      "specifyBody": "json",
                      "authentication": "predefinedCredentialType",
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "X-API-Version",
                            "value": "v2"
                          }
                        ]
                      },
                      "nodeCredentialType": "httpHeaderAuth"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Send JSON data to an API endpoint",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:55.307Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.467Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "competitive_pricing_data",
                      "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_6",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
                  "timestamp": "2025-08-11T19:27:55.467Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_6",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.635Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                    "parameters": {
                      "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
                  "timestamp": "2025-08-11T19:27:55.635Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.826Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
                  "timestamp": "2025-08-11T19:27:55.826Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.060Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title, h1.product-name, .item-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price, .current-price, .product-price, [data-price]",
                            "returnValue": "text"
                          },
                          {
                            "key": "originalPrice",
                            "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                            "returnValue": "text"
                          },
                          {
                            "key": "productId",
                            "cssSelector": "[data-product-id], .product-id, .sku",
                            "returnValue": "attribute",
                            "attributeName": "data-product-id"
                          },
                          {
                            "key": "productUrl",
                            "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                            "returnValue": "attribute",
                            "attributeName": "href"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Extract product prices and availability data from competitor website HTML",
                  "nodeType": "nodes-base.htmlExtract",
                  "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
                  "timestamp": "2025-08-11T19:27:56.060Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.246Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Trigger the competitive pricing workflow every hour",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:56.246Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.435Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "number",
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 0.15
                          },
                          {
                            "id": "2",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.competitorPriceDifference }}",
                            "rightValue": -0.05
                          },
                          {
                            "id": "3",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.inventoryLevel }}",
                            "rightValue": 10
                          }
                        ],
                        "combineOperation": "all"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
                  "timestamp": "2025-08-11T19:27:56.435Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:56.673Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "validation",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:54.511Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "={{ $json.competitor_url }}",
                      "method": "GET",
                      "options": {
                        "headers": {
                          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        },
                        "timeout": 30000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "autodetect"
                          }
                        }
                      },
                      "authentication": "none"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
                  "timestamp": "2025-08-11T19:27:54.734Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:54.899Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                      "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                      "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                      "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_7",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for competitive pricing system notifications",
                  "timestamp": "2025-08-11T19:27:54.899Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_7",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 1000,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                          },
                          {
                            "role": "user",
                            "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
                  "timestamp": "2025-08-11T19:27:55.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.307Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                      "method": "POST",
                      "options": {
                        "proxy": "",
                        "timeout": 30000,
                        "followRedirect": true,
                        "followAllRedirects": false,
                        "allowUnauthorizedCerts": false,
                        "ignoreHttpStatusErrors": false
                      },
                      "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                      "sendBody": true,
                      "contentType": "json",
                      "sendHeaders": true,
                      "specifyBody": "json",
                      "authentication": "predefinedCredentialType",
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "X-API-Version",
                            "value": "v2"
                          }
                        ]
                      },
                      "nodeCredentialType": "httpHeaderAuth"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Send JSON data to an API endpoint",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:55.307Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.467Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "competitive_pricing_data",
                      "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_6",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
                  "timestamp": "2025-08-11T19:27:55.467Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_6",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.635Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                    "parameters": {
                      "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
                  "timestamp": "2025-08-11T19:27:55.635Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.826Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
                  "timestamp": "2025-08-11T19:27:55.826Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.060Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title, h1.product-name, .item-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price, .current-price, .product-price, [data-price]",
                            "returnValue": "text"
                          },
                          {
                            "key": "originalPrice",
                            "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                            "returnValue": "text"
                          },
                          {
                            "key": "productId",
                            "cssSelector": "[data-product-id], .product-id, .sku",
                            "returnValue": "attribute",
                            "attributeName": "data-product-id"
                          },
                          {
                            "key": "productUrl",
                            "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                            "returnValue": "attribute",
                            "attributeName": "href"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Extract product prices and availability data from competitor website HTML",
                  "nodeType": "nodes-base.htmlExtract",
                  "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
                  "timestamp": "2025-08-11T19:27:56.060Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.246Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Trigger the competitive pricing workflow every hour",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:56.246Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.435Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "number",
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 0.15
                          },
                          {
                            "id": "2",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.competitorPriceDifference }}",
                            "rightValue": -0.05
                          },
                          {
                            "id": "3",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.inventoryLevel }}",
                            "rightValue": 10
                          }
                        ],
                        "combineOperation": "all"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
                  "timestamp": "2025-08-11T19:27:56.435Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.329Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "httpRequest_1",
                        "htmlExtract_1"
                      ],
                      "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1",
                        "code_1"
                      ],
                      "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "httpRequest_2"
                      ],
                      "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "emailSend_1"
                      ],
                      "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                    }
                  ],
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.643Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "validation": {
      "name": "Validation",
      "success": true,
      "metrics": {
        "startTime": 1754940522977,
        "endTime": 1754940549691,
        "duration": 26714,
        "memoryUsage": {
          "heapUsed": 166664,
          "heapTotal": 38469632,
          "external": 8383722
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T19:28:42.977Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting validation phase"
        },
        {
          "timestamp": "2025-08-11T19:28:42.977Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for validation phase"
        },
        {
          "timestamp": "2025-08-11T19:28:42.979Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T19:28:42.979Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Competitive Pricing System with AI Analysis\",\"nodes\":[{\"id\":\"scheduleTrigger_1\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[250,300],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":1}]}},\"name\":\"Hourly Pricing Trigger\",\"typeVersion\":1,\"onError\":\"stopWorkflow\"},{\"id\":\"httpRequest_1\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[550,300],\"parameters\":{\"url\":\"https://competitor-website.com/products\",\"method\":\"GET\",\"options\":{\"timeout\":30000,\"redirect\":{\"redirect\":{}}}},\"name\":\"Scrape Competitor Website\",\"typeVersion\":4,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"htmlExtract_1\",\"type\":\"n8n-nodes-base.htmlExtract\",\"position\":[850,300],\"parameters\":{\"sourceData\":\"json\",\"dataPropertyName\":\"html\",\"extractionValues\":{\"values\":[{\"key\":\"productName\",\"cssSelector\":\".product-title\",\"returnValue\":\"text\"},{\"key\":\"price\",\"cssSelector\":\".price\",\"returnValue\":\"text\"},{\"key\":\"availability\",\"cssSelector\":\".stock-status\",\"returnValue\":\"text\"}]}},\"name\":\"Extract Product Data\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\"},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[1150,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"message\",\"model\":\"gpt-4\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details.\"},{\"role\":\"user\",\"content\":\"=Analyze this product data: {{ $json }}\"}]},\"options\":{\"temperature\":0.1,\"maxTokens\":500}},\"name\":\"AI Price Analysis\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[1450,300],\"parameters\":{\"mode\":\"runOnceForAllItems\",\"jsCode\":\"// Transform scraped competitor data into standardized format for pricing analysis\\nconst items = $input.all();\\nconst transformedData = [];\\n\\nfor (const item of items) {\\n  try {\\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\\n    \\n    // Calculate competitive pricing recommendations\\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\\n    \\n    transformedData.push({\\n      productName: aiResponse.productName,\\n      competitorPrice: competitorPrice,\\n      recommendedPrice: recommendedPrice,\\n      profitMargin: profitMargin,\\n      availability: aiResponse.availability,\\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\\n      timestamp: new Date().toISOString(),\\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\\n    });\\n  } catch (error) {\\n    console.error('Error processing item:', error);\\n  }\\n}\\n\\nreturn transformedData.map(data => ({ json: data }));\"},\"name\":\"Transform Pricing Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1750,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"operator\":{\"operation\":\"gte\"},\"leftValue\":\"={{ $json.profitMargin }}\",\"rightValue\":15}]}},\"name\":\"Pricing Decision Router\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"httpRequest_2\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2050,200],\"parameters\":{\"url\":\"https://api.inventory-system.com/pricing/update\",\"method\":\"POST\",\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"},{\"name\":\"Authorization\",\"value\":\"Bearer {{ $vars.INVENTORY_API_KEY }}\"}]},\"sendBody\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"productName\",\"value\":\"={{ $json.productName }}\"},{\"name\":\"newPrice\",\"value\":\"={{ $json.recommendedPrice }}\"},{\"name\":\"reason\",\"value\":\"competitive_adjustment\"}]}},\"name\":\"Update Inventory Pricing\",\"typeVersion\":4,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[2350,300],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"competitive_pricing\",\"columns\":\"product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert\",\"additionalFields\":{\"mode\":\"independently\"}},\"name\":\"Store Pricing Data\",\"typeVersion\":2,\"onError\":\"stopWorkflow\"},{\"id\":\"slack_1\",\"type\":\"n8n-nodes-base.slack\",\"position\":[2050,400],\"parameters\":{\"channel\":\"#pricing-alerts\",\"text\":\"🚨 *Pricing Alert*\\n\\nProduct: {{ $json.productName }}\\nCompetitor Price: ${{ $json.competitorPrice }}\\nProfit Margin: {{ $json.profitMargin }}%\\n\\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}\",\"otherOptions\":{\"includeLinkToWorkflow\":true}},\"name\":\"Send Pricing Alerts\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"maxTries\":2},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[2650,300],\"parameters\":{\"fromEmail\":\"pricing-system@company.com\",\"toEmail\":\"management@company.com\",\"subject\":\"Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}\",\"message\":\"Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: {{ $json.totalProducts }}\\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\\n- Alerts Generated: {{ $json.alertsCount }}\\n\\nRecommendations:\\n{{ $json.recommendations }}\\n\\nDetailed analysis available in the pricing dashboard.\",\"options\":{\"allowUnauthorizedCerts\":false}},\"name\":\"Email Daily Report\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Hourly Pricing Trigger\":{\"main\":[[{\"node\":\"Scrape Competitor Website\",\"type\":\"main\",\"index\":0}]]},\"Scrape Competitor Website\":{\"main\":[[{\"node\":\"Extract Product Data\",\"type\":\"main\",\"index\":0}]]},\"Extract Product Data\":{\"main\":[[{\"node\":\"AI Price Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Price Analysis\":{\"main\":[[{\"node\":\"Transform Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Pricing Data\":{\"main\":[[{\"node\":\"Pricing Decision Router\",\"type\":\"main\",\"index\":0}]]},\"Pricing Decision Router\":{\"main\":[[{\"node\":\"Update Inventory Pricing\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Send Pricing Alerts\",\"type\":\"main\",\"index\":0}]]},\"Update Inventory Pricing\":{\"main\":[[{\"node\":\"Store Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Send Pricing Alerts\":{\"main\":[[{\"node\":\"Store Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Store Pricing Data\":{\"main\":[[{\"node\":\"Email Daily Report\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T19:28:43.182Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:29:02.064Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T19:29:02.064Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Competitive Pricing System with AI Analysis\",\"nodes\":[{\"id\":\"scheduleTrigger_1\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[250,300],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":1}]}},\"name\":\"Hourly Pricing Trigger\",\"typeVersion\":1.2,\"onError\":\"stopWorkflow\"},{\"id\":\"httpRequest_1\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[550,300],\"parameters\":{\"url\":\"https://competitor-website.com/products\",\"method\":\"GET\",\"options\":{\"timeout\":30000,\"redirect\":{\"redirect\":{}}}},\"name\":\"Scrape Competitor Website\",\"typeVersion\":4.2,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"htmlExtract_1\",\"type\":\"n8n-nodes-base.htmlExtract\",\"position\":[850,300],\"parameters\":{\"sourceData\":\"json\",\"dataPropertyName\":\"html\",\"extractionValues\":{\"values\":[{\"key\":\"productName\",\"cssSelector\":\".product-title\",\"returnValue\":\"text\"},{\"key\":\"price\",\"cssSelector\":\".price\",\"returnValue\":\"text\"},{\"key\":\"availability\",\"cssSelector\":\".stock-status\",\"returnValue\":\"text\"}]}},\"name\":\"Extract Product Data\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\"},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[1150,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"complete\",\"model\":\"gpt-4\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details.\"},{\"role\":\"user\",\"content\":\"=Analyze this product data: {{ $json }}\"}]},\"options\":{\"temperature\":0.1,\"maxTokens\":500}},\"name\":\"AI Price Analysis\",\"typeVersion\":1.1,\"onError\":\"continueRegularOutput\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[1450,300],\"parameters\":{\"mode\":\"runOnceForAllItems\",\"jsCode\":\"// Transform scraped competitor data into standardized format for pricing analysis\\nconst items = $input.all();\\nconst transformedData = [];\\n\\nfor (const item of items) {\\n  try {\\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\\n    \\n    // Calculate competitive pricing recommendations\\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\\n    \\n    transformedData.push({\\n      productName: aiResponse.productName,\\n      competitorPrice: competitorPrice,\\n      recommendedPrice: recommendedPrice,\\n      profitMargin: profitMargin,\\n      availability: aiResponse.availability,\\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\\n      timestamp: new Date().toISOString(),\\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\\n    });\\n  } catch (error) {\\n    console.error('Error processing item:', error);\\n  }\\n}\\n\\nreturn transformedData.map(data => ({ json: data }));\"},\"name\":\"Transform Pricing Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1750,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"operator\":{\"operation\":\"gte\"},\"leftValue\":\"={{ $json.profitMargin }}\",\"rightValue\":15}]}},\"name\":\"Pricing Decision Router\",\"typeVersion\":2.2,\"onError\":\"continueRegularOutput\"},{\"id\":\"httpRequest_2\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2050,200],\"parameters\":{\"url\":\"https://api.inventory-system.com/pricing/update\",\"method\":\"POST\",\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"},{\"name\":\"Authorization\",\"value\":\"Bearer {{ $vars.INVENTORY_API_KEY }}\"}]},\"sendBody\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"productName\",\"value\":\"={{ $json.productName }}\"},{\"name\":\"newPrice\",\"value\":\"={{ $json.recommendedPrice }}\"},{\"name\":\"reason\",\"value\":\"competitive_adjustment\"}]}},\"name\":\"Update Inventory Pricing\",\"typeVersion\":4.2,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[2350,300],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"competitive_pricing\",\"columns\":\"product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert\",\"additionalFields\":{\"mode\":\"independently\"}},\"name\":\"Store Pricing Data\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\"},{\"id\":\"slack_1\",\"type\":\"n8n-nodes-base.slack\",\"position\":[2050,400],\"parameters\":{\"channel\":\"#pricing-alerts\",\"text\":\"{{ `🚨 *Pricing Alert*\\n\\nProduct: ${$json.productName}\\nCompetitor Price: $${$json.competitorPrice}\\nProfit Margin: ${$json.profitMargin}%\\n\\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}\",\"otherOptions\":{\"includeLinkToWorkflow\":true}},\"name\":\"Send Pricing Alerts\",\"typeVersion\":2.3,\"onError\":\"continueRegularOutput\",\"maxTries\":2},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[2650,300],\"parameters\":{\"fromEmail\":\"pricing-system@company.com\",\"toEmail\":\"management@company.com\",\"subject\":\"{{ `Daily Competitive Pricing Report - ${new Date().toLocaleDateString()}` }}\",\"message\":\"{{ `Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ${$json.totalProducts}\\n- Price Adjustments Made: ${$json.adjustmentsMade}\\n- Average Profit Margin: ${$json.avgProfitMargin}%\\n- Alerts Generated: ${$json.alertsCount}\\n\\nRecommendations:\\n${$json.recommendations}\\n\\nDetailed analysis available in the pricing dashboard.` }}\",\"options\":{\"allowUnauthorizedCerts\":false}},\"name\":\"Email Daily Report\",\"typeVersion\":2.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Hourly Pricing Trigger\":{\"main\":[[{\"node\":\"Scrape Competitor Website\",\"type\":\"main\",\"index\":0}]]},\"Scrape Competitor Website\":{\"main\":[[{\"node\":\"Extract Product Data\",\"type\":\"main\",\"index\":0}]]},\"Extract Product Data\":{\"main\":[[{\"node\":\"AI Price Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Price Analysis\":{\"main\":[[{\"node\":\"Transform Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Pricing Data\":{\"main\":[[{\"node\":\"Pricing Decision Router\",\"type\":\"main\",\"index\":0}]]},\"Pricing Decision Router\":{\"main\":[[{\"node\":\"Update Inventory Pricing\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Send Pricing Alerts\",\"type\":\"main\",\"index\":0}]]},\"Update Inventory Pricing\":{\"main\":[[{\"node\":\"Store Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Send Pricing Alerts\":{\"main\":[[{\"node\":\"Store Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Store Pricing Data\":{\"main\":[[{\"node\":\"Email Daily Report\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T19:29:02.289Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:29:08.093Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T19:29:08.093Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Competitive Pricing System with AI Analysis\",\"nodes\":[{\"id\":\"scheduleTrigger_1\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[250,300],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":1}]}},\"name\":\"Hourly Pricing Trigger\",\"typeVersion\":1.2,\"onError\":\"stopWorkflow\"},{\"id\":\"httpRequest_1\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[550,300],\"parameters\":{\"url\":\"https://competitor-website.com/products\",\"method\":\"GET\",\"options\":{\"timeout\":30000,\"redirect\":{\"redirect\":{}}}},\"name\":\"Scrape Competitor Website\",\"typeVersion\":4.2,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"htmlExtract_1\",\"type\":\"n8n-nodes-base.htmlExtract\",\"position\":[850,300],\"parameters\":{\"sourceData\":\"json\",\"dataPropertyName\":\"html\",\"extractionValues\":{\"values\":[{\"key\":\"productName\",\"cssSelector\":\".product-title\",\"returnValue\":\"text\"},{\"key\":\"price\",\"cssSelector\":\".price\",\"returnValue\":\"text\"},{\"key\":\"availability\",\"cssSelector\":\".stock-status\",\"returnValue\":\"text\"}]}},\"name\":\"Extract Product Data\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\"},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[1150,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"complete\",\"model\":\"gpt-4\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details.\"},{\"role\":\"user\",\"content\":\"=Analyze this product data: {{ $json }}\"}]},\"options\":{\"temperature\":0.1,\"maxTokens\":500}},\"name\":\"AI Price Analysis\",\"typeVersion\":1.1,\"onError\":\"continueRegularOutput\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[1450,300],\"parameters\":{\"mode\":\"runOnceForAllItems\",\"jsCode\":\"// Transform scraped competitor data into standardized format for pricing analysis\\nconst items = $input.all();\\nconst transformedData = [];\\n\\nfor (const item of items) {\\n  try {\\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\\n    \\n    // Calculate competitive pricing recommendations\\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\\n    \\n    transformedData.push({\\n      productName: aiResponse.productName,\\n      competitorPrice: competitorPrice,\\n      recommendedPrice: recommendedPrice,\\n      profitMargin: profitMargin,\\n      availability: aiResponse.availability,\\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\\n      timestamp: new Date().toISOString(),\\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\\n    });\\n  } catch (error) {\\n    console.error('Error processing item:', error);\\n  }\\n}\\n\\nreturn transformedData.map(data => ({ json: data }));\"},\"name\":\"Transform Pricing Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1750,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"operator\":{\"operation\":\"gte\"},\"leftValue\":\"={{ $json.profitMargin }}\",\"rightValue\":15}]}},\"name\":\"Pricing Decision Router\",\"typeVersion\":2.2,\"onError\":\"continueRegularOutput\"},{\"id\":\"httpRequest_2\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[2050,200],\"parameters\":{\"url\":\"https://api.inventory-system.com/pricing/update\",\"method\":\"POST\",\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"},{\"name\":\"Authorization\",\"value\":\"Bearer {{ $vars.INVENTORY_API_KEY }}\"}]},\"sendBody\":true,\"bodyParameters\":{\"parameters\":[{\"name\":\"productName\",\"value\":\"={{ $json.productName }}\"},{\"name\":\"newPrice\",\"value\":\"={{ $json.recommendedPrice }}\"},{\"name\":\"reason\",\"value\":\"competitive_adjustment\"}]}},\"name\":\"Update Inventory Pricing\",\"typeVersion\":4.2,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[2350,300],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"competitive_pricing\",\"columns\":\"product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert\",\"additionalFields\":{\"mode\":\"independently\"}},\"name\":\"Store Pricing Data\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\"},{\"id\":\"slack_1\",\"type\":\"n8n-nodes-base.slack\",\"position\":[2050,400],\"parameters\":{\"channel\":\"#pricing-alerts\",\"text\":\"{{ `🚨 *Pricing Alert*\\n\\nProduct: ${$json.productName}\\nCompetitor Price: $${$json.competitorPrice}\\nProfit Margin: ${$json.profitMargin}%\\n\\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}\",\"otherOptions\":{\"includeLinkToWorkflow\":true}},\"name\":\"Send Pricing Alerts\",\"typeVersion\":2.3,\"onError\":\"continueRegularOutput\",\"maxTries\":2},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[2650,300],\"parameters\":{\"fromEmail\":\"pricing-system@company.com\",\"toEmail\":\"management@company.com\",\"subject\":\"{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}\",\"message\":\"{{ 'Daily Competitive Pricing Analysis Report\\\\n\\\\nSummary:\\\\n- Products Analyzed: ' + $json.totalProducts + '\\\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\\\n- Alerts Generated: ' + $json.alertsCount + '\\\\n\\\\nRecommendations:\\\\n' + $json.recommendations + '\\\\n\\\\nDetailed analysis available in the pricing dashboard.' }}\",\"options\":{\"allowUnauthorizedCerts\":false}},\"name\":\"Email Daily Report\",\"typeVersion\":2.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Hourly Pricing Trigger\":{\"main\":[[{\"node\":\"Scrape Competitor Website\",\"type\":\"main\",\"index\":0}]]},\"Scrape Competitor Website\":{\"main\":[[{\"node\":\"Extract Product Data\",\"type\":\"main\",\"index\":0}]]},\"Extract Product Data\":{\"main\":[[{\"node\":\"AI Price Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Price Analysis\":{\"main\":[[{\"node\":\"Transform Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Pricing Data\":{\"main\":[[{\"node\":\"Pricing Decision Router\",\"type\":\"main\",\"index\":0}]]},\"Pricing Decision Router\":{\"main\":[[{\"node\":\"Update Inventory Pricing\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Send Pricing Alerts\",\"type\":\"main\",\"index\":0}]]},\"Update Inventory Pricing\":{\"main\":[[{\"node\":\"Store Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Send Pricing Alerts\":{\"main\":[[{\"node\":\"Store Pricing Data\",\"type\":\"main\",\"index\":0}]]},\"Store Pricing Data\":{\"main\":[[{\"node\":\"Email Daily Report\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T19:29:08.321Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T19:29:09.527Z",
          "level": "ERROR",
          "source": "Orchestrator",
          "message": "Error in validation: Error 1"
        },
        {
          "timestamp": "2025-08-11T19:29:09.527Z",
          "level": "ERROR",
          "source": "Orchestrator",
          "message": "Error in validation: Error 2"
        },
        {
          "timestamp": "2025-08-11T19:29:09.527Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Validation completed in 3 attempts"
        },
        {
          "timestamp": "2025-08-11T19:29:09.527Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Applied 2 fixes"
        },
        {
          "timestamp": "2025-08-11T19:29:09.690Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T19:29:09.691Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754940408149",
        "createdAt": "2025-08-11T19:26:48.709Z",
        "state": {
          "phase": "documentation",
          "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
          "discovered": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "authentication": "none",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Make a simple GET request to retrieve data from an API",
              "displayName": "get api data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "POST",
                "onError": "continueRegularOutput",
                "jsonBody": "",
                "maxTries": 2,
                "sendBody": true,
                "contentType": "json",
                "retryOnFail": true,
                "specifyBody": "json",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Send JSON data to an API endpoint",
              "displayName": "post json request",
              "isPreConfigured": true
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds"
            }
          ],
          "selected": [
            "task_node_2",
            "task_node_7",
            "task_node_1",
            "task_node_5",
            "task_node_6",
            "task_node_3",
            "task_node_4",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "name": "Hourly Pricing Trigger",
                "type": "n8n-nodes-base.scheduleTrigger",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "typeVersion": 1.2
              },
              {
                "id": "httpRequest_1",
                "name": "Scrape Competitor Website",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "typeVersion": 4.2
              },
              {
                "id": "htmlExtract_1",
                "name": "Extract Product Data",
                "type": "n8n-nodes-base.htmlExtract",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "typeVersion": 1
              },
              {
                "id": "openAi_1",
                "name": "AI Price Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "model": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "complete"
                },
                "typeVersion": 1.1
              },
              {
                "id": "code_1",
                "name": "Transform Pricing Data",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "typeVersion": 2
              },
              {
                "id": "if_1",
                "name": "Pricing Decision Router",
                "type": "n8n-nodes-base.if",
                "onError": "continueRegularOutput",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "httpRequest_2",
                "name": "Update Inventory Pricing",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendBody": true,
                  "sendHeaders": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  },
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  }
                },
                "typeVersion": 4.2
              },
              {
                "id": "postgres_1",
                "name": "Store Pricing Data",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "table": "competitive_pricing",
                  "schema": "public",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "operation": "insert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "typeVersion": 2.6
              },
              {
                "id": "slack_1",
                "name": "Send Pricing Alerts",
                "type": "n8n-nodes-base.slack",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                  "channel": "#pricing-alerts",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "typeVersion": 2.3
              },
              {
                "id": "emailSend_1",
                "name": "Email Daily Report",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  },
                  "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                  "toEmail": "management@company.com",
                  "fromEmail": "pricing-system@company.com"
                },
                "typeVersion": 2.1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "scheduleTrigger_1"
              ],
              "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "httpRequest_1",
                "htmlExtract_1"
              ],
              "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1",
                "code_1"
              ],
              "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
            },
            {
              "type": "integration",
              "nodeIds": [
                "httpRequest_2"
              ],
              "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
            },
            {
              "type": "notification",
              "nodeIds": [
                "slack_1",
                "emailSend_1"
              ],
              "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1"
              ],
              "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "authentication": "none",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Make a simple GET request to retrieve data from an API",
                "displayName": "get api data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_7",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_7",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "POST",
                  "onError": "continueRegularOutput",
                  "jsonBody": "",
                  "maxTries": 2,
                  "sendBody": true,
                  "contentType": "json",
                  "retryOnFail": true,
                  "specifyBody": "json",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Send JSON data to an API endpoint",
                "displayName": "post json request",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_6",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_6",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.htmlExtract",
                "purpose": "Extract product prices and availability data from competitor website HTML"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Trigger the competitive pricing workflow every hour"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Route items based on pricing conditions and profit margin thresholds"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T19:27:13.627Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:54.511Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "={{ $json.competitor_url }}",
                  "method": "GET",
                  "options": {
                    "headers": {
                      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                    },
                    "timeout": 30000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "autodetect"
                      }
                    }
                  },
                  "authentication": "none"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_2",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
              "timestamp": "2025-08-11T19:27:54.734Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:54.899Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                  "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                  "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                  "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_7",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for competitive pricing system notifications",
              "timestamp": "2025-08-11T19:27:54.899Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_7",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 1000,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                      },
                      {
                        "role": "user",
                        "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_1",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
              "timestamp": "2025-08-11T19:27:55.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.307Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                  "method": "POST",
                  "options": {
                    "proxy": "",
                    "timeout": 30000,
                    "followRedirect": true,
                    "followAllRedirects": false,
                    "allowUnauthorizedCerts": false,
                    "ignoreHttpStatusErrors": false
                  },
                  "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                  "sendBody": true,
                  "contentType": "json",
                  "sendHeaders": true,
                  "specifyBody": "json",
                  "authentication": "predefinedCredentialType",
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "X-API-Version",
                        "value": "v2"
                      }
                    ]
                  },
                  "nodeCredentialType": "httpHeaderAuth"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Send JSON data to an API endpoint",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
              "timestamp": "2025-08-11T19:27:55.307Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.467Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "competitive_pricing_data",
                  "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_6",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
              "timestamp": "2025-08-11T19:27:55.467Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_6",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.635Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                "parameters": {
                  "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
              "timestamp": "2025-08-11T19:27:55.635Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.826Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 2.1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
              "timestamp": "2025-08-11T19:27:55.826Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.060Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title, h1.product-name, .item-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price, .current-price, .product-price, [data-price]",
                        "returnValue": "text"
                      },
                      {
                        "key": "originalPrice",
                        "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                        "returnValue": "text"
                      },
                      {
                        "key": "productId",
                        "cssSelector": "[data-product-id], .product-id, .sku",
                        "returnValue": "attribute",
                        "attributeName": "data-product-id"
                      },
                      {
                        "key": "productUrl",
                        "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                        "returnValue": "attribute",
                        "attributeName": "href"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "nodeType": "nodes-base.htmlExtract",
              "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
              "timestamp": "2025-08-11T19:27:56.060Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.246Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
              "timestamp": "2025-08-11T19:27:56.246Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.435Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "number",
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 0.15
                      },
                      {
                        "id": "2",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.competitorPriceDifference }}",
                        "rightValue": -0.05
                      },
                      {
                        "id": "3",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.inventoryLevel }}",
                        "rightValue": 10
                      }
                    ],
                    "combineOperation": "all"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
              "timestamp": "2025-08-11T19:27:56.435Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.673Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:56.673Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T19:28:42.329Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T19:29:08.321Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_2",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 2,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "htmlExtract_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.960Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2.3
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T19:29:08.960Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T19:29:09.269Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "workflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "name": "Hourly Pricing Trigger",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "name": "Scrape Competitor Website",
                "typeVersion": 4,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "htmlExtract_1",
                "type": "n8n-nodes-base.htmlExtract",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "name": "Extract Product Data",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "message",
                  "model": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                },
                "name": "AI Price Analysis",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "name": "Transform Pricing Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "name": "Pricing Decision Router",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "httpRequest_2",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  },
                  "sendBody": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  }
                },
                "name": "Update Inventory Pricing",
                "typeVersion": 4,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "competitive_pricing",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "name": "Store Pricing Data",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "channel": "#pricing-alerts",
                  "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "name": "Send Pricing Alerts",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 2
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "fromEmail": "pricing-system@company.com",
                  "toEmail": "management@company.com",
                  "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                  "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Email Daily Report",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "output": {
          "validatedWorkflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "name": "Hourly Pricing Trigger",
                "typeVersion": 1.2,
                "onError": "stopWorkflow"
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "name": "Scrape Competitor Website",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "htmlExtract_1",
                "type": "n8n-nodes-base.htmlExtract",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "name": "Extract Product Data",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                },
                "name": "AI Price Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "name": "Transform Pricing Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "name": "Pricing Decision Router",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "httpRequest_2",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  },
                  "sendBody": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  }
                },
                "name": "Update Inventory Pricing",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "competitive_pricing",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "name": "Store Pricing Data",
                "typeVersion": 2.6,
                "onError": "stopWorkflow"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "channel": "#pricing-alerts",
                  "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "name": "Send Pricing Alerts",
                "typeVersion": 2.3,
                "onError": "continueRegularOutput",
                "maxTries": 2
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "fromEmail": "pricing-system@company.com",
                  "toEmail": "management@company.com",
                  "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                  "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Email Daily Report",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "report": {
            "initial": {
              "workflow": {
                "errors": [
                  {
                    "node": "AI Price Analysis",
                    "message": {
                      "type": "invalid_value",
                      "property": "operation",
                      "message": "Invalid value for 'operation'. Must be one of: complete",
                      "fix": "Change operation to one of the valid options"
                    }
                  },
                  {
                    "node": "workflow",
                    "message": "Workflow validation failed: e.message.includes is not a function"
                  },
                  {
                    "node": "Hourly Pricing Trigger",
                    "message": "Outdated typeVersion: 1. Latest is 1.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Scrape Competitor Website",
                    "message": "Outdated typeVersion: 4. Latest is 4.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "AI Price Analysis",
                    "message": "Outdated typeVersion: 1. Latest is 1.1",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Pricing Decision Router",
                    "message": "Outdated typeVersion: 2. Latest is 2.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Update Inventory Pricing",
                    "message": "Outdated typeVersion: 4. Latest is 4.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Store Pricing Data",
                    "message": "Outdated typeVersion: 2. Latest is 2.6",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Send Pricing Alerts",
                    "message": "Outdated typeVersion: 2. Latest is 2.3",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Email Daily Report",
                    "message": "Outdated typeVersion: 2. Latest is 2.1",
                    "type": "typeVersion",
                    "severity": "error"
                  }
                ],
                "warnings": [
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  }
                ],
                "valid": false,
                "statistics": {
                  "totalNodes": 10,
                  "enabledNodes": 10,
                  "triggerNodes": 1,
                  "validConnections": 10,
                  "invalidConnections": 0,
                  "expressionsValidated": 5,
                  "errorCount": 2,
                  "warningCount": 9
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "fixesApplied": [
              {
                "type": "entity-replacement",
                "attempt": 1,
                "timestamp": "2025-08-11T19:29:02.064Z",
                "description": "Replaced 8 nodes",
                "reasoning": [
                  "Fixed AI Price Analysis node: Changed operation from 'message' to 'complete' (the only valid operation) and updated typeVersion from 1 to 1.1",
                  "Updated all node typeVersions to their latest versions: Hourly Pricing Trigger (1→1.2), Scrape Competitor Website (4→4.2), Pricing Decision Router (2→2.2), Update Inventory Pricing (4→4.2), Store Pricing Data (2→2.6), Send Pricing Alerts (2→2.3), Email Daily Report (2→2.1)",
                  "Fixed nested expression syntax in Send Pricing Alerts: Converted multiple {{ }} expressions to single template literal format using backticks and ${} interpolation",
                  "Fixed nested expression syntax in Email Daily Report: Converted both subject and message fields from multiple {{ }} expressions to single template literal format"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "openAi_1",
                    "scheduleTrigger_1",
                    "httpRequest_1",
                    "if_1",
                    "httpRequest_2",
                    "postgres_1",
                    "slack_1",
                    "emailSend_1"
                  ],
                  "connections": false
                }
              },
              {
                "type": "entity-replacement",
                "attempt": 2,
                "timestamp": "2025-08-11T19:29:08.093Z",
                "description": "Replaced 1 nodes",
                "reasoning": [
                  "Converted template literal syntax in subject field from `${new Date().toLocaleDateString()}` to string concatenation using + operator",
                  "Converted template literal syntax in message field from template literals with ${} to string concatenation, replacing all ${variable} with ' + variable + ' format",
                  "Maintained all original functionality while using n8n-compatible expression syntax"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "emailSend_1"
                  ],
                  "connections": false
                }
              }
            ],
            "final": {
              "workflow": {
                "errors": [],
                "warnings": [
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  }
                ],
                "valid": true,
                "statistics": {
                  "totalNodes": 10,
                  "enabledNodes": 10,
                  "triggerNodes": 1,
                  "validConnections": 10,
                  "invalidConnections": 0,
                  "expressionsValidated": 4,
                  "errorCount": 0,
                  "warningCount": 1
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "attempts": 3
          }
        },
        "transformations": [
          "Validation Check",
          "Error Detection",
          "Automatic Fixes"
        ]
      },
      "errors": [
        {
          "type": "ValidationError",
          "message": "Error 1",
          "resolution": "Applied automatic fix",
          "attemptNumber": 1
        },
        {
          "type": "ValidationError",
          "message": "Error 2",
          "resolution": "Applied automatic fix",
          "attemptNumber": 2
        }
      ],
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "valid": true
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "validation",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:54.511Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "={{ $json.competitor_url }}",
                      "method": "GET",
                      "options": {
                        "headers": {
                          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        },
                        "timeout": 30000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "autodetect"
                          }
                        }
                      },
                      "authentication": "none"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
                  "timestamp": "2025-08-11T19:27:54.734Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:54.899Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                      "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                      "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                      "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_7",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for competitive pricing system notifications",
                  "timestamp": "2025-08-11T19:27:54.899Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_7",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 1000,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                          },
                          {
                            "role": "user",
                            "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
                  "timestamp": "2025-08-11T19:27:55.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.307Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                      "method": "POST",
                      "options": {
                        "proxy": "",
                        "timeout": 30000,
                        "followRedirect": true,
                        "followAllRedirects": false,
                        "allowUnauthorizedCerts": false,
                        "ignoreHttpStatusErrors": false
                      },
                      "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                      "sendBody": true,
                      "contentType": "json",
                      "sendHeaders": true,
                      "specifyBody": "json",
                      "authentication": "predefinedCredentialType",
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "X-API-Version",
                            "value": "v2"
                          }
                        ]
                      },
                      "nodeCredentialType": "httpHeaderAuth"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Send JSON data to an API endpoint",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:55.307Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.467Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "competitive_pricing_data",
                      "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_6",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
                  "timestamp": "2025-08-11T19:27:55.467Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_6",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.635Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                    "parameters": {
                      "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
                  "timestamp": "2025-08-11T19:27:55.635Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.826Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
                  "timestamp": "2025-08-11T19:27:55.826Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.060Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title, h1.product-name, .item-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price, .current-price, .product-price, [data-price]",
                            "returnValue": "text"
                          },
                          {
                            "key": "originalPrice",
                            "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                            "returnValue": "text"
                          },
                          {
                            "key": "productId",
                            "cssSelector": "[data-product-id], .product-id, .sku",
                            "returnValue": "attribute",
                            "attributeName": "data-product-id"
                          },
                          {
                            "key": "productUrl",
                            "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                            "returnValue": "attribute",
                            "attributeName": "href"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Extract product prices and availability data from competitor website HTML",
                  "nodeType": "nodes-base.htmlExtract",
                  "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
                  "timestamp": "2025-08-11T19:27:56.060Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.246Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Trigger the competitive pricing workflow every hour",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:56.246Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.435Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "number",
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 0.15
                          },
                          {
                            "id": "2",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.competitorPriceDifference }}",
                            "rightValue": -0.05
                          },
                          {
                            "id": "3",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.inventoryLevel }}",
                            "rightValue": 10
                          }
                        ],
                        "combineOperation": "all"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
                  "timestamp": "2025-08-11T19:27:56.435Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.329Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "httpRequest_1",
                        "htmlExtract_1"
                      ],
                      "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1",
                        "code_1"
                      ],
                      "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "httpRequest_2"
                      ],
                      "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "emailSend_1"
                      ],
                      "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                    }
                  ],
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.643Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "documentation",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2.3
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:54.511Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "={{ $json.competitor_url }}",
                      "method": "GET",
                      "options": {
                        "headers": {
                          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        },
                        "timeout": 30000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "autodetect"
                          }
                        }
                      },
                      "authentication": "none"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
                  "timestamp": "2025-08-11T19:27:54.734Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:54.899Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                      "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                      "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                      "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_7",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for competitive pricing system notifications",
                  "timestamp": "2025-08-11T19:27:54.899Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_7",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 1000,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                          },
                          {
                            "role": "user",
                            "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
                  "timestamp": "2025-08-11T19:27:55.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.307Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                      "method": "POST",
                      "options": {
                        "proxy": "",
                        "timeout": 30000,
                        "followRedirect": true,
                        "followAllRedirects": false,
                        "allowUnauthorizedCerts": false,
                        "ignoreHttpStatusErrors": false
                      },
                      "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                      "sendBody": true,
                      "contentType": "json",
                      "sendHeaders": true,
                      "specifyBody": "json",
                      "authentication": "predefinedCredentialType",
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "X-API-Version",
                            "value": "v2"
                          }
                        ]
                      },
                      "nodeCredentialType": "httpHeaderAuth"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Send JSON data to an API endpoint",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:55.307Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.467Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "competitive_pricing_data",
                      "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_6",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
                  "timestamp": "2025-08-11T19:27:55.467Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_6",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.635Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                    "parameters": {
                      "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
                  "timestamp": "2025-08-11T19:27:55.635Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.826Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
                  "timestamp": "2025-08-11T19:27:55.826Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.060Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title, h1.product-name, .item-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price, .current-price, .product-price, [data-price]",
                            "returnValue": "text"
                          },
                          {
                            "key": "originalPrice",
                            "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                            "returnValue": "text"
                          },
                          {
                            "key": "productId",
                            "cssSelector": "[data-product-id], .product-id, .sku",
                            "returnValue": "attribute",
                            "attributeName": "data-product-id"
                          },
                          {
                            "key": "productUrl",
                            "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                            "returnValue": "attribute",
                            "attributeName": "href"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Extract product prices and availability data from competitor website HTML",
                  "nodeType": "nodes-base.htmlExtract",
                  "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
                  "timestamp": "2025-08-11T19:27:56.060Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.246Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Trigger the competitive pricing workflow every hour",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:56.246Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.435Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "number",
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 0.15
                          },
                          {
                            "id": "2",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.competitorPriceDifference }}",
                            "rightValue": -0.05
                          },
                          {
                            "id": "3",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.inventoryLevel }}",
                            "rightValue": 10
                          }
                        ],
                        "combineOperation": "all"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
                  "timestamp": "2025-08-11T19:27:56.435Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.329Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "httpRequest_1",
                        "htmlExtract_1"
                      ],
                      "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1",
                        "code_1"
                      ],
                      "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "httpRequest_2"
                      ],
                      "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "emailSend_1"
                      ],
                      "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                    }
                  ],
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T19:29:08.321Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "htmlExtract_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.960Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2.3
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:29:08.960Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T19:29:09.269Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "documentation": {
      "name": "Documentation",
      "success": true,
      "metrics": {
        "startTime": 1754940549691,
        "endTime": 1754940550384,
        "duration": 693,
        "memoryUsage": {
          "heapUsed": -3666752,
          "heapTotal": 38191104,
          "external": 7489880
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T19:29:09.691Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting documentation phase"
        },
        {
          "timestamp": "2025-08-11T19:29:09.691Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for documentation phase"
        },
        {
          "timestamp": "2025-08-11T19:29:10.296Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Added 7 sticky notes for documentation"
        },
        {
          "timestamp": "2025-08-11T19:29:10.383Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T19:29:10.384Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754940408149",
        "createdAt": "2025-08-11T19:26:48.709Z",
        "state": {
          "phase": "complete",
          "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
          "discovered": [
            {
              "id": "task_node_2",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "authentication": "none",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Make a simple GET request to retrieve data from an API",
              "displayName": "get api data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_7",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "POST",
                "onError": "continueRegularOutput",
                "jsonBody": "",
                "maxTries": 2,
                "sendBody": true,
                "contentType": "json",
                "retryOnFail": true,
                "specifyBody": "json",
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "purpose": "Send JSON data to an API endpoint",
              "displayName": "post json request",
              "isPreConfigured": true
            },
            {
              "id": "task_node_6",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.htmlExtract",
              "purpose": "Extract product prices and availability data from competitor website HTML"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Trigger the competitive pricing workflow every hour"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Route items based on pricing conditions and profit margin thresholds"
            }
          ],
          "selected": [
            "task_node_2",
            "task_node_7",
            "task_node_1",
            "task_node_5",
            "task_node_6",
            "task_node_3",
            "task_node_4",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "name": "Hourly Pricing Trigger",
                "type": "n8n-nodes-base.scheduleTrigger",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "typeVersion": 1.2
              },
              {
                "id": "httpRequest_1",
                "name": "Scrape Competitor Website",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "typeVersion": 4.2
              },
              {
                "id": "htmlExtract_1",
                "name": "Extract Product Data",
                "type": "n8n-nodes-base.htmlExtract",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "typeVersion": 1
              },
              {
                "id": "openAi_1",
                "name": "AI Price Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "model": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "complete"
                },
                "typeVersion": 1.1
              },
              {
                "id": "code_1",
                "name": "Transform Pricing Data",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "typeVersion": 2
              },
              {
                "id": "if_1",
                "name": "Pricing Decision Router",
                "type": "n8n-nodes-base.if",
                "onError": "continueRegularOutput",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "httpRequest_2",
                "name": "Update Inventory Pricing",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendBody": true,
                  "sendHeaders": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  },
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  }
                },
                "typeVersion": 4.2
              },
              {
                "id": "postgres_1",
                "name": "Store Pricing Data",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "table": "competitive_pricing",
                  "schema": "public",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "operation": "insert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "typeVersion": 2.6
              },
              {
                "id": "slack_1",
                "name": "Send Pricing Alerts",
                "type": "n8n-nodes-base.slack",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                  "channel": "#pricing-alerts",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "typeVersion": 2.3
              },
              {
                "id": "emailSend_1",
                "name": "Email Daily Report",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  },
                  "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                  "toEmail": "management@company.com",
                  "fromEmail": "pricing-system@company.com"
                },
                "typeVersion": 2.1
              },
              {
                "id": "sticky_triggers_1754940549820",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  480,
                  -130
                ],
                "parameters": {
                  "color": 6,
                  "width": 310,
                  "height": 610,
                  "content": "## 📥 Triggers\nInitiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_inputs_1754940549820",
                "name": "Inputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  890,
                  -130
                ],
                "parameters": {
                  "color": 5,
                  "width": 610,
                  "height": 610,
                  "content": "## 📊 Inputs\nScrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_transforms_1754940549820",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1600,
                  -130
                ],
                "parameters": {
                  "color": 4,
                  "width": 610,
                  "height": 610,
                  "content": "## ⚙️ Transform\nUses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_decision_1754940549820",
                "name": "Decision Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  2310,
                  -130
                ],
                "parameters": {
                  "color": 3,
                  "width": 310,
                  "height": 610,
                  "content": "## 🔀 Decision\nRoutes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_integration_1754940549820",
                "name": "Integration Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  2720,
                  -130
                ],
                "parameters": {
                  "color": 6,
                  "width": 310,
                  "height": 610,
                  "content": "## 🔗 Integration\nUpdates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_outputs_1754940549820",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  3130,
                  -130
                ],
                "parameters": {
                  "color": 7,
                  "width": 910,
                  "height": 610,
                  "content": "## 🚀 Outputs\nSends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_promo_1754940549820",
                "name": "Ghost Team Promo",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  100,
                  -130
                ],
                "parameters": {
                  "color": 4,
                  "width": 280,
                  "height": 610,
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                },
                "typeVersion": 1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "scheduleTrigger_1"
              ],
              "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "httpRequest_1",
                "htmlExtract_1"
              ],
              "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1",
                "code_1"
              ],
              "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
            },
            {
              "type": "integration",
              "nodeIds": [
                "httpRequest_2"
              ],
              "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
            },
            {
              "type": "notification",
              "nodeIds": [
                "slack_1",
                "emailSend_1"
              ],
              "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1"
              ],
              "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "authentication": "none",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Make a simple GET request to retrieve data from an API",
                "displayName": "get api data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_7",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_7",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "POST",
                  "onError": "continueRegularOutput",
                  "jsonBody": "",
                  "maxTries": 2,
                  "sendBody": true,
                  "contentType": "json",
                  "retryOnFail": true,
                  "specifyBody": "json",
                  "alwaysOutputData": true,
                  "waitBetweenTries": 1000
                },
                "purpose": "Send JSON data to an API endpoint",
                "displayName": "post json request",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_6",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_6",
              "timestamp": "2025-08-11T19:27:13.105Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.htmlExtract",
                "purpose": "Extract product prices and availability data from competitor website HTML"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Trigger the competitive pricing workflow every hour"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Route items based on pricing conditions and profit margin thresholds"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T19:27:13.368Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T19:27:13.627Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:54.511Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "={{ $json.competitor_url }}",
                  "method": "GET",
                  "options": {
                    "headers": {
                      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                    },
                    "timeout": 30000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "autodetect"
                      }
                    }
                  },
                  "authentication": "none"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_2",
              "purpose": "Make a simple GET request to retrieve data from an API",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
              "timestamp": "2025-08-11T19:27:54.734Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:54.899Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                  "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                  "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                  "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_7",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for competitive pricing system notifications",
              "timestamp": "2025-08-11T19:27:54.899Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_7",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 1000,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                      },
                      {
                        "role": "user",
                        "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_1",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
              "timestamp": "2025-08-11T19:27:55.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.307Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                  "method": "POST",
                  "options": {
                    "proxy": "",
                    "timeout": 30000,
                    "followRedirect": true,
                    "followAllRedirects": false,
                    "allowUnauthorizedCerts": false,
                    "ignoreHttpStatusErrors": false
                  },
                  "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                  "sendBody": true,
                  "contentType": "json",
                  "sendHeaders": true,
                  "specifyBody": "json",
                  "authentication": "predefinedCredentialType",
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "X-API-Version",
                        "value": "v2"
                      }
                    ]
                  },
                  "nodeCredentialType": "httpHeaderAuth"
                },
                "retryOnFail": true,
                "typeVersion": 4.2,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Send JSON data to an API endpoint",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
              "timestamp": "2025-08-11T19:27:55.307Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.467Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "competitive_pricing_data",
                  "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_6",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
              "timestamp": "2025-08-11T19:27:55.467Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_6",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.635Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                "parameters": {
                  "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
              "timestamp": "2025-08-11T19:27:55.635Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:55.826Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 2.1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
              "timestamp": "2025-08-11T19:27:55.826Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.060Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title, h1.product-name, .item-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price, .current-price, .product-price, [data-price]",
                        "returnValue": "text"
                      },
                      {
                        "key": "originalPrice",
                        "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                        "returnValue": "text"
                      },
                      {
                        "key": "productId",
                        "cssSelector": "[data-product-id], .product-id, .sku",
                        "returnValue": "attribute",
                        "attributeName": "data-product-id"
                      },
                      {
                        "key": "productUrl",
                        "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                        "returnValue": "attribute",
                        "attributeName": "href"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Extract product prices and availability data from competitor website HTML",
              "nodeType": "nodes-base.htmlExtract",
              "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
              "timestamp": "2025-08-11T19:27:56.060Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.246Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Trigger the competitive pricing workflow every hour",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
              "timestamp": "2025-08-11T19:27:56.246Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.435Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "number",
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 0.15
                      },
                      {
                        "id": "2",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.competitorPriceDifference }}",
                        "rightValue": -0.05
                      },
                      {
                        "id": "3",
                        "operator": {
                          "type": "number",
                          "operation": "gt"
                        },
                        "leftValue": "={{ $json.inventoryLevel }}",
                        "rightValue": 10
                      }
                    ],
                    "combineOperation": "all"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Route items based on pricing conditions and profit margin thresholds",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
              "timestamp": "2025-08-11T19:27:56.435Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T19:27:56.673Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T19:27:56.673Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T19:28:42.329Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T19:28:42.643Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T19:29:08.321Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_2",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 2,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.650Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "htmlExtract_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.959Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T19:29:08.960Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2.3
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T19:29:08.960Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T19:29:09.269Z"
            },
            {
              "type": "setPhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T19:29:09.820Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2.3
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2.1
                  },
                  {
                    "id": "sticky_triggers_1754940549820",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      480,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 610,
                      "content": "## 📥 Triggers\nInitiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1754940549820",
                    "name": "Inputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      890,
                      -130
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 610,
                      "height": 610,
                      "content": "## 📊 Inputs\nScrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754940549820",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1600,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 610,
                      "height": 610,
                      "content": "## ⚙️ Transform\nUses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1754940549820",
                    "name": "Decision Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      2310,
                      -130
                    ],
                    "parameters": {
                      "color": 3,
                      "width": 310,
                      "height": 610,
                      "content": "## 🔀 Decision\nRoutes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_integration_1754940549820",
                    "name": "Integration Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      2720,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 610,
                      "content": "## 🔗 Integration\nUpdates inventory system with new pricing based on competitive analysis and profit margin calculations."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754940549820",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      3130,
                      -130
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 910,
                      "height": 610,
                      "content": "## 🚀 Outputs\nSends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_promo_1754940549820",
                    "name": "Ghost Team Promo",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      100,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 610,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T19:29:10.083Z"
            },
            {
              "type": "completePhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T19:29:10.083Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "validatedWorkflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "name": "Hourly Pricing Trigger",
                "typeVersion": 1.2,
                "onError": "stopWorkflow"
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "name": "Scrape Competitor Website",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "htmlExtract_1",
                "type": "n8n-nodes-base.htmlExtract",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "name": "Extract Product Data",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                },
                "name": "AI Price Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "name": "Transform Pricing Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "name": "Pricing Decision Router",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "httpRequest_2",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  },
                  "sendBody": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  }
                },
                "name": "Update Inventory Pricing",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "competitive_pricing",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "name": "Store Pricing Data",
                "typeVersion": 2.6,
                "onError": "stopWorkflow"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "channel": "#pricing-alerts",
                  "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "name": "Send Pricing Alerts",
                "typeVersion": 2.3,
                "onError": "continueRegularOutput",
                "maxTries": 2
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "fromEmail": "pricing-system@company.com",
                  "toEmail": "management@company.com",
                  "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                  "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Email Daily Report",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          }
        },
        "output": {
          "documentedWorkflow": {
            "name": "Competitive Pricing System with AI Analysis",
            "nodes": [
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 1
                      }
                    ]
                  }
                },
                "name": "Hourly Pricing Trigger",
                "typeVersion": 1.2,
                "onError": "stopWorkflow"
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "url": "https://competitor-website.com/products",
                  "method": "GET",
                  "options": {
                    "timeout": 30000,
                    "redirect": {
                      "redirect": {}
                    }
                  }
                },
                "name": "Scrape Competitor Website",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "htmlExtract_1",
                "type": "n8n-nodes-base.htmlExtract",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "sourceData": "json",
                  "dataPropertyName": "html",
                  "extractionValues": {
                    "values": [
                      {
                        "key": "productName",
                        "cssSelector": ".product-title",
                        "returnValue": "text"
                      },
                      {
                        "key": "price",
                        "cssSelector": ".price",
                        "returnValue": "text"
                      },
                      {
                        "key": "availability",
                        "cssSelector": ".stock-status",
                        "returnValue": "text"
                      }
                    ]
                  }
                },
                "name": "Extract Product Data",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this product data: {{ $json }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                },
                "name": "AI Price Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "mode": "runOnceForAllItems",
                  "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                },
                "name": "Transform Pricing Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1750,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "operation": "gte"
                        },
                        "leftValue": "={{ $json.profitMargin }}",
                        "rightValue": 15
                      }
                    ]
                  }
                },
                "name": "Pricing Decision Router",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "httpRequest_2",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  2050,
                  200
                ],
                "parameters": {
                  "url": "https://api.inventory-system.com/pricing/update",
                  "method": "POST",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                      }
                    ]
                  },
                  "sendBody": true,
                  "bodyParameters": {
                    "parameters": [
                      {
                        "name": "productName",
                        "value": "={{ $json.productName }}"
                      },
                      {
                        "name": "newPrice",
                        "value": "={{ $json.recommendedPrice }}"
                      },
                      {
                        "name": "reason",
                        "value": "competitive_adjustment"
                      }
                    ]
                  }
                },
                "name": "Update Inventory Pricing",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  2350,
                  300
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "competitive_pricing",
                  "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                  "additionalFields": {
                    "mode": "independently"
                  }
                },
                "name": "Store Pricing Data",
                "typeVersion": 2.6,
                "onError": "stopWorkflow"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  2050,
                  400
                ],
                "parameters": {
                  "channel": "#pricing-alerts",
                  "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                  "otherOptions": {
                    "includeLinkToWorkflow": true
                  }
                },
                "name": "Send Pricing Alerts",
                "typeVersion": 2.3,
                "onError": "continueRegularOutput",
                "maxTries": 2
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  2650,
                  300
                ],
                "parameters": {
                  "fromEmail": "pricing-system@company.com",
                  "toEmail": "management@company.com",
                  "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                  "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Email Daily Report",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "sticky_triggers_1754940549820",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  480,
                  -130
                ],
                "parameters": {
                  "content": "## 📥 Triggers\nInitiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments.",
                  "height": 610,
                  "width": 310,
                  "color": 6
                }
              },
              {
                "id": "sticky_inputs_1754940549820",
                "name": "Inputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  890,
                  -130
                ],
                "parameters": {
                  "content": "## 📊 Inputs\nScrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques.",
                  "height": 610,
                  "width": 610,
                  "color": 5
                }
              },
              {
                "id": "sticky_transforms_1754940549820",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1600,
                  -130
                ],
                "parameters": {
                  "content": "## ⚙️ Transform\nUses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations.",
                  "height": 610,
                  "width": 610,
                  "color": 4
                }
              },
              {
                "id": "sticky_decision_1754940549820",
                "name": "Decision Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  2310,
                  -130
                ],
                "parameters": {
                  "content": "## 🔀 Decision\nRoutes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions.",
                  "height": 610,
                  "width": 310,
                  "color": 3
                }
              },
              {
                "id": "sticky_integration_1754940549820",
                "name": "Integration Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  2720,
                  -130
                ],
                "parameters": {
                  "content": "## 🔗 Integration\nUpdates inventory system with new pricing based on competitive analysis and profit margin calculations.",
                  "height": 610,
                  "width": 310,
                  "color": 6
                }
              },
              {
                "id": "sticky_outputs_1754940549820",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  3130,
                  -130
                ],
                "parameters": {
                  "content": "## 🚀 Outputs\nSends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations.",
                  "height": 610,
                  "width": 910,
                  "color": 7
                }
              },
              {
                "id": "sticky_promo_1754940549820",
                "name": "Ghost Team Promo",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  100,
                  -130
                ],
                "parameters": {
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team.",
                  "height": 610,
                  "width": 280,
                  "color": 4
                }
              }
            ],
            "connections": {
              "Hourly Pricing Trigger": {
                "main": [
                  [
                    {
                      "node": "Scrape Competitor Website",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Scrape Competitor Website": {
                "main": [
                  [
                    {
                      "node": "Extract Product Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Extract Product Data": {
                "main": [
                  [
                    {
                      "node": "AI Price Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Price Analysis": {
                "main": [
                  [
                    {
                      "node": "Transform Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Pricing Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Pricing Decision Router": {
                "main": [
                  [
                    {
                      "node": "Update Inventory Pricing",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Send Pricing Alerts",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Update Inventory Pricing": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Send Pricing Alerts": {
                "main": [
                  [
                    {
                      "node": "Store Pricing Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Store Pricing Data": {
                "main": [
                  [
                    {
                      "node": "Email Daily Report",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "stickyNotesAdded": 7
        },
        "transformations": [
          "Documentation Generation",
          "Sticky Note Placement",
          "Workflow Finalization"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "documentation",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2.3
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:54.511Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "={{ $json.competitor_url }}",
                      "method": "GET",
                      "options": {
                        "headers": {
                          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        },
                        "timeout": 30000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "autodetect"
                          }
                        }
                      },
                      "authentication": "none"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
                  "timestamp": "2025-08-11T19:27:54.734Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:54.899Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                      "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                      "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                      "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_7",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for competitive pricing system notifications",
                  "timestamp": "2025-08-11T19:27:54.899Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_7",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 1000,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                          },
                          {
                            "role": "user",
                            "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
                  "timestamp": "2025-08-11T19:27:55.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.307Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                      "method": "POST",
                      "options": {
                        "proxy": "",
                        "timeout": 30000,
                        "followRedirect": true,
                        "followAllRedirects": false,
                        "allowUnauthorizedCerts": false,
                        "ignoreHttpStatusErrors": false
                      },
                      "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                      "sendBody": true,
                      "contentType": "json",
                      "sendHeaders": true,
                      "specifyBody": "json",
                      "authentication": "predefinedCredentialType",
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "X-API-Version",
                            "value": "v2"
                          }
                        ]
                      },
                      "nodeCredentialType": "httpHeaderAuth"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Send JSON data to an API endpoint",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:55.307Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.467Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "competitive_pricing_data",
                      "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_6",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
                  "timestamp": "2025-08-11T19:27:55.467Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_6",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.635Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                    "parameters": {
                      "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
                  "timestamp": "2025-08-11T19:27:55.635Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.826Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
                  "timestamp": "2025-08-11T19:27:55.826Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.060Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title, h1.product-name, .item-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price, .current-price, .product-price, [data-price]",
                            "returnValue": "text"
                          },
                          {
                            "key": "originalPrice",
                            "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                            "returnValue": "text"
                          },
                          {
                            "key": "productId",
                            "cssSelector": "[data-product-id], .product-id, .sku",
                            "returnValue": "attribute",
                            "attributeName": "data-product-id"
                          },
                          {
                            "key": "productUrl",
                            "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                            "returnValue": "attribute",
                            "attributeName": "href"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Extract product prices and availability data from competitor website HTML",
                  "nodeType": "nodes-base.htmlExtract",
                  "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
                  "timestamp": "2025-08-11T19:27:56.060Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.246Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Trigger the competitive pricing workflow every hour",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:56.246Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.435Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "number",
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 0.15
                          },
                          {
                            "id": "2",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.competitorPriceDifference }}",
                            "rightValue": -0.05
                          },
                          {
                            "id": "3",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.inventoryLevel }}",
                            "rightValue": 10
                          }
                        ],
                        "combineOperation": "all"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
                  "timestamp": "2025-08-11T19:27:56.435Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.329Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "httpRequest_1",
                        "htmlExtract_1"
                      ],
                      "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1",
                        "code_1"
                      ],
                      "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "httpRequest_2"
                      ],
                      "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "emailSend_1"
                      ],
                      "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                    }
                  ],
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T19:29:08.321Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "htmlExtract_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.960Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2.3
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:29:08.960Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T19:29:09.269Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "complete",
              "userPrompt": "Build a competitive pricing system that scrapes competitor websites hourly, uses AI to extract product prices and availability, compares against our inventory API, automatically adjusts pricing based on market conditions and profit margins, sends alerts for significant price drops, and generates daily pricing reports with recommendations.",
              "discovered": [
                {
                  "id": "task_node_2",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "authentication": "none",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "displayName": "get api data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_7",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "POST",
                    "onError": "continueRegularOutput",
                    "jsonBody": "",
                    "maxTries": 2,
                    "sendBody": true,
                    "contentType": "json",
                    "retryOnFail": true,
                    "specifyBody": "json",
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Send JSON data to an API endpoint",
                  "displayName": "post json request",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_6",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.htmlExtract",
                  "purpose": "Extract product prices and availability data from competitor website HTML"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Trigger the competitive pricing workflow every hour"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds"
                }
              ],
              "selected": [
                "task_node_2",
                "task_node_7",
                "task_node_1",
                "task_node_5",
                "task_node_6",
                "task_node_3",
                "task_node_4",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Competitive Pricing System with AI Analysis",
                "nodes": [
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Hourly Pricing Trigger",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      }
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Scrape Competitor Website",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "url": "https://competitor-website.com/products",
                      "method": "GET",
                      "options": {
                        "timeout": 30000,
                        "redirect": {
                          "redirect": {}
                        }
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "htmlExtract_1",
                    "name": "Extract Product Data",
                    "type": "n8n-nodes-base.htmlExtract",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status",
                            "returnValue": "text"
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Price Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this product data: {{ $json }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Pricing Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "mode": "runOnceForAllItems",
                      "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Pricing Decision Router",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1750,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 15
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "httpRequest_2",
                    "name": "Update Inventory Pricing",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2050,
                      200
                    ],
                    "parameters": {
                      "url": "https://api.inventory-system.com/pricing/update",
                      "method": "POST",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": [
                          {
                            "name": "productName",
                            "value": "={{ $json.productName }}"
                          },
                          {
                            "name": "newPrice",
                            "value": "={{ $json.recommendedPrice }}"
                          },
                          {
                            "name": "reason",
                            "value": "competitive_adjustment"
                          }
                        ]
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "Authorization",
                            "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                          }
                        ]
                      }
                    },
                    "typeVersion": 4.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Pricing Data",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      2350,
                      300
                    ],
                    "parameters": {
                      "table": "competitive_pricing",
                      "schema": "public",
                      "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                      "operation": "insert",
                      "additionalFields": {
                        "mode": "independently"
                      }
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "slack_1",
                    "name": "Send Pricing Alerts",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      2050,
                      400
                    ],
                    "parameters": {
                      "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                      "channel": "#pricing-alerts",
                      "otherOptions": {
                        "includeLinkToWorkflow": true
                      }
                    },
                    "typeVersion": 2.3
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Email Daily Report",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      2650,
                      300
                    ],
                    "parameters": {
                      "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                      "toEmail": "management@company.com",
                      "fromEmail": "pricing-system@company.com"
                    },
                    "typeVersion": 2.1
                  },
                  {
                    "id": "sticky_triggers_1754940549820",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      480,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 610,
                      "content": "## 📥 Triggers\nInitiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1754940549820",
                    "name": "Inputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      890,
                      -130
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 610,
                      "height": 610,
                      "content": "## 📊 Inputs\nScrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754940549820",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1600,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 610,
                      "height": 610,
                      "content": "## ⚙️ Transform\nUses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1754940549820",
                    "name": "Decision Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      2310,
                      -130
                    ],
                    "parameters": {
                      "color": 3,
                      "width": 310,
                      "height": 610,
                      "content": "## 🔀 Decision\nRoutes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_integration_1754940549820",
                    "name": "Integration Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      2720,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 610,
                      "content": "## 🔗 Integration\nUpdates inventory system with new pricing based on competitive analysis and profit margin calculations."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754940549820",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      3130,
                      -130
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 910,
                      "height": 610,
                      "content": "## 🚀 Outputs\nSends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_promo_1754940549820",
                    "name": "Ghost Team Promo",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      100,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 610,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Price Analysis": {
                    "main": [
                      [
                        {
                          "node": "Transform Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Store Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Email Daily Report",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Send Pricing Alerts": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Extract Product Data": {
                    "main": [
                      [
                        {
                          "node": "AI Price Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Hourly Pricing Trigger": {
                    "main": [
                      [
                        {
                          "node": "Scrape Competitor Website",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Pricing Data": {
                    "main": [
                      [
                        {
                          "node": "Pricing Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Pricing Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Update Inventory Pricing",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Send Pricing Alerts",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Update Inventory Pricing": {
                    "main": [
                      [
                        {
                          "node": "Store Pricing Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Scrape Competitor Website": {
                    "main": [
                      [
                        {
                          "node": "Extract Product Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "httpRequest_1",
                    "htmlExtract_1"
                  ],
                  "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1",
                    "code_1"
                  ],
                  "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "httpRequest_2"
                  ],
                  "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "emailSend_1"
                  ],
                  "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "authentication": "none",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Make a simple GET request to retrieve data from an API",
                    "displayName": "get api data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_7",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_7",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "POST",
                      "onError": "continueRegularOutput",
                      "jsonBody": "",
                      "maxTries": 2,
                      "sendBody": true,
                      "contentType": "json",
                      "retryOnFail": true,
                      "specifyBody": "json",
                      "alwaysOutputData": true,
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Send JSON data to an API endpoint",
                    "displayName": "post json request",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_6",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_6",
                  "timestamp": "2025-08-11T19:27:13.105Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.htmlExtract",
                    "purpose": "Extract product prices and availability data from competitor website HTML"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Trigger the competitive pricing workflow every hour"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Route items based on pricing conditions and profit margin thresholds"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T19:27:13.368Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T19:27:13.627Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:54.511Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Scrapes competitor website to retrieve product pricing and availability data for competitive analysis",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "={{ $json.competitor_url }}",
                      "method": "GET",
                      "options": {
                        "headers": {
                          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                        },
                        "timeout": 30000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "autodetect"
                          }
                        }
                      },
                      "authentication": "none"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Make a simple GET request to retrieve data from an API",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the URL parameter to use dynamic input from previous node containing competitor URLs",
                  "timestamp": "2025-08-11T19:27:54.734Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:54.899Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send email alerts for significant competitor price drops and daily pricing reports with AI-generated recommendations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "{{ $json.emailBody || 'Pricing Alert: Significant changes detected in competitor pricing. Please review the attached analysis and recommendations.' }}",
                      "subject": "{{ $json.emailSubject || 'Competitive Pricing Alert - Action Required' }}",
                      "toEmail": "{{ $json.recipientEmail || 'pricing-team@company.com' }}",
                      "fromEmail": "{{ $json.senderEmail || 'pricing-alerts@company.com' }}"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_7",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for competitive pricing system notifications",
                  "timestamp": "2025-08-11T19:27:54.899Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_7",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI-powered price extraction from competitor website data - analyzes scraped content to extract structured pricing information including prices, availability, and promotional details for competitive pricing system",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 1000,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a pricing analysis AI. Extract product prices, availability status, and key product details from scraped competitor website data. Return structured JSON with: product_name, current_price, original_price (if on sale), availability (in_stock/out_of_stock), competitor_name, and any promotional_info."
                          },
                          {
                            "role": "user",
                            "content": "Analyze this competitor website data and extract pricing information:\n\n{{ $json.scraped_content }}\n\nCompetitor: {{ $json.competitor_name }}\nProduct Category: {{ $json.product_category || 'general' }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better accuracy in price extraction and structured data parsing",
                  "timestamp": "2025-08-11T19:27:55.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.307Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing adjustment data to inventory API - Updates product prices based on competitive analysis and profit margin calculations",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "{{ $json.inventory_api_endpoint }}/products/pricing/bulk-update",
                      "method": "POST",
                      "options": {
                        "proxy": "",
                        "timeout": 30000,
                        "followRedirect": true,
                        "followAllRedirects": false,
                        "allowUnauthorizedCerts": false,
                        "ignoreHttpStatusErrors": false
                      },
                      "jsonBody": "{\n  \"pricing_updates\": [\n    {\n      \"product_id\": \"{{ $json.product_id }}\",\n      \"sku\": \"{{ $json.sku }}\",\n      \"new_price\": {{ $json.adjusted_price }},\n      \"competitor_price\": {{ $json.competitor_price }},\n      \"profit_margin\": {{ $json.calculated_margin }},\n      \"price_change_reason\": \"{{ $json.adjustment_reason }}\",\n      \"effective_date\": \"{{ $json.effective_timestamp }}\",\n      \"market_position\": \"{{ $json.competitive_position }}\"\n    }\n  ],\n  \"batch_id\": \"{{ $json.batch_id }}\",\n  \"updated_by\": \"competitive_pricing_system\",\n  \"timestamp\": \"{{ $now }}\"\n}",
                      "sendBody": true,
                      "contentType": "json",
                      "sendHeaders": true,
                      "specifyBody": "json",
                      "authentication": "predefinedCredentialType",
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "name": "X-API-Version",
                            "value": "v2"
                          }
                        ]
                      },
                      "nodeCredentialType": "httpHeaderAuth"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Send JSON data to an API endpoint",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template for inventory API integration in the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:55.307Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.467Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert competitive pricing data into PostgreSQL database - stores scraped competitor prices, AI-extracted product info, pricing adjustments, and market analysis results",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "competitive_pricing_data",
                      "columns": "competitor_name,product_sku,product_name,competitor_price,availability_status,our_current_price,suggested_price,price_adjustment_percent,profit_margin,market_position,scraped_at,processed_at",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_6",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for competitive pricing system by setting table name to 'competitive_pricing_data' to store all pricing intelligence",
                  "timestamp": "2025-08-11T19:27:55.467Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_6",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.635Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped competitor data into standardized format for pricing analysis - extracts product info, prices, availability and calculates pricing recommendations",
                    "parameters": {
                      "jsCode": "// Transform scraped competitor data for pricing analysis\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const competitorData = item.json;\n    \n    // Extract and standardize product information\n    const productInfo = {\n      // Product identification\n      productId: competitorData.productId || competitorData.sku || competitorData.id,\n      productName: competitorData.name || competitorData.title,\n      competitor: competitorData.source || competitorData.competitor,\n      \n      // Pricing data\n      currentPrice: parseFloat(competitorData.price) || 0,\n      originalPrice: parseFloat(competitorData.originalPrice) || parseFloat(competitorData.price) || 0,\n      currency: competitorData.currency || 'USD',\n      \n      // Availability\n      inStock: competitorData.inStock !== false && competitorData.availability !== 'out-of-stock',\n      stockLevel: competitorData.stockLevel || (competitorData.inStock ? 'available' : 'unavailable'),\n      \n      // Metadata\n      scrapedAt: competitorData.scrapedAt || new Date().toISOString(),\n      url: competitorData.url || competitorData.productUrl,\n      \n      // Calculate discount percentage if applicable\n      discountPercent: competitorData.originalPrice && competitorData.price ? \n        Math.round(((parseFloat(competitorData.originalPrice) - parseFloat(competitorData.price)) / parseFloat(competitorData.originalPrice)) * 100) : 0,\n      \n      // Pricing analysis flags\n      isPriceValid: !isNaN(parseFloat(competitorData.price)) && parseFloat(competitorData.price) > 0,\n      needsReview: !competitorData.price || competitorData.price === 'N/A' || competitorData.price === '',\n      \n      // Processing timestamp\n      processedAt: new Date().toISOString()\n    };\n    \n    // Add competitive analysis markers\n    productInfo.competitiveMetrics = {\n      priceCategory: productInfo.currentPrice < 50 ? 'budget' : \n                    productInfo.currentPrice < 200 ? 'mid-range' : 'premium',\n      hasDiscount: productInfo.discountPercent > 0,\n      significantDiscount: productInfo.discountPercent > 20\n    };\n    \n    results.push({\n      json: productInfo\n    });\n    \n  } catch (error) {\n    // Handle malformed data gracefully\n    results.push({\n      json: {\n        error: `Failed to process item: ${error.message}`,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        needsReview: true\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle competitor pricing data structure",
                  "timestamp": "2025-08-11T19:27:55.635Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:55.826Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send pricing alerts and daily reports to Slack channel for competitive pricing system monitoring",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "{{ $json.alertType === 'price_drop' ? '🚨 *Significant Price Drop Alert*\\n\\n' + \n'Product: ' + $json.productName + '\\n' +\n'Competitor: ' + $json.competitor + '\\n' +\n'Previous Price: $' + $json.previousPrice + '\\n' +\n'New Price: $' + $json.newPrice + '\\n' +\n'Drop: ' + $json.priceDropPercent + '%\\n' +\n'Our Current Price: $' + $json.ourPrice + '\\n' +\n'Recommended Action: ' + $json.recommendation :\n$json.alertType === 'daily_report' ? '📊 *Daily Pricing Report*\\n\\n' +\n'Date: ' + $json.reportDate + '\\n' +\n'Products Monitored: ' + $json.productsMonitored + '\\n' +\n'Price Changes Detected: ' + $json.priceChanges + '\\n' +\n'Pricing Adjustments Made: ' + $json.adjustmentsMade + '\\n' +\n'Average Margin: ' + $json.averageMargin + '%\\n' +\n'Top Recommendations:\\n' + $json.recommendations :\n'💰 *Pricing System Update*\\n\\n' + $json.message }}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{ $json.channel || '#pricing-alerts' }}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the Slack message template to handle two main use cases from the competitive pricing system: price drop alerts and daily reports",
                  "timestamp": "2025-08-11T19:27:55.826Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.060Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Extracts product prices and availability data from competitor website HTML using CSS selectors",
                    "parameters": {
                      "sourceData": "json",
                      "dataPropertyName": "html",
                      "extractionValues": {
                        "values": [
                          {
                            "key": "productName",
                            "cssSelector": ".product-title, h1.product-name, .item-title",
                            "returnValue": "text"
                          },
                          {
                            "key": "price",
                            "cssSelector": ".price, .current-price, .product-price, [data-price]",
                            "returnValue": "text"
                          },
                          {
                            "key": "originalPrice",
                            "cssSelector": ".original-price, .was-price, .list-price, .msrp",
                            "returnValue": "text"
                          },
                          {
                            "key": "availability",
                            "cssSelector": ".stock-status, .availability, .in-stock, .out-of-stock",
                            "returnValue": "text"
                          },
                          {
                            "key": "productId",
                            "cssSelector": "[data-product-id], .product-id, .sku",
                            "returnValue": "attribute",
                            "attributeName": "data-product-id"
                          },
                          {
                            "key": "productUrl",
                            "cssSelector": "link[rel='canonical'], meta[property='og:url']",
                            "returnValue": "attribute",
                            "attributeName": "href"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Extract product prices and availability data from competitor website HTML",
                  "nodeType": "nodes-base.htmlExtract",
                  "reasoning": "Configured HTML Extract node to extract key competitive pricing data including product name, current price, original price, and availability status",
                  "timestamp": "2025-08-11T19:27:56.060Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.246Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers the competitive pricing workflow every hour to scrape competitor data and adjust pricing",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 1
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Trigger the competitive pricing workflow every hour",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run every hour as requested for the competitive pricing system",
                  "timestamp": "2025-08-11T19:27:56.246Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.435Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes pricing decisions based on profit margins and competitive conditions",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "number",
                              "operation": "gte"
                            },
                            "leftValue": "={{ $json.profitMargin }}",
                            "rightValue": 0.15
                          },
                          {
                            "id": "2",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.competitorPriceDifference }}",
                            "rightValue": -0.05
                          },
                          {
                            "id": "3",
                            "operator": {
                              "type": "number",
                              "operation": "gt"
                            },
                            "leftValue": "={{ $json.inventoryLevel }}",
                            "rightValue": 10
                          }
                        ],
                        "combineOperation": "all"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Route items based on pricing conditions and profit margin thresholds",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node creates a pricing decision gate that routes products based on three key business conditions: maintaining minimum 15% profit margin, staying competitive within 5% of competitor prices, and having adequate inventory levels",
                  "timestamp": "2025-08-11T19:27:56.435Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T19:27:56.673Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.329Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "🚨 *Pricing Alert*\n\nProduct: {{ $json.productName }}\nCompetitor Price: ${{ $json.competitorPrice }}\nProfit Margin: {{ $json.profitMargin }}%\n\n{{ $json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully' }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "Daily Competitive Pricing Analysis Report\n\nSummary:\n- Products Analyzed: {{ $json.totalProducts }}\n- Price Adjustments Made: {{ $json.adjustmentsMade }}\n- Average Profit Margin: {{ $json.avgProfitMargin }}%\n- Alerts Generated: {{ $json.alertsCount }}\n\nRecommendations:\n{{ $json.recommendations }}\n\nDetailed analysis available in the pricing dashboard.",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "Daily Competitive Pricing Report - {{ new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Initiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "httpRequest_1",
                        "htmlExtract_1"
                      ],
                      "description": "Scrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1",
                        "code_1"
                      ],
                      "description": "Uses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "httpRequest_2"
                      ],
                      "description": "Updates inventory system with new pricing based on competitive analysis and profit margin calculations."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "emailSend_1"
                      ],
                      "description": "Sends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Persists all competitive pricing data, analysis results, and pricing adjustments in PostgreSQL database for historical tracking and reporting."
                    }
                  ],
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T19:28:42.643Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T19:29:08.321Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.650Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "htmlExtract_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.959Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T19:29:08.960Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2.3
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:29:08.960Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T19:29:09.269Z"
                },
                {
                  "type": "setPhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T19:29:09.820Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Competitive Pricing System with AI Analysis",
                    "nodes": [
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Hourly Pricing Trigger",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 1
                              }
                            ]
                          }
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Scrape Competitor Website",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "url": "https://competitor-website.com/products",
                          "method": "GET",
                          "options": {
                            "timeout": 30000,
                            "redirect": {
                              "redirect": {}
                            }
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "htmlExtract_1",
                        "name": "Extract Product Data",
                        "type": "n8n-nodes-base.htmlExtract",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "sourceData": "json",
                          "dataPropertyName": "html",
                          "extractionValues": {
                            "values": [
                              {
                                "key": "productName",
                                "cssSelector": ".product-title",
                                "returnValue": "text"
                              },
                              {
                                "key": "price",
                                "cssSelector": ".price",
                                "returnValue": "text"
                              },
                              {
                                "key": "availability",
                                "cssSelector": ".stock-status",
                                "returnValue": "text"
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Price Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-4",
                          "options": {
                            "maxTokens": 500,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a pricing analyst. Extract and structure product pricing data from the provided content. Return JSON with productName, cleanPrice (numeric), availability (boolean), and any promotional details."
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this product data: {{ $json }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Pricing Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "mode": "runOnceForAllItems",
                          "jsCode": "// Transform scraped competitor data into standardized format for pricing analysis\nconst items = $input.all();\nconst transformedData = [];\n\nfor (const item of items) {\n  try {\n    const aiResponse = JSON.parse(item.json.choices[0].message.content);\n    \n    // Calculate competitive pricing recommendations\n    const competitorPrice = parseFloat(aiResponse.cleanPrice);\n    const ourCostBasis = competitorPrice * 0.7; // Assume 30% margin\n    const recommendedPrice = competitorPrice * 0.95; // Price 5% below competitor\n    const profitMargin = ((recommendedPrice - ourCostBasis) / recommendedPrice) * 100;\n    \n    transformedData.push({\n      productName: aiResponse.productName,\n      competitorPrice: competitorPrice,\n      recommendedPrice: recommendedPrice,\n      profitMargin: profitMargin,\n      availability: aiResponse.availability,\n      priceChange: competitorPrice < (item.json.previousPrice || competitorPrice) ? 'decrease' : 'stable',\n      timestamp: new Date().toISOString(),\n      needsAlert: profitMargin < 15 || (item.json.previousPrice && competitorPrice < item.json.previousPrice * 0.9)\n    });\n  } catch (error) {\n    console.error('Error processing item:', error);\n  }\n}\n\nreturn transformedData.map(data => ({ json: data }));"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Pricing Decision Router",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1750,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "operation": "gte"
                                },
                                "leftValue": "={{ $json.profitMargin }}",
                                "rightValue": 15
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "httpRequest_2",
                        "name": "Update Inventory Pricing",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2050,
                          200
                        ],
                        "parameters": {
                          "url": "https://api.inventory-system.com/pricing/update",
                          "method": "POST",
                          "sendBody": true,
                          "sendHeaders": true,
                          "bodyParameters": {
                            "parameters": [
                              {
                                "name": "productName",
                                "value": "={{ $json.productName }}"
                              },
                              {
                                "name": "newPrice",
                                "value": "={{ $json.recommendedPrice }}"
                              },
                              {
                                "name": "reason",
                                "value": "competitive_adjustment"
                              }
                            ]
                          },
                          "headerParameters": {
                            "parameters": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{ $vars.INVENTORY_API_KEY }}"
                              }
                            ]
                          }
                        },
                        "typeVersion": 4.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Pricing Data",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          2350,
                          300
                        ],
                        "parameters": {
                          "table": "competitive_pricing",
                          "schema": "public",
                          "columns": "product_name, competitor_price, recommended_price, profit_margin, availability, price_change, timestamp, needs_alert",
                          "operation": "insert",
                          "additionalFields": {
                            "mode": "independently"
                          }
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "slack_1",
                        "name": "Send Pricing Alerts",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          2050,
                          400
                        ],
                        "parameters": {
                          "text": "{{ `🚨 *Pricing Alert*\n\nProduct: ${$json.productName}\nCompetitor Price: $${$json.competitorPrice}\nProfit Margin: ${$json.profitMargin}%\n\n${$json.needsAlert ? '⚠️ Action Required: Low margin or significant price drop detected!' : '✅ Price adjustment completed successfully'}` }}",
                          "channel": "#pricing-alerts",
                          "otherOptions": {
                            "includeLinkToWorkflow": true
                          }
                        },
                        "typeVersion": 2.3
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Email Daily Report",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          2650,
                          300
                        ],
                        "parameters": {
                          "message": "{{ 'Daily Competitive Pricing Analysis Report\\n\\nSummary:\\n- Products Analyzed: ' + $json.totalProducts + '\\n- Price Adjustments Made: ' + $json.adjustmentsMade + '\\n- Average Profit Margin: ' + $json.avgProfitMargin + '%\\n- Alerts Generated: ' + $json.alertsCount + '\\n\\nRecommendations:\\n' + $json.recommendations + '\\n\\nDetailed analysis available in the pricing dashboard.' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "{{ 'Daily Competitive Pricing Report - ' + new Date().toLocaleDateString() }}",
                          "toEmail": "management@company.com",
                          "fromEmail": "pricing-system@company.com"
                        },
                        "typeVersion": 2.1
                      },
                      {
                        "id": "sticky_triggers_1754940549820",
                        "name": "Triggers Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          480,
                          -130
                        ],
                        "parameters": {
                          "color": 6,
                          "width": 310,
                          "height": 610,
                          "content": "## 📥 Triggers\nInitiates the competitive pricing workflow on an hourly schedule to ensure regular market monitoring and price adjustments."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_inputs_1754940549820",
                        "name": "Inputs Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          890,
                          -130
                        ],
                        "parameters": {
                          "color": 5,
                          "width": 610,
                          "height": 610,
                          "content": "## 📊 Inputs\nScrapes competitor websites and extracts product pricing and availability data using HTTP requests and HTML parsing techniques."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_transforms_1754940549820",
                        "name": "Transform Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1600,
                          -130
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 610,
                          "height": 610,
                          "content": "## ⚙️ Transform\nUses AI to analyze scraped content and transforms raw data into structured pricing information with competitive analysis and recommendations."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_decision_1754940549820",
                        "name": "Decision Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          2310,
                          -130
                        ],
                        "parameters": {
                          "color": 3,
                          "width": 310,
                          "height": 610,
                          "content": "## 🔀 Decision\nRoutes pricing decisions based on profit margin thresholds and competitive conditions to determine appropriate actions."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_integration_1754940549820",
                        "name": "Integration Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          2720,
                          -130
                        ],
                        "parameters": {
                          "color": 6,
                          "width": 310,
                          "height": 610,
                          "content": "## 🔗 Integration\nUpdates inventory system with new pricing based on competitive analysis and profit margin calculations."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_outputs_1754940549820",
                        "name": "Outputs Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          3130,
                          -130
                        ],
                        "parameters": {
                          "color": 7,
                          "width": 910,
                          "height": 610,
                          "content": "## 🚀 Outputs\nSends real-time alerts via Slack for significant price changes and generates comprehensive daily email reports with recommendations."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_promo_1754940549820",
                        "name": "Ghost Team Promo",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          100,
                          -130
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 280,
                          "height": 610,
                          "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Price Analysis": {
                        "main": [
                          [
                            {
                              "node": "Transform Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Store Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Email Daily Report",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Send Pricing Alerts": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Extract Product Data": {
                        "main": [
                          [
                            {
                              "node": "AI Price Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Hourly Pricing Trigger": {
                        "main": [
                          [
                            {
                              "node": "Scrape Competitor Website",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Pricing Data": {
                        "main": [
                          [
                            {
                              "node": "Pricing Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Pricing Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Update Inventory Pricing",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Send Pricing Alerts",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Update Inventory Pricing": {
                        "main": [
                          [
                            {
                              "node": "Store Pricing Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Scrape Competitor Website": {
                        "main": [
                          [
                            {
                              "node": "Extract Product Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T19:29:10.083Z"
                },
                {
                  "type": "completePhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T19:29:10.083Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    }
  },
  "summary": {
    "totalNodes": 17,
    "totalConnections": 9,
    "validationAttempts": 3,
    "errorsFixed": 2,
    "stickyNotesAdded": 7,
    "performanceScore": 20,
    "qualityScore": 95,
    "completenessScore": 100
  },
  "optimizationSuggestions": [
    "Consider optimizing discovery phase (took 25387ms)",
    "Consider optimizing configuration phase (took 42753ms)",
    "Consider optimizing building phase (took 46068ms)",
    "Consider optimizing validation phase (took 26714ms)",
    "High validation attempts detected. Consider improving initial node configuration."
  ],
  "errorPatterns": [
    {
      "pattern": "ValidationError",
      "frequency": 2,
      "suggestedFix": "Review node configuration requirements and ensure all required fields are set"
    }
  ]
}