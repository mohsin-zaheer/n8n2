{
  "testName": "Custom Test",
  "userPrompt": "Create webhook to Slack workflow",
  "sessionId": "complete_e2e_custom_test_1754844158133",
  "timestamp": "2025-08-10T16:42:38.133Z",
  "duration": 17783,
  "success": false,
  "phases": {
    "discovery": {
      "name": "Discovery",
      "success": true,
      "metrics": {
        "startTime": 1754844158694,
        "endTime": 1754844168117,
        "duration": 9423,
        "memoryUsage": {
          "heapUsed": 6022776,
          "heapTotal": 60686336,
          "external": 6455129
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-10T16:42:38.694Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting discovery phase"
        },
        {
          "timestamp": "2025-08-10T16:42:38.694Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for discovery phase"
        },
        {
          "timestamp": "2025-08-10T16:42:47.030Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-10T16:42:47.030Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"receive_webhook\"}"
        },
        {
          "timestamp": "2025-08-10T16:42:47.031Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-10T16:42:47.031Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"send_slack_message\"}"
        },
        {
          "timestamp": "2025-08-10T16:42:47.236Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-10T16:42:47.240Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-10T16:42:47.992Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Set up a webhook to receive data from external services)"
        },
        {
          "timestamp": "2025-08-10T16:42:47.992Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.slack (Send a message to Slack channel)"
        },
        {
          "timestamp": "2025-08-10T16:42:48.116Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-10T16:42:48.117Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "node_1",
          "type": "nodes-base.webhook",
          "purpose": "Set up a webhook to receive data from external services"
        },
        {
          "id": "node_2",
          "type": "nodes-base.slack",
          "purpose": "Send a message to Slack channel"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_custom_test_1754844158133",
        "createdAt": "2025-08-10T16:42:38.717Z",
        "state": {
          "phase": "configuration",
          "userPrompt": "Create webhook to Slack workflow",
          "discovered": [
            {
              "id": "node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "allEntries",
                "responseMode": "lastNode",
                "alwaysOutputData": true
              },
              "purpose": "Set up a webhook to receive data from external services",
              "displayName": "receive webhook",
              "isPreConfigured": true
            },
            {
              "id": "node_2",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            }
          ],
          "selected": [
            "node_1",
            "node_2"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode",
                  "alwaysOutputData": true
                },
                "purpose": "Set up a webhook to receive data from external services",
                "displayName": "receive webhook",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "type": "selectNode",
              "nodeId": "node_1",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "node": {
                "id": "node_2",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "type": "selectNode",
              "nodeId": "node_2",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-10T16:42:47.242Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "prompt": "Create webhook to Slack workflow"
        },
        "output": {
          "nodes": [
            {
              "id": "node_1",
              "type": "nodes-base.webhook",
              "displayName": "receive webhook",
              "purpose": "Set up a webhook to receive data from external services",
              "isPreConfigured": true,
              "config": {
                "httpMethod": "POST",
                "path": "webhook",
                "responseMode": "lastNode",
                "responseData": "allEntries",
                "onError": "continueRegularOutput",
                "alwaysOutputData": true
              }
            },
            {
              "id": "node_2",
              "type": "nodes-base.slack",
              "displayName": "send slack message",
              "purpose": "Send a message to Slack channel",
              "isPreConfigured": true,
              "config": {
                "resource": "message",
                "operation": "post",
                "channel": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 2000
              }
            }
          ]
        },
        "transformations": [
          "Intent Analysis",
          "Node Discovery",
          "Selection"
        ]
      }
    },
    "configuration": {
      "name": "Configuration",
      "success": false,
      "metrics": {
        "startTime": 1754844168117,
        "endTime": 1754844175916,
        "duration": 7799,
        "memoryUsage": {
          "heapUsed": -5312376,
          "heapTotal": 34275328,
          "external": 6405439
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-10T16:42:48.117Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting configuration phase"
        },
        {
          "timestamp": "2025-08-10T16:42:48.117Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for configuration phase"
        },
        {
          "timestamp": "2025-08-10T16:42:54.148Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_operation"
        },
        {
          "timestamp": "2025-08-10T16:42:54.148Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\",\"config\":{\"path\":\"webhook\",\"httpMethod\":\"POST\",\"responseData\":\"allEntries\",\"responseMode\":\"lastNode\"},\"profile\":\"ai-friendly\"}"
        },
        {
          "timestamp": "2025-08-10T16:42:54.429Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_operation completed successfully"
        },
        {
          "timestamp": "2025-08-10T16:42:54.439Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_operation"
        },
        {
          "timestamp": "2025-08-10T16:42:54.439Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.slack\",\"config\":{\"text\":\"New webhook notification: {{$json.message || 'Webhook received'}}\",\"channel\":\"#general\",\"resource\":\"message\",\"operation\":\"post\"},\"profile\":\"ai-friendly\"}"
        },
        {
          "timestamp": "2025-08-10T16:42:54.584Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_operation completed successfully"
        },
        {
          "timestamp": "2025-08-10T16:42:55.814Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Set up a webhook to receive data from external services)"
        },
        {
          "timestamp": "2025-08-10T16:42:55.814Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.slack (Send a message to Slack channel)"
        },
        {
          "timestamp": "2025-08-10T16:42:55.916Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-10T16:42:55.916Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "node_1",
          "type": "nodes-base.webhook",
          "purpose": "Set up a webhook to receive data from external services",
          "configuration": {
            "onError": "continueRegularOutput",
            "alwaysOutputData": true,
            "typeVersion": 1,
            "notes": "Webhook endpoint to receive data from external services and forward to Slack workflow",
            "parameters": {
              "path": "webhook",
              "httpMethod": "POST",
              "responseData": "allEntries",
              "responseMode": "lastNode"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "node_2",
          "type": "nodes-base.slack",
          "purpose": "Send a message to Slack channel",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 2,
            "retryOnFail": true,
            "waitBetweenTries": 2000,
            "typeVersion": 3,
            "notes": "Send message to Slack channel when webhook is triggered",
            "parameters": {
              "text": "New webhook notification: {{$json.message || 'Webhook received'}}",
              "channel": "#general",
              "resource": "message",
              "operation": "post"
            }
          },
          "validationStatus": "invalid",
          "validationErrors": []
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_custom_test_1754844158133",
        "createdAt": "2025-08-10T16:42:38.717Z",
        "state": {
          "phase": "configuration",
          "userPrompt": "Create webhook to Slack workflow",
          "discovered": [
            {
              "id": "node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "allEntries",
                "responseMode": "lastNode",
                "alwaysOutputData": true
              },
              "purpose": "Set up a webhook to receive data from external services",
              "displayName": "receive webhook",
              "isPreConfigured": true
            },
            {
              "id": "node_2",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            }
          ],
          "selected": [
            "node_1",
            "node_2"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode",
                  "alwaysOutputData": true
                },
                "purpose": "Set up a webhook to receive data from external services",
                "displayName": "receive webhook",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "type": "selectNode",
              "nodeId": "node_1",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "node": {
                "id": "node_2",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "type": "selectNode",
              "nodeId": "node_2",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-10T16:42:47.242Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-10T16:42:54.585Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook endpoint to receive data from external services and forward to Slack workflow",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "webhook",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                },
                "typeVersion": 1,
                "alwaysOutputData": true
              },
              "nodeId": "node_1",
              "purpose": "Set up a webhook to receive data from external services",
              "nodeType": "nodes-base.webhook",
              "reasoning": "The template configuration is already well-suited for a webhook to Slack workflow",
              "timestamp": "2025-08-10T16:42:54.868Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-10T16:42:55.259Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send message to Slack channel when webhook is triggered",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "New webhook notification: {{$json.message || 'Webhook received'}}",
                  "channel": "#general",
                  "resource": "message",
                  "operation": "post"
                },
                "retryOnFail": true,
                "typeVersion": 3,
                "waitBetweenTries": 2000
              },
              "nodeId": "node_2",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the template for webhook-to-Slack workflow by setting a dynamic message text that uses webhook payload data",
              "timestamp": "2025-08-10T16:42:55.259Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "node_2",
              "result": {
                "valid": false,
                "errors": []
              },
              "timestamp": "2025-08-10T16:42:55.585Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "discoveredNodes": [
            {
              "id": "node_1",
              "type": "nodes-base.webhook",
              "displayName": "receive webhook",
              "purpose": "Set up a webhook to receive data from external services",
              "isPreConfigured": true,
              "config": {
                "httpMethod": "POST",
                "path": "webhook",
                "responseMode": "lastNode",
                "responseData": "allEntries",
                "onError": "continueRegularOutput",
                "alwaysOutputData": true
              }
            },
            {
              "id": "node_2",
              "type": "nodes-base.slack",
              "displayName": "send slack message",
              "purpose": "Send a message to Slack channel",
              "isPreConfigured": true,
              "config": {
                "resource": "message",
                "operation": "post",
                "channel": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 2000
              }
            }
          ]
        },
        "output": {
          "configuredNodes": [
            {
              "id": "node_1",
              "type": "nodes-base.webhook",
              "purpose": "Set up a webhook to receive data from external services",
              "config": {
                "onError": "continueRegularOutput",
                "alwaysOutputData": true,
                "typeVersion": 1,
                "notes": "Webhook endpoint to receive data from external services and forward to Slack workflow",
                "parameters": {
                  "path": "webhook",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                }
              },
              "validated": true
            },
            {
              "id": "node_2",
              "type": "nodes-base.slack",
              "purpose": "Send a message to Slack channel",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 2000,
                "typeVersion": 3,
                "notes": "Send message to Slack channel when webhook is triggered",
                "parameters": {
                  "text": "New webhook notification: {{$json.message || 'Webhook received'}}",
                  "channel": "#general",
                  "resource": "message",
                  "operation": "post"
                }
              },
              "validated": false,
              "validationErrors": []
            }
          ]
        },
        "transformations": [
          "Parameter Configuration",
          "Validation",
          "Type Checking"
        ]
      },
      "errors": [
        {
          "type": "validation",
          "message": "1 nodes failed validation"
        }
      ]
    },
    "building": {
      "name": "Building",
      "success": false,
      "metrics": {
        "startTime": 0,
        "endTime": 0,
        "duration": 0
      },
      "logs": [],
      "nodes": [],
      "sessionState": {},
      "stateChanges": {},
      "dataFlow": {
        "input": null,
        "output": null,
        "transformations": []
      }
    },
    "validation": {
      "name": "Validation",
      "success": false,
      "metrics": {
        "startTime": 0,
        "endTime": 0,
        "duration": 0
      },
      "logs": [],
      "nodes": [],
      "sessionState": {},
      "stateChanges": {},
      "dataFlow": {
        "input": null,
        "output": null,
        "transformations": []
      }
    },
    "documentation": {
      "name": "Documentation",
      "success": false,
      "metrics": {
        "startTime": 0,
        "endTime": 0,
        "duration": 0
      },
      "logs": [],
      "nodes": [],
      "sessionState": {},
      "stateChanges": {},
      "dataFlow": {
        "input": null,
        "output": null,
        "transformations": []
      }
    }
  },
  "summary": {
    "totalNodes": 0,
    "totalConnections": 0,
    "validationAttempts": 0,
    "errorsFixed": 0,
    "stickyNotesAdded": 0,
    "performanceScore": 60,
    "qualityScore": 105,
    "completenessScore": 20
  },
  "optimizationSuggestions": [],
  "errorPatterns": [
    {
      "pattern": "validation",
      "frequency": 1,
      "suggestedFix": "Review error details and adjust workflow accordingly"
    }
  ]
}