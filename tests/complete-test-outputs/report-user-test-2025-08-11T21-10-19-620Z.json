{
  "testName": "User Test",
  "userPrompt": "“When a PDF arrives in Gmail, detect its type (invoice, contract, NDA), extract key fields with OCR, rename the file in a standard format, and file it in the correct Google Drive folder.”",
  "sessionId": "complete_e2e_user_test_1754946599144",
  "timestamp": "2025-08-11T21:09:59.144Z",
  "duration": 20474,
  "success": false,
  "phases": {
    "discovery": {
      "name": "Discovery",
      "success": true,
      "metrics": {
        "startTime": 1754946599555,
        "endTime": 1754946619403,
        "duration": 19848,
        "memoryUsage": {
          "heapUsed": -1541912,
          "heapTotal": 32440320,
          "external": 6349343
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T21:09:59.556Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting discovery phase"
        },
        {
          "timestamp": "2025-08-11T21:09:59.556Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for discovery phase"
        },
        {
          "timestamp": "2025-08-11T21:10:12.642Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T21:10:12.642Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"chat_with_ai\"}"
        },
        {
          "timestamp": "2025-08-11T21:10:12.643Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T21:10:12.643Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"transform_data\"}"
        },
        {
          "timestamp": "2025-08-11T21:10:12.994Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T21:10:13.333Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T21:10:13.335Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T21:10:13.335Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"gmail\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T21:10:13.335Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T21:10:13.335Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"ocr\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T21:10:13.335Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T21:10:13.335Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"google\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T21:10:13.460Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T21:10:13.486Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T21:10:13.553Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T21:10:19.309Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.openAi (Send a message to an AI model and get response)"
        },
        {
          "timestamp": "2025-08-11T21:10:19.309Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T21:10:19.310Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.gmailTrigger (Monitor Gmail for incoming PDF attachments and trigger workflow)"
        },
        {
          "timestamp": "2025-08-11T21:10:19.310Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.uproc (Perform OCR text extraction on PDF documents)"
        },
        {
          "timestamp": "2025-08-11T21:10:19.403Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T21:10:19.403Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_1",
          "type": "nodes-base.openAi",
          "purpose": "Send a message to an AI model and get response"
        },
        {
          "id": "task_node_2",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.gmailTrigger",
          "purpose": "Monitor Gmail for incoming PDF attachments and trigger workflow"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.uproc",
          "purpose": "Perform OCR text extraction on PDF documents"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754946599144",
        "createdAt": "2025-08-11T21:09:59.545Z",
        "state": {
          "phase": "discovery",
          "userPrompt": "“When a PDF arrives in Gmail, detect its type (invoice, contract, NDA), extract key fields with OCR, rename the file in a standard format, and file it in the correct Google Drive folder.”",
          "discovered": [],
          "selected": [],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "prompt": "“When a PDF arrives in Gmail, detect its type (invoice, contract, NDA), extract key fields with OCR, rename the file in a standard format, and file it in the correct Google Drive folder.”"
        },
        "output": {
          "nodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.gmailTrigger",
              "displayName": "nodes-base.gmailTrigger",
              "purpose": "Monitor Gmail for incoming PDF attachments and trigger workflow",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.uproc",
              "displayName": "nodes-base.uproc",
              "purpose": "Perform OCR text extraction on PDF documents",
              "needsConfiguration": true
            }
          ]
        },
        "transformations": [
          "Intent Analysis",
          "Node Discovery",
          "Selection"
        ]
      }
    },
    "configuration": {
      "name": "Configuration",
      "success": false,
      "metrics": {
        "startTime": 1754946619404,
        "endTime": 1754946619618,
        "duration": 214,
        "memoryUsage": {
          "heapUsed": -64576,
          "heapTotal": 32440320,
          "external": 6386866
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T21:10:19.404Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting configuration phase"
        },
        {
          "timestamp": "2025-08-11T21:10:19.404Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for configuration phase"
        },
        {
          "timestamp": "2025-08-11T21:10:19.618Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T21:10:19.618Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754946599144",
        "createdAt": "2025-08-11T21:09:59.545Z",
        "state": {
          "phase": "discovery",
          "userPrompt": "“When a PDF arrives in Gmail, detect its type (invoice, contract, NDA), extract key fields with OCR, rename the file in a standard format, and file it in the correct Google Drive folder.”",
          "discovered": [],
          "selected": [],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "discoveredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.gmailTrigger",
              "displayName": "nodes-base.gmailTrigger",
              "purpose": "Monitor Gmail for incoming PDF attachments and trigger workflow",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.uproc",
              "displayName": "nodes-base.uproc",
              "purpose": "Perform OCR text extraction on PDF documents",
              "needsConfiguration": true
            }
          ]
        },
        "output": {
          "configuredNodes": []
        },
        "transformations": [
          "Parameter Configuration",
          "Validation",
          "Type Checking"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {},
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt",
          "state"
        ]
      },
      "errors": [
        {
          "type": "validation",
          "message": "No nodes selected for configuration"
        }
      ]
    },
    "building": {
      "name": "Building",
      "success": false,
      "metrics": {
        "startTime": 0,
        "endTime": 0,
        "duration": 0
      },
      "logs": [],
      "nodes": [],
      "sessionState": {},
      "stateChanges": {},
      "dataFlow": {
        "input": null,
        "output": null,
        "transformations": []
      }
    },
    "validation": {
      "name": "Validation",
      "success": false,
      "metrics": {
        "startTime": 0,
        "endTime": 0,
        "duration": 0
      },
      "logs": [],
      "nodes": [],
      "sessionState": {},
      "stateChanges": {},
      "dataFlow": {
        "input": null,
        "output": null,
        "transformations": []
      }
    },
    "documentation": {
      "name": "Documentation",
      "success": false,
      "metrics": {
        "startTime": 0,
        "endTime": 0,
        "duration": 0
      },
      "logs": [],
      "nodes": [],
      "sessionState": {},
      "stateChanges": {},
      "dataFlow": {
        "input": null,
        "output": null,
        "transformations": []
      }
    }
  },
  "summary": {
    "totalNodes": 0,
    "totalConnections": 0,
    "validationAttempts": 0,
    "errorsFixed": 0,
    "stickyNotesAdded": 0,
    "performanceScore": 40,
    "qualityScore": 105,
    "completenessScore": 20
  },
  "optimizationSuggestions": [
    "Consider optimizing discovery phase (took 19848ms)"
  ],
  "errorPatterns": [
    {
      "pattern": "validation",
      "frequency": 1,
      "suggestedFix": "Review error details and adjust workflow accordingly"
    }
  ]
}