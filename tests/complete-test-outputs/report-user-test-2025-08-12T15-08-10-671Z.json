{
  "testName": "User Test",
  "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
  "sessionId": "complete_e2e_user_test_1755011180180",
  "timestamp": "2025-08-12T15:06:20.181Z",
  "duration": 110490,
  "success": true,
  "phases": {
    "discovery": {
      "name": "Discovery",
      "success": true,
      "metrics": {
        "startTime": 1755011180604,
        "endTime": 1755011198707,
        "duration": 18103,
        "memoryUsage": {
          "heapUsed": 2304680,
          "heapTotal": 31391744,
          "external": 6420636
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-12T15:06:20.604Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting discovery phase"
        },
        {
          "timestamp": "2025-08-12T15:06:20.604Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for discovery phase"
        },
        {
          "timestamp": "2025-08-12T15:06:32.669Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-12T15:06:32.669Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"receive_webhook\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:32.670Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-12T15:06:32.670Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"multi_tool_ai_agent\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:32.670Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-12T15:06:32.670Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"filter_data\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:32.670Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-12T15:06:32.671Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"transform_data\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:32.671Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-12T15:06:32.671Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"use_google_sheets_as_tool\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:32.828Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:32.830Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:32.867Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:32.913Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:32.923Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:32.925Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-12T15:06:32.925Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"apify\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:32.925Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-12T15:06:32.925Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"apify\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:33.042Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:33.042Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-12T15:06:33.042Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"linkedin\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:33.053Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:33.053Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-12T15:06:33.053Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"youtube\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:33.161Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:33.172Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:38.650Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Set up a webhook to receive data from external services)"
        },
        {
          "timestamp": "2025-08-12T15:06:38.650Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.googleSheets (Use Google Sheets as an AI tool for reading/writing data)"
        },
        {
          "timestamp": "2025-08-12T15:06:38.650Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Filter items based on conditions)"
        },
        {
          "timestamp": "2025-08-12T15:06:38.650Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-12T15:06:38.650Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-langchain.agent (AI agent with multiple tools for complex automation)"
        },
        {
          "timestamp": "2025-08-12T15:06:38.650Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.linkedIn (Access LinkedIn API to scrape top performing posts based on keywords)"
        },
        {
          "timestamp": "2025-08-12T15:06:38.650Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.youTube (Access YouTube API to scrape top performing videos based on keywords)"
        },
        {
          "timestamp": "2025-08-12T15:06:38.707Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-12T15:06:38.707Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_1",
          "type": "nodes-base.webhook",
          "purpose": "Set up a webhook to receive data from external services"
        },
        {
          "id": "task_node_5",
          "type": "nodes-base.googleSheets",
          "purpose": "Use Google Sheets as an AI tool for reading/writing data"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.if",
          "purpose": "Filter items based on conditions"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript"
        },
        {
          "id": "task_node_2",
          "type": "nodes-langchain.agent",
          "purpose": "AI agent with multiple tools for complex automation"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.linkedIn",
          "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.youTube",
          "purpose": "Access YouTube API to scrape top performing videos based on keywords"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1755011180180",
        "createdAt": "2025-08-12T15:06:20.586Z",
        "state": {
          "phase": "discovery",
          "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "allEntries",
                "responseMode": "lastNode",
                "alwaysOutputData": true
              },
              "purpose": "Set up a webhook to receive data from external services",
              "displayName": "receive webhook",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "config": {
                "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                "dataMode": "autoMap",
                "operation": "append"
              },
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "displayName": "use google sheets as tool",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "config": {
                "conditions": {
                  "conditions": [
                    {
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "leftValue": "",
                      "rightValue": ""
                    }
                  ]
                }
              },
              "purpose": "Filter items based on conditions",
              "displayName": "filter data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "={{ $json.query }}",
                "outputType": "output",
                "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
              },
              "purpose": "AI agent with multiple tools for complex automation",
              "displayName": "multi tool ai agent",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_5",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "search_node_1",
            "search_node_2"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode",
                  "alwaysOutputData": true
                },
                "purpose": "Set up a webhook to receive data from external services",
                "displayName": "receive webhook",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.googleSheets",
                "config": {
                  "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                  "dataMode": "autoMap",
                  "operation": "append"
                },
                "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                "displayName": "use google sheets as tool",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.if",
                "config": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "",
                        "rightValue": ""
                      }
                    ]
                  }
                },
                "purpose": "Filter items based on conditions",
                "displayName": "filter data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "={{ $json.query }}",
                  "outputType": "output",
                  "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                },
                "purpose": "AI agent with multiple tools for complex automation",
                "displayName": "multi tool ai agent",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.linkedIn",
                "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.youTube",
                "purpose": "Access YouTube API to scrape top performing videos based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-12T15:06:38.440Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "prompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets"
        },
        "output": {
          "nodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "displayName": "receive webhook",
              "purpose": "Set up a webhook to receive data from external services",
              "isPreConfigured": true,
              "config": {
                "httpMethod": "POST",
                "path": "webhook",
                "responseMode": "lastNode",
                "responseData": "allEntries",
                "onError": "continueRegularOutput",
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "displayName": "use google sheets as tool",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "isPreConfigured": true,
              "config": {
                "operation": "append",
                "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                "dataMode": "autoMap"
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "displayName": "filter data",
              "purpose": "Filter items based on conditions",
              "isPreConfigured": true,
              "config": {
                "conditions": {
                  "conditions": [
                    {
                      "leftValue": "",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "displayName": "multi tool ai agent",
              "purpose": "AI agent with multiple tools for complex automation",
              "isPreConfigured": true,
              "config": {
                "text": "={{ $json.query }}",
                "outputType": "output",
                "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "displayName": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "displayName": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "needsConfiguration": true
            }
          ]
        },
        "transformations": [
          "Intent Analysis",
          "Node Discovery",
          "Selection"
        ]
      }
    },
    "configuration": {
      "name": "Configuration",
      "success": true,
      "metrics": {
        "startTime": 1755011198707,
        "endTime": 1755011245325,
        "duration": 46618,
        "memoryUsage": {
          "heapUsed": 4960632,
          "heapTotal": 37683200,
          "external": 7593451
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-12T15:06:38.707Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting configuration phase"
        },
        {
          "timestamp": "2025-08-12T15:06:38.707Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for configuration phase"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.googleSheets\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-langchain.agent\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.linkedIn\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-12T15:06:38.799Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:38.966Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:38.969Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:38.984Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:39.023Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:39.046Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:39.173Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:39.440Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:45.687Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:06:45.687Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\",\"config\":{\"conditions\":{\"conditions\":[{\"operator\":{\"type\":\"string\",\"operation\":\"contains\"},\"leftValue\":\"{{ $json.url }}\",\"rightValue\":\"linkedin.com\"}]}}}"
        },
        {
          "timestamp": "2025-08-12T15:06:45.807Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:06:45.807Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\",\"config\":{\"path\":\"research-agent-trigger\",\"httpMethod\":\"POST\",\"responseData\":\"allEntries\",\"responseMode\":\"lastNode\"}}"
        },
        {
          "timestamp": "2025-08-12T15:06:45.866Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:45.978Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:47.257Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:06:47.257Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.googleSheets\",\"config\":{\"range\":\"A:C\",\"sheetId\":\"={{ $fromAI(\\\"sheetId\\\", \\\"The Google Sheets ID where scraped content will be stored\\\") }}\",\"dataMode\":\"defineBelow\",\"operation\":\"append\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"Platform\":\"={{ $json.platform }}\",\"Title\":\"={{ $json.title }}\",\"URL\":\"={{ $json.url }}\"}}}}"
        },
        {
          "timestamp": "2025-08-12T15:06:47.373Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:48.722Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:06:48.722Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-langchain.agent\",\"config\":{\"text\":\"{{ $json.keyword }}\",\"outputType\":\"output\",\"systemMessage\":\"You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\\n\\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\\n4. Extract the direct links to these posts and videos\\n5. Organize the results in a structured format suitable for Google Sheets output\\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\\n\\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed.\"}}"
        },
        {
          "timestamp": "2025-08-12T15:06:48.891Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:48.935Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:06:48.935Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"search\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:49.041Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:51.910Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:06:51.910Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"order\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:52.026Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:52.641Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:06:52.641Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.linkedIn\",\"config\":{\"resource\":\"post\",\"postAs\":\"person\",\"person\":\"\",\"binaryPropertyName\":\"data\"}}"
        },
        {
          "timestamp": "2025-08-12T15:06:52.760Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:54.237Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_documentation"
        },
        {
          "timestamp": "2025-08-12T15:06:54.237Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\"}"
        },
        {
          "timestamp": "2025-08-12T15:06:54.343Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_documentation completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:56.148Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:06:56.148Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\",\"config\":{\"jsCode\":\"// Transform scraped data from Apify for Google Sheets output\\nconst results = [];\\n\\nfor (const item of $input.all()) {\\n  const data = item.json;\\n  \\n  // Handle LinkedIn posts\\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\\n    results.push({\\n      json: {\\n        platform: 'LinkedIn',\\n        title: data.text || data.content || data.description || 'No title',\\n        link: data.url || data.postUrl || data.link,\\n        engagement: data.likes || data.reactions || 0,\\n        comments: data.comments || 0,\\n        shares: data.shares || data.reposts || 0,\\n        author: data.author || data.authorName || 'Unknown',\\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\\n        keyword: data.searchKeyword || 'N/A',\\n        processedAt: new Date().toISOString()\\n      }\\n    });\\n  }\\n  \\n  // Handle YouTube videos\\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\\n    results.push({\\n      json: {\\n        platform: 'YouTube',\\n        title: data.title || data.name || 'No title',\\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\\n        engagement: data.views || data.viewCount || 0,\\n        comments: data.comments || data.commentCount || 0,\\n        shares: data.likes || data.likeCount || 0,\\n        author: data.channelName || data.author || data.uploader || 'Unknown',\\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\\n        keyword: data.searchKeyword || 'N/A',\\n        processedAt: new Date().toISOString()\\n      }\\n    });\\n  }\\n  \\n  // Handle generic scraped data (fallback)\\n  if (!data.platform && !data.type) {\\n    results.push({\\n      json: {\\n        platform: data.source || 'Unknown',\\n        title: data.title || data.text || data.content || 'No title',\\n        link: data.url || data.link || 'No link',\\n        engagement: data.engagement || data.likes || data.views || 0,\\n        comments: data.comments || 0,\\n        shares: data.shares || data.likes || 0,\\n        author: data.author || data.creator || 'Unknown',\\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\\n        keyword: data.keyword || 'N/A',\\n        processedAt: new Date().toISOString()\\n      }\\n    });\\n  }\\n}\\n\\nreturn results;\",\"language\":\"javaScript\"}}"
        },
        {
          "timestamp": "2025-08-12T15:06:56.259Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:56.699Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:06:56.699Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"getAll\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:56.836Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:06:58.871Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:06:58.871Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"video\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:06:58.979Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:07:01.299Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:07:01.299Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"operation\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:07:01.426Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:07:04.594Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:07:04.594Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"chart\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:07:04.712Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:07:07.789Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:07:07.789Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"part\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:07:07.937Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:07:10.920Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_node_properties"
        },
        {
          "timestamp": "2025-08-12T15:07:10.920Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"query\":\"filters\",\"maxResults\":20}"
        },
        {
          "timestamp": "2025-08-12T15:07:11.037Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_node_properties completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:07:16.269Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:07:16.270Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"config\":{\"notes\":\"Searches YouTube for top performing videos based on keyword input\",\"typeVersion\":1,\"parameters\":{\"resource\":\"video\",\"operation\":\"getAll\",\"part\":[\"snippet\",\"statistics\"],\"filters\":{\"q\":\"{{ $json.keyword }}\",\"order\":\"viewCount\"},\"options\":{\"maxResults\":50}}}}"
        },
        {
          "timestamp": "2025-08-12T15:07:16.456Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:07:23.103Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-12T15:07:23.103Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.youTube\",\"config\":{\"resource\":\"video\",\"operation\":\"getAll\",\"part\":[\"snippet\",\"statistics\"],\"filters\":{\"q\":\"{{ $json.keyword }}\"},\"options\":{\"order\":\"viewCount\",\"maxResults\":50}}}"
        },
        {
          "timestamp": "2025-08-12T15:07:23.254Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:07:25.212Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Set up a webhook to receive data from external services)"
        },
        {
          "timestamp": "2025-08-12T15:07:25.212Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.googleSheets (Use Google Sheets as an AI tool for reading/writing data)"
        },
        {
          "timestamp": "2025-08-12T15:07:25.212Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Filter items based on conditions)"
        },
        {
          "timestamp": "2025-08-12T15:07:25.212Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-12T15:07:25.212Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-langchain.agent (AI agent with multiple tools for complex automation)"
        },
        {
          "timestamp": "2025-08-12T15:07:25.212Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.linkedIn (Access LinkedIn API to scrape top performing posts based on keywords)"
        },
        {
          "timestamp": "2025-08-12T15:07:25.212Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.youTube (Access YouTube API to scrape top performing videos based on keywords)"
        },
        {
          "timestamp": "2025-08-12T15:07:25.325Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-12T15:07:25.325Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_1",
          "type": "nodes-base.webhook",
          "purpose": "Set up a webhook to receive data from external services",
          "configuration": {
            "onError": "continueRegularOutput",
            "alwaysOutputData": true,
            "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
            "typeVersion": "1",
            "parameters": {
              "path": "research-agent-trigger",
              "httpMethod": "POST",
              "responseData": "allEntries",
              "responseMode": "lastNode"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_5",
          "type": "nodes-base.googleSheets",
          "purpose": "Use Google Sheets as an AI tool for reading/writing data",
          "configuration": {
            "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
            "typeVersion": "1",
            "parameters": {
              "range": "A:C",
              "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
              "dataMode": "defineBelow",
              "operation": "append",
              "columns": {
                "mappingMode": "defineBelow",
                "value": {
                  "Platform": "={{ $json.platform }}",
                  "Title": "={{ $json.title }}",
                  "URL": "={{ $json.url }}"
                }
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.if",
          "purpose": "Filter items based on conditions",
          "configuration": {
            "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
            "typeVersion": "1",
            "parameters": {
              "conditions": {
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "leftValue": "{{ $json.url }}",
                    "rightValue": "linkedin.com"
                  }
                ]
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript",
          "configuration": {
            "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
            "parameters": {
              "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
              "language": "javaScript"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_2",
          "type": "nodes-langchain.agent",
          "purpose": "AI agent with multiple tools for complex automation",
          "configuration": {
            "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
            "typeVersion": "1",
            "parameters": {
              "text": "{{ $json.keyword }}",
              "outputType": "output",
              "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.linkedIn",
          "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
          "configuration": {
            "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
            "typeVersion": "1",
            "parameters": {
              "resource": "post",
              "postAs": "person",
              "person": "",
              "binaryPropertyName": "data"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.youTube",
          "purpose": "Access YouTube API to scrape top performing videos based on keywords",
          "configuration": {
            "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
            "typeVersion": 1,
            "parameters": {
              "resource": "video",
              "operation": "getAll",
              "part": [
                "snippet",
                "statistics"
              ],
              "filters": {
                "q": "{{ $json.keyword }}"
              },
              "options": {
                "order": "viewCount",
                "maxResults": 50
              }
            }
          },
          "validationStatus": "valid"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1755011180180",
        "createdAt": "2025-08-12T15:06:20.586Z",
        "state": {
          "phase": "building",
          "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "allEntries",
                "responseMode": "lastNode",
                "alwaysOutputData": true
              },
              "purpose": "Set up a webhook to receive data from external services",
              "displayName": "receive webhook",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "config": {
                "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                "dataMode": "autoMap",
                "operation": "append"
              },
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "displayName": "use google sheets as tool",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "config": {
                "conditions": {
                  "conditions": [
                    {
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "leftValue": "",
                      "rightValue": ""
                    }
                  ]
                }
              },
              "purpose": "Filter items based on conditions",
              "displayName": "filter data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "={{ $json.query }}",
                "outputType": "output",
                "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
              },
              "purpose": "AI agent with multiple tools for complex automation",
              "displayName": "multi tool ai agent",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_5",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "search_node_1",
            "search_node_2"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode",
                  "alwaysOutputData": true
                },
                "purpose": "Set up a webhook to receive data from external services",
                "displayName": "receive webhook",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.googleSheets",
                "config": {
                  "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                  "dataMode": "autoMap",
                  "operation": "append"
                },
                "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                "displayName": "use google sheets as tool",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.if",
                "config": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "",
                        "rightValue": ""
                      }
                    ]
                  }
                },
                "purpose": "Filter items based on conditions",
                "displayName": "filter data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "={{ $json.query }}",
                  "outputType": "output",
                  "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                },
                "purpose": "AI agent with multiple tools for complex automation",
                "displayName": "multi tool ai agent",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.linkedIn",
                "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.youTube",
                "purpose": "Access YouTube API to scrape top performing videos based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:23.254Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "research-agent-trigger",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                },
                "typeVersion": "1",
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Set up a webhook to receive data from external services",
              "nodeType": "nodes-base.webhook",
              "timestamp": "2025-08-12T15:07:23.497Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "parameters": {
                  "range": "A:C",
                  "columns": {
                    "value": {
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Platform": "={{ $json.platform }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                  "dataMode": "defineBelow",
                  "operation": "append"
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_5",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "nodeType": "nodes-base.googleSheets",
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        },
                        "leftValue": "{{ $json.url }}",
                        "rightValue": "linkedin.com"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_3",
              "purpose": "Filter items based on conditions",
              "nodeType": "nodes-base.if",
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "parameters": {
                  "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "nodeId": "task_node_4",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "parameters": {
                  "text": "{{ $json.keyword }}",
                  "outputType": "output",
                  "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_2",
              "purpose": "AI agent with multiple tools for complex automation",
              "nodeType": "nodes-langchain.agent",
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.438Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
              "timestamp": "2025-08-12T15:07:24.438Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "timestamp": "2025-08-12T15:07:24.587Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.711Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
              "timestamp": "2025-08-12T15:07:24.711Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "timestamp": "2025-08-12T15:07:24.878Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:25.064Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:25.064Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "discoveredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "displayName": "receive webhook",
              "purpose": "Set up a webhook to receive data from external services",
              "isPreConfigured": true,
              "config": {
                "httpMethod": "POST",
                "path": "webhook",
                "responseMode": "lastNode",
                "responseData": "allEntries",
                "onError": "continueRegularOutput",
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "displayName": "use google sheets as tool",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "isPreConfigured": true,
              "config": {
                "operation": "append",
                "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                "dataMode": "autoMap"
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "displayName": "filter data",
              "purpose": "Filter items based on conditions",
              "isPreConfigured": true,
              "config": {
                "conditions": {
                  "conditions": [
                    {
                      "leftValue": "",
                      "rightValue": "",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "displayName": "multi tool ai agent",
              "purpose": "AI agent with multiple tools for complex automation",
              "isPreConfigured": true,
              "config": {
                "text": "={{ $json.query }}",
                "outputType": "output",
                "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "displayName": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "displayName": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "needsConfiguration": true
            }
          ]
        },
        "output": {
          "configuredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "purpose": "Set up a webhook to receive data from external services",
              "config": {
                "onError": "continueRegularOutput",
                "alwaysOutputData": true,
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "typeVersion": "1",
                "parameters": {
                  "path": "research-agent-trigger",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "config": {
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "typeVersion": "1",
                "parameters": {
                  "range": "A:C",
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                  "dataMode": "defineBelow",
                  "operation": "append",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "Platform": "={{ $json.platform }}",
                      "Title": "={{ $json.title }}",
                      "URL": "={{ $json.url }}"
                    }
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "purpose": "Filter items based on conditions",
              "config": {
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "typeVersion": "1",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        },
                        "leftValue": "{{ $json.url }}",
                        "rightValue": "linkedin.com"
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "parameters": {
                  "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "purpose": "AI agent with multiple tools for complex automation",
              "config": {
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "typeVersion": "1",
                "parameters": {
                  "text": "{{ $json.keyword }}",
                  "outputType": "output",
                  "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "typeVersion": "1",
                "parameters": {
                  "resource": "post",
                  "postAs": "person",
                  "person": "",
                  "binaryPropertyName": "data"
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "typeVersion": 1,
                "parameters": {
                  "resource": "video",
                  "operation": "getAll",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  }
                }
              },
              "validated": true
            }
          ]
        },
        "transformations": [
          "Parameter Configuration",
          "Validation",
          "Type Checking"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "discovery",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "building",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:23.254Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "research-agent-trigger",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode"
                    },
                    "typeVersion": "1",
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Set up a webhook to receive data from external services",
                  "nodeType": "nodes-base.webhook",
                  "timestamp": "2025-08-12T15:07:23.497Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "parameters": {
                      "range": "A:C",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                      "dataMode": "defineBelow",
                      "operation": "append"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "nodeType": "nodes-base.googleSheets",
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "contains"
                            },
                            "leftValue": "{{ $json.url }}",
                            "rightValue": "linkedin.com"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Filter items based on conditions",
                  "nodeType": "nodes-base.if",
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "parameters": {
                      "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    }
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "outputType": "output",
                      "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_2",
                  "purpose": "AI agent with multiple tools for complex automation",
                  "nodeType": "nodes-langchain.agent",
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.438Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
                  "timestamp": "2025-08-12T15:07:24.438Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "timestamp": "2025-08-12T15:07:24.587Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.711Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
                  "timestamp": "2025-08-12T15:07:24.711Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "timestamp": "2025-08-12T15:07:24.878Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:25.064Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "building": {
      "name": "Building",
      "success": true,
      "metrics": {
        "startTime": 1755011245326,
        "endTime": 1755011271372,
        "duration": 26046,
        "memoryUsage": {
          "heapUsed": -3292312,
          "heapTotal": 37683200,
          "external": 6702777
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-12T15:07:25.326Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting building phase"
        },
        {
          "timestamp": "2025-08-12T15:07:25.326Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for building phase"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.webhook (Webhook Trigger)"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-langchain.agent (Research Agent)"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.code (Transform Data)"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.if (Filter Content)"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.googleSheets (Save to Google Sheets)"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.youTube (YouTube Search)"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.linkedIn (LinkedIn Posts)"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 7 nodes"
        },
        {
          "timestamp": "2025-08-12T15:07:51.234Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 4 connection groups"
        },
        {
          "timestamp": "2025-08-12T15:07:51.372Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-12T15:07:51.372Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "webhook_1",
          "type": "n8n-nodes-base.webhook",
          "purpose": "Webhook Trigger"
        },
        {
          "id": "agent_1",
          "type": "n8n-nodes-langchain.agent",
          "purpose": "Research Agent"
        },
        {
          "id": "code_1",
          "type": "n8n-nodes-base.code",
          "purpose": "Transform Data"
        },
        {
          "id": "if_1",
          "type": "n8n-nodes-base.if",
          "purpose": "Filter Content"
        },
        {
          "id": "googleSheets_1",
          "type": "n8n-nodes-base.googleSheets",
          "purpose": "Save to Google Sheets"
        },
        {
          "id": "youTube_1",
          "type": "n8n-nodes-base.youTube",
          "purpose": "YouTube Search"
        },
        {
          "id": "linkedIn_1",
          "type": "n8n-nodes-base.linkedIn",
          "purpose": "LinkedIn Posts"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1755011180180",
        "createdAt": "2025-08-12T15:06:20.586Z",
        "state": {
          "phase": "validation",
          "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "allEntries",
                "responseMode": "lastNode",
                "alwaysOutputData": true
              },
              "purpose": "Set up a webhook to receive data from external services",
              "displayName": "receive webhook",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "config": {
                "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                "dataMode": "autoMap",
                "operation": "append"
              },
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "displayName": "use google sheets as tool",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "config": {
                "conditions": {
                  "conditions": [
                    {
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "leftValue": "",
                      "rightValue": ""
                    }
                  ]
                }
              },
              "purpose": "Filter items based on conditions",
              "displayName": "filter data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "={{ $json.query }}",
                "outputType": "output",
                "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
              },
              "purpose": "AI agent with multiple tools for complex automation",
              "displayName": "multi tool ai agent",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_5",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "search_node_1",
            "search_node_2"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Webhook Trigger",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                },
                "typeVersion": 1
              },
              {
                "id": "agent_1",
                "name": "Research Agent",
                "type": "n8n-nodes-langchain.agent",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "text": "{{ $json.keyword }}",
                  "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                },
                "typeVersion": 1
              },
              {
                "id": "code_1",
                "name": "Transform Data",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "typeVersion": 2
              },
              {
                "id": "if_1",
                "name": "Filter Content",
                "type": "n8n-nodes-base.if",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn"
                      }
                    ]
                  }
                },
                "typeVersion": 2
              },
              {
                "id": "googleSheets_1",
                "name": "Save to Google Sheets",
                "type": "n8n-nodes-base.googleSheets",
                "onError": "continueErrorOutput",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "URL": "={{ $json.url }}",
                      "Type": "={{ $json.type }}",
                      "Title": "={{ $json.title }}",
                      "Platform": "={{ $json.platform }}",
                      "Engagement": "={{ $json.engagement }}"
                    }
                  },
                  "operation": "append"
                },
                "typeVersion": 4
              },
              {
                "id": "youTube_1",
                "name": "YouTube Search",
                "type": "n8n-nodes-base.youTube",
                "onError": "continueErrorOutput",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "q": "={{ $json.keyword }}",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                  "order": "viewCount",
                  "operation": "search",
                  "maxResults": 10
                },
                "typeVersion": 2
              },
              {
                "id": "linkedIn_1",
                "name": "LinkedIn Posts",
                "type": "n8n-nodes-base.linkedIn",
                "onError": "continueErrorOutput",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                  "person": "",
                  "operation": "post"
                },
                "typeVersion": 1
              }
            ],
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "agent_1"
              ],
              "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
            },
            {
              "type": "storage",
              "nodeIds": [
                "googleSheets_1"
              ],
              "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode",
                  "alwaysOutputData": true
                },
                "purpose": "Set up a webhook to receive data from external services",
                "displayName": "receive webhook",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.googleSheets",
                "config": {
                  "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                  "dataMode": "autoMap",
                  "operation": "append"
                },
                "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                "displayName": "use google sheets as tool",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.if",
                "config": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "",
                        "rightValue": ""
                      }
                    ]
                  }
                },
                "purpose": "Filter items based on conditions",
                "displayName": "filter data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "={{ $json.query }}",
                  "outputType": "output",
                  "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                },
                "purpose": "AI agent with multiple tools for complex automation",
                "displayName": "multi tool ai agent",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.linkedIn",
                "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.youTube",
                "purpose": "Access YouTube API to scrape top performing videos based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:23.254Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "research-agent-trigger",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                },
                "typeVersion": "1",
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Set up a webhook to receive data from external services",
              "nodeType": "nodes-base.webhook",
              "timestamp": "2025-08-12T15:07:23.497Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "parameters": {
                  "range": "A:C",
                  "columns": {
                    "value": {
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Platform": "={{ $json.platform }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                  "dataMode": "defineBelow",
                  "operation": "append"
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_5",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "nodeType": "nodes-base.googleSheets",
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        },
                        "leftValue": "{{ $json.url }}",
                        "rightValue": "linkedin.com"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_3",
              "purpose": "Filter items based on conditions",
              "nodeType": "nodes-base.if",
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "parameters": {
                  "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "nodeId": "task_node_4",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "parameters": {
                  "text": "{{ $json.keyword }}",
                  "outputType": "output",
                  "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_2",
              "purpose": "AI agent with multiple tools for complex automation",
              "nodeType": "nodes-langchain.agent",
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.438Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
              "timestamp": "2025-08-12T15:07:24.438Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "timestamp": "2025-08-12T15:07:24.587Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.711Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
              "timestamp": "2025-08-12T15:07:24.711Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "timestamp": "2025-08-12T15:07:24.878Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:25.064Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:25.064Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-12T15:07:50.768Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-12T15:07:50.987Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "configuredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "purpose": "Set up a webhook to receive data from external services",
              "config": {
                "onError": "continueRegularOutput",
                "alwaysOutputData": true,
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "typeVersion": "1",
                "parameters": {
                  "path": "research-agent-trigger",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "config": {
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "typeVersion": "1",
                "parameters": {
                  "range": "A:C",
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                  "dataMode": "defineBelow",
                  "operation": "append",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "Platform": "={{ $json.platform }}",
                      "Title": "={{ $json.title }}",
                      "URL": "={{ $json.url }}"
                    }
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "purpose": "Filter items based on conditions",
              "config": {
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "typeVersion": "1",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        },
                        "leftValue": "{{ $json.url }}",
                        "rightValue": "linkedin.com"
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "parameters": {
                  "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "purpose": "AI agent with multiple tools for complex automation",
              "config": {
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "typeVersion": "1",
                "parameters": {
                  "text": "{{ $json.keyword }}",
                  "outputType": "output",
                  "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "typeVersion": "1",
                "parameters": {
                  "resource": "post",
                  "postAs": "person",
                  "person": "",
                  "binaryPropertyName": "data"
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "typeVersion": 1,
                "parameters": {
                  "resource": "video",
                  "operation": "getAll",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  }
                }
              },
              "validated": true
            }
          ]
        },
        "output": {
          "workflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                },
                "name": "Webhook Trigger",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "agent_1",
                "type": "n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                  "text": "{{ $json.keyword }}"
                },
                "name": "Research Agent",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "name": "Transform Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                  "conditions": {
                    "conditions": [
                      {
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ]
                  }
                },
                "name": "Filter Content",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "googleSheets_1",
                "type": "n8n-nodes-base.googleSheets",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                  "operation": "append",
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "Platform": "={{ $json.platform }}",
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Engagement": "={{ $json.engagement }}",
                      "Type": "={{ $json.type }}"
                    }
                  }
                },
                "name": "Save to Google Sheets",
                "typeVersion": 4,
                "onError": "continueErrorOutput"
              },
              {
                "id": "youTube_1",
                "type": "n8n-nodes-base.youTube",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                  "operation": "search",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "q": "={{ $json.keyword }}",
                  "order": "viewCount",
                  "maxResults": 10
                },
                "name": "YouTube Search",
                "typeVersion": 2,
                "onError": "continueErrorOutput"
              },
              {
                "id": "linkedIn_1",
                "type": "n8n-nodes-base.linkedIn",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                  "operation": "post",
                  "person": ""
                },
                "name": "LinkedIn Posts",
                "typeVersion": 1,
                "onError": "continueErrorOutput"
              }
            ],
            "connections": {
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "transformations": [
          "Workflow Generation",
          "Connection Building",
          "Settings Configuration"
        ]
      },
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
              "settings": {
                "executionOrder": "v1",
                "saveManualExecutions": true,
                "saveDataErrorExecution": "all",
                "saveDataSuccessExecution": "all"
              },
              "connections": {
                "Filter Content": {
                  "main": [
                    [
                      {
                        "node": "Save to Google Sheets",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Save to Google Sheets",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Research Agent": {
                  "main": [
                    [
                      {
                        "node": "Transform Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Transform Data": {
                  "main": [
                    [
                      {
                        "node": "Filter Content",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Webhook Trigger": {
                  "main": [
                    [
                      {
                        "node": "Research Agent",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "building",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:23.254Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "research-agent-trigger",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode"
                    },
                    "typeVersion": "1",
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Set up a webhook to receive data from external services",
                  "nodeType": "nodes-base.webhook",
                  "timestamp": "2025-08-12T15:07:23.497Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "parameters": {
                      "range": "A:C",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                      "dataMode": "defineBelow",
                      "operation": "append"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "nodeType": "nodes-base.googleSheets",
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "contains"
                            },
                            "leftValue": "{{ $json.url }}",
                            "rightValue": "linkedin.com"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Filter items based on conditions",
                  "nodeType": "nodes-base.if",
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "parameters": {
                      "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    }
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "outputType": "output",
                      "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_2",
                  "purpose": "AI agent with multiple tools for complex automation",
                  "nodeType": "nodes-langchain.agent",
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.438Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
                  "timestamp": "2025-08-12T15:07:24.438Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "timestamp": "2025-08-12T15:07:24.587Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.711Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
                  "timestamp": "2025-08-12T15:07:24.711Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "timestamp": "2025-08-12T15:07:24.878Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:25.064Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "validation",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:23.254Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "research-agent-trigger",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode"
                    },
                    "typeVersion": "1",
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Set up a webhook to receive data from external services",
                  "nodeType": "nodes-base.webhook",
                  "timestamp": "2025-08-12T15:07:23.497Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "parameters": {
                      "range": "A:C",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                      "dataMode": "defineBelow",
                      "operation": "append"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "nodeType": "nodes-base.googleSheets",
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "contains"
                            },
                            "leftValue": "{{ $json.url }}",
                            "rightValue": "linkedin.com"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Filter items based on conditions",
                  "nodeType": "nodes-base.if",
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "parameters": {
                      "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    }
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "outputType": "output",
                      "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_2",
                  "purpose": "AI agent with multiple tools for complex automation",
                  "nodeType": "nodes-langchain.agent",
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.438Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
                  "timestamp": "2025-08-12T15:07:24.438Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "timestamp": "2025-08-12T15:07:24.587Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.711Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
                  "timestamp": "2025-08-12T15:07:24.711Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "timestamp": "2025-08-12T15:07:24.878Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.768Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}",
                          "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "googleSheets_1"
                      ],
                      "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                    }
                  ],
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.987Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "validation": {
      "name": "Validation",
      "success": true,
      "metrics": {
        "startTime": 1755011271372,
        "endTime": 1755011290000,
        "duration": 18628,
        "memoryUsage": {
          "heapUsed": 1222912,
          "heapTotal": 35586048,
          "external": 7087535
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-12T15:07:51.373Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting validation phase"
        },
        {
          "timestamp": "2025-08-12T15:07:51.373Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for validation phase"
        },
        {
          "timestamp": "2025-08-12T15:07:51.374Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-12T15:07:51.374Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Research Agent - LinkedIn & YouTube Scraper to Google Sheets\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"notes\":\"Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input\"},\"name\":\"Webhook Trigger\",\"typeVersion\":1,\"onError\":\"stopWorkflow\"},{\"id\":\"agent_1\",\"type\":\"n8n-nodes-langchain.agent\",\"position\":[550,300],\"parameters\":{\"notes\":\"Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets\",\"text\":\"{{ $json.keyword }}\"},\"name\":\"Research Agent\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,300],\"parameters\":{\"notes\":\"Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics\",\"jsCode\":\"// Transform agent output into structured data for Google Sheets\\nconst items = [];\\n\\n// Process agent response\\nif ($input.all().length > 0) {\\n  const agentData = $input.all()[0].json;\\n  \\n  // Extract LinkedIn posts\\n  if (agentData.linkedinPosts) {\\n    agentData.linkedinPosts.forEach(post => {\\n      items.push({\\n        platform: 'LinkedIn',\\n        url: post.url,\\n        title: post.title || 'LinkedIn Post',\\n        engagement: post.likes || 0,\\n        type: 'Post'\\n      });\\n    });\\n  }\\n  \\n  // Extract YouTube videos\\n  if (agentData.youtubeVideos) {\\n    agentData.youtubeVideos.forEach(video => {\\n      items.push({\\n        platform: 'YouTube',\\n        url: video.url,\\n        title: video.title || 'YouTube Video',\\n        engagement: video.views || 0,\\n        type: 'Video'\\n      });\\n    });\\n  }\\n}\\n\\nreturn items;\"},\"name\":\"Transform Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"notes\":\"Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets\",\"conditions\":{\"conditions\":[{\"leftValue\":\"{{ $json.platform }}\",\"rightValue\":\"LinkedIn\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}]}},\"name\":\"Filter Content\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"googleSheets_1\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1450,300],\"parameters\":{\"notes\":\"Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis\",\"operation\":\"append\",\"range\":\"A:E\",\"columns\":{\"value\":{\"Platform\":\"={{ $json.platform }}\",\"URL\":\"={{ $json.url }}\",\"Title\":\"={{ $json.title }}\",\"Engagement\":\"={{ $json.engagement }}\",\"Type\":\"={{ $json.type }}\"}}},\"name\":\"Save to Google Sheets\",\"typeVersion\":4,\"onError\":\"continueErrorOutput\"},{\"id\":\"youTube_1\",\"type\":\"n8n-nodes-base.youTube\",\"position\":[550,500],\"parameters\":{\"notes\":\"Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics\",\"operation\":\"search\",\"part\":[\"snippet\",\"statistics\"],\"q\":\"={{ $json.keyword }}\",\"order\":\"viewCount\",\"maxResults\":10},\"name\":\"YouTube Search\",\"typeVersion\":2,\"onError\":\"continueErrorOutput\"},{\"id\":\"linkedIn_1\",\"type\":\"n8n-nodes-base.linkedIn\",\"position\":[550,100],\"parameters\":{\"notes\":\"This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead\",\"operation\":\"post\",\"person\":\"\"},\"name\":\"LinkedIn Posts\",\"typeVersion\":1,\"onError\":\"continueErrorOutput\"}],\"connections\":{\"Webhook Trigger\":{\"main\":[[{\"node\":\"Research Agent\",\"type\":\"main\",\"index\":0}]]},\"Research Agent\":{\"main\":[[{\"node\":\"Transform Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Data\":{\"main\":[[{\"node\":\"Filter Content\",\"type\":\"main\",\"index\":0}]]},\"Filter Content\":{\"main\":[[{\"node\":\"Save to Google Sheets\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Save to Google Sheets\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-12T15:07:51.544Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:08:06.602Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-12T15:08:06.602Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Research Agent - LinkedIn & YouTube Scraper to Google Sheets\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"research-agent\",\"httpMethod\":\"POST\",\"responseMode\":\"onReceived\"},\"name\":\"Webhook Trigger\",\"typeVersion\":2,\"onError\":\"stopWorkflow\",\"notes\":\"Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input\"},{\"id\":\"agent_1\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[550,300],\"parameters\":{\"text\":\"{{ $json.keyword }}\"},\"name\":\"Research Agent\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\",\"notes\":\"Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,300],\"parameters\":{\"jsCode\":\"// Transform agent output into structured data for Google Sheets\\nconst items = [];\\n\\n// Process agent response\\nif ($input.all().length > 0) {\\n  const agentData = $input.all()[0].json;\\n  \\n  // Extract LinkedIn posts\\n  if (agentData.linkedinPosts) {\\n    agentData.linkedinPosts.forEach(post => {\\n      items.push({\\n        platform: 'LinkedIn',\\n        url: post.url,\\n        title: post.title || 'LinkedIn Post',\\n        engagement: post.likes || 0,\\n        type: 'Post'\\n      });\\n    });\\n  }\\n  \\n  // Extract YouTube videos\\n  if (agentData.youtubeVideos) {\\n    agentData.youtubeVideos.forEach(video => {\\n      items.push({\\n        platform: 'YouTube',\\n        url: video.url,\\n        title: video.title || 'YouTube Video',\\n        engagement: video.views || 0,\\n        type: 'Video'\\n      });\\n    });\\n  }\\n}\\n\\nreturn items;\"},\"name\":\"Transform Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"notes\":\"Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics\"},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"leftValue\":\"{{ $json.platform }}\",\"rightValue\":\"LinkedIn\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}]}},\"name\":\"Filter Content\",\"typeVersion\":2.2,\"onError\":\"continueRegularOutput\",\"notes\":\"Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets\"},{\"id\":\"googleSheets_1\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1450,300],\"parameters\":{\"operation\":\"append\",\"range\":\"A:E\",\"columns\":{\"value\":{\"Platform\":\"={{ $json.platform }}\",\"URL\":\"={{ $json.url }}\",\"Title\":\"={{ $json.title }}\",\"Engagement\":\"={{ $json.engagement }}\",\"Type\":\"={{ $json.type }}\"}}},\"name\":\"Save to Google Sheets\",\"typeVersion\":4.6,\"onError\":\"continueErrorOutput\",\"notes\":\"Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis\"},{\"id\":\"youTube_1\",\"type\":\"n8n-nodes-base.youTube\",\"position\":[550,500],\"parameters\":{\"operation\":\"search\",\"part\":[\"snippet\",\"statistics\"],\"q\":\"={{ $json.keyword }}\",\"order\":\"viewCount\",\"maxResults\":10},\"name\":\"YouTube Search\",\"typeVersion\":2,\"onError\":\"continueErrorOutput\",\"notes\":\"Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics\"},{\"id\":\"linkedIn_1\",\"type\":\"n8n-nodes-base.linkedIn\",\"position\":[550,100],\"parameters\":{\"operation\":\"post\",\"person\":\"\"},\"name\":\"LinkedIn Posts\",\"typeVersion\":1,\"onError\":\"continueErrorOutput\",\"notes\":\"This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead\"}],\"connections\":{\"Webhook Trigger\":{\"main\":[[{\"node\":\"Research Agent\",\"type\":\"main\",\"index\":0}]]},\"Research Agent\":{\"main\":[[{\"node\":\"Transform Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Data\":{\"main\":[[{\"node\":\"Filter Content\",\"type\":\"main\",\"index\":0}]]},\"Filter Content\":{\"main\":[[{\"node\":\"Save to Google Sheets\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Save to Google Sheets\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-12T15:08:06.819Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:08:09.015Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-12T15:08:09.015Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Research Agent - LinkedIn & YouTube Scraper to Google Sheets\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"research-agent\",\"httpMethod\":\"POST\",\"responseMode\":\"onReceived\"},\"name\":\"Webhook Trigger\",\"typeVersion\":2,\"onError\":\"stopWorkflow\",\"notes\":\"Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input\"},{\"id\":\"agent_1\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[550,300],\"parameters\":{\"text\":\"{{ $json.keyword }}\"},\"name\":\"Research Agent\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"notes\":\"Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,300],\"parameters\":{\"jsCode\":\"// Transform agent output into structured data for Google Sheets\\nconst items = [];\\n\\n// Process agent response\\nif ($input.all().length > 0) {\\n  const agentData = $input.all()[0].json;\\n  \\n  // Extract LinkedIn posts\\n  if (agentData.linkedinPosts) {\\n    agentData.linkedinPosts.forEach(post => {\\n      items.push({\\n        platform: 'LinkedIn',\\n        url: post.url,\\n        title: post.title || 'LinkedIn Post',\\n        engagement: post.likes || 0,\\n        type: 'Post'\\n      });\\n    });\\n  }\\n  \\n  // Extract YouTube videos\\n  if (agentData.youtubeVideos) {\\n    agentData.youtubeVideos.forEach(video => {\\n      items.push({\\n        platform: 'YouTube',\\n        url: video.url,\\n        title: video.title || 'YouTube Video',\\n        engagement: video.views || 0,\\n        type: 'Video'\\n      });\\n    });\\n  }\\n}\\n\\nreturn items;\"},\"name\":\"Transform Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"notes\":\"Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics\"},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"leftValue\":\"{{ $json.platform }}\",\"rightValue\":\"LinkedIn\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}]}},\"name\":\"Filter Content\",\"typeVersion\":2.2,\"onError\":\"continueRegularOutput\",\"notes\":\"Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets\"},{\"id\":\"googleSheets_1\",\"type\":\"n8n-nodes-base.googleSheets\",\"position\":[1450,300],\"parameters\":{\"operation\":\"append\",\"range\":\"A:E\",\"columns\":{\"value\":{\"Platform\":\"={{ $json.platform }}\",\"URL\":\"={{ $json.url }}\",\"Title\":\"={{ $json.title }}\",\"Engagement\":\"={{ $json.engagement }}\",\"Type\":\"={{ $json.type }}\"}}},\"name\":\"Save to Google Sheets\",\"typeVersion\":4.6,\"onError\":\"continueErrorOutput\",\"notes\":\"Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis\"},{\"id\":\"youTube_1\",\"type\":\"n8n-nodes-base.youTube\",\"position\":[550,500],\"parameters\":{\"operation\":\"search\",\"part\":[\"snippet\",\"statistics\"],\"q\":\"={{ $json.keyword }}\",\"order\":\"viewCount\",\"maxResults\":10},\"name\":\"YouTube Search\",\"typeVersion\":2,\"onError\":\"continueErrorOutput\",\"notes\":\"Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics\"},{\"id\":\"linkedIn_1\",\"type\":\"n8n-nodes-base.linkedIn\",\"position\":[550,100],\"parameters\":{\"operation\":\"post\",\"person\":\"\"},\"name\":\"LinkedIn Posts\",\"typeVersion\":1,\"onError\":\"continueErrorOutput\",\"notes\":\"This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead\"}],\"connections\":{\"Webhook Trigger\":{\"main\":[[{\"node\":\"Research Agent\",\"type\":\"main\",\"index\":0}]]},\"Research Agent\":{\"main\":[[{\"node\":\"Transform Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Data\":{\"main\":[[{\"node\":\"Filter Content\",\"type\":\"main\",\"index\":0}]]},\"Filter Content\":{\"main\":[[{\"node\":\"Save to Google Sheets\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Save to Google Sheets\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-12T15:08:09.190Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-12T15:08:09.907Z",
          "level": "INFO",
          "source": "Validation",
          "message": "Applied fix 1: Replaced 7 nodes (attempt 1)"
        },
        {
          "timestamp": "2025-08-12T15:08:09.907Z",
          "level": "INFO",
          "source": "Validation",
          "message": "Applied fix 2: Replaced 1 nodes (attempt 2)"
        },
        {
          "timestamp": "2025-08-12T15:08:09.907Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Validation completed in 3 attempts"
        },
        {
          "timestamp": "2025-08-12T15:08:09.907Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Applied 2 fixes"
        },
        {
          "timestamp": "2025-08-12T15:08:09.998Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-12T15:08:10.000Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1755011180180",
        "createdAt": "2025-08-12T15:06:20.586Z",
        "state": {
          "phase": "documentation",
          "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "allEntries",
                "responseMode": "lastNode",
                "alwaysOutputData": true
              },
              "purpose": "Set up a webhook to receive data from external services",
              "displayName": "receive webhook",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "config": {
                "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                "dataMode": "autoMap",
                "operation": "append"
              },
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "displayName": "use google sheets as tool",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "config": {
                "conditions": {
                  "conditions": [
                    {
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "leftValue": "",
                      "rightValue": ""
                    }
                  ]
                }
              },
              "purpose": "Filter items based on conditions",
              "displayName": "filter data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "={{ $json.query }}",
                "outputType": "output",
                "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
              },
              "purpose": "AI agent with multiple tools for complex automation",
              "displayName": "multi tool ai agent",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_5",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "search_node_1",
            "search_node_2"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Webhook Trigger",
                "type": "n8n-nodes-base.webhook",
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "research-agent",
                  "httpMethod": "POST",
                  "responseMode": "onReceived"
                },
                "typeVersion": 2
              },
              {
                "id": "agent_1",
                "name": "Research Agent",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "text": "{{ $json.keyword }}"
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Transform Data",
                "type": "n8n-nodes-base.code",
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "typeVersion": 2
              },
              {
                "id": "if_1",
                "name": "Filter Content",
                "type": "n8n-nodes-base.if",
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn"
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "googleSheets_1",
                "name": "Save to Google Sheets",
                "type": "n8n-nodes-base.googleSheets",
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "onError": "continueErrorOutput",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "URL": "={{ $json.url }}",
                      "Type": "={{ $json.type }}",
                      "Title": "={{ $json.title }}",
                      "Platform": "={{ $json.platform }}",
                      "Engagement": "={{ $json.engagement }}"
                    }
                  },
                  "operation": "append"
                },
                "typeVersion": 4.6
              },
              {
                "id": "youTube_1",
                "name": "YouTube Search",
                "type": "n8n-nodes-base.youTube",
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "onError": "continueErrorOutput",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "q": "={{ $json.keyword }}",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "order": "viewCount",
                  "operation": "search",
                  "maxResults": 10
                },
                "typeVersion": 2
              },
              {
                "id": "linkedIn_1",
                "name": "LinkedIn Posts",
                "type": "n8n-nodes-base.linkedIn",
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "onError": "continueErrorOutput",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "person": "",
                  "operation": "post"
                },
                "typeVersion": 1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "agent_1"
              ],
              "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
            },
            {
              "type": "storage",
              "nodeIds": [
                "googleSheets_1"
              ],
              "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode",
                  "alwaysOutputData": true
                },
                "purpose": "Set up a webhook to receive data from external services",
                "displayName": "receive webhook",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.googleSheets",
                "config": {
                  "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                  "dataMode": "autoMap",
                  "operation": "append"
                },
                "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                "displayName": "use google sheets as tool",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.if",
                "config": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "",
                        "rightValue": ""
                      }
                    ]
                  }
                },
                "purpose": "Filter items based on conditions",
                "displayName": "filter data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "={{ $json.query }}",
                  "outputType": "output",
                  "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                },
                "purpose": "AI agent with multiple tools for complex automation",
                "displayName": "multi tool ai agent",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.linkedIn",
                "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.youTube",
                "purpose": "Access YouTube API to scrape top performing videos based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:23.254Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "research-agent-trigger",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                },
                "typeVersion": "1",
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Set up a webhook to receive data from external services",
              "nodeType": "nodes-base.webhook",
              "timestamp": "2025-08-12T15:07:23.497Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "parameters": {
                  "range": "A:C",
                  "columns": {
                    "value": {
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Platform": "={{ $json.platform }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                  "dataMode": "defineBelow",
                  "operation": "append"
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_5",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "nodeType": "nodes-base.googleSheets",
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        },
                        "leftValue": "{{ $json.url }}",
                        "rightValue": "linkedin.com"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_3",
              "purpose": "Filter items based on conditions",
              "nodeType": "nodes-base.if",
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "parameters": {
                  "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "nodeId": "task_node_4",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "parameters": {
                  "text": "{{ $json.keyword }}",
                  "outputType": "output",
                  "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_2",
              "purpose": "AI agent with multiple tools for complex automation",
              "nodeType": "nodes-langchain.agent",
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.438Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
              "timestamp": "2025-08-12T15:07:24.438Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "timestamp": "2025-08-12T15:07:24.587Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.711Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
              "timestamp": "2025-08-12T15:07:24.711Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "timestamp": "2025-08-12T15:07:24.878Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:25.064Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:25.064Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-12T15:07:50.768Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-12T15:08:09.191Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "googleSheets_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "youTube_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "linkedIn_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "googleSheets_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "youTube_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "linkedIn_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "research-agent",
                      "httpMethod": "POST",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4.6
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-12T15:08:09.712Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "workflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                },
                "name": "Webhook Trigger",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "agent_1",
                "type": "n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                  "text": "{{ $json.keyword }}"
                },
                "name": "Research Agent",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "name": "Transform Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                  "conditions": {
                    "conditions": [
                      {
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ]
                  }
                },
                "name": "Filter Content",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "googleSheets_1",
                "type": "n8n-nodes-base.googleSheets",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                  "operation": "append",
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "Platform": "={{ $json.platform }}",
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Engagement": "={{ $json.engagement }}",
                      "Type": "={{ $json.type }}"
                    }
                  }
                },
                "name": "Save to Google Sheets",
                "typeVersion": 4,
                "onError": "continueErrorOutput"
              },
              {
                "id": "youTube_1",
                "type": "n8n-nodes-base.youTube",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                  "operation": "search",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "q": "={{ $json.keyword }}",
                  "order": "viewCount",
                  "maxResults": 10
                },
                "name": "YouTube Search",
                "typeVersion": 2,
                "onError": "continueErrorOutput"
              },
              {
                "id": "linkedIn_1",
                "type": "n8n-nodes-base.linkedIn",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                  "operation": "post",
                  "person": ""
                },
                "name": "LinkedIn Posts",
                "typeVersion": 1,
                "onError": "continueErrorOutput"
              }
            ],
            "connections": {
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "output": {
          "validatedWorkflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "research-agent",
                  "httpMethod": "POST",
                  "responseMode": "onReceived"
                },
                "name": "Webhook Trigger",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "text": "{{ $json.keyword }}"
                },
                "name": "Research Agent",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "name": "Transform Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ]
                  }
                },
                "name": "Filter Content",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput",
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets"
              },
              {
                "id": "googleSheets_1",
                "type": "n8n-nodes-base.googleSheets",
                "position": [
                  1450,
                  300
                ],
                "parameters": {
                  "operation": "append",
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "Platform": "={{ $json.platform }}",
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Engagement": "={{ $json.engagement }}",
                      "Type": "={{ $json.type }}"
                    }
                  }
                },
                "name": "Save to Google Sheets",
                "typeVersion": 4.6,
                "onError": "continueErrorOutput",
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis"
              },
              {
                "id": "youTube_1",
                "type": "n8n-nodes-base.youTube",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "operation": "search",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "q": "={{ $json.keyword }}",
                  "order": "viewCount",
                  "maxResults": 10
                },
                "name": "YouTube Search",
                "typeVersion": 2,
                "onError": "continueErrorOutput",
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics"
              },
              {
                "id": "linkedIn_1",
                "type": "n8n-nodes-base.linkedIn",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "operation": "post",
                  "person": ""
                },
                "name": "LinkedIn Posts",
                "typeVersion": 1,
                "onError": "continueErrorOutput",
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead"
              }
            ],
            "connections": {
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "report": {
            "initial": {
              "workflow": {
                "errors": [
                  {
                    "node": "Webhook Trigger",
                    "message": {
                      "type": "missing_required",
                      "property": "path",
                      "message": "Required property 'Path' is missing",
                      "fix": "Add path to your configuration"
                    }
                  },
                  {
                    "node": "Research Agent",
                    "message": "Unknown node type: \"n8n-nodes-langchain.agent\". Node types must include the package prefix (e.g., \"n8n-nodes-base.webhook\", not \"webhook\" or \"nodes-base.webhook\")."
                  },
                  {
                    "node": "Webhook Trigger",
                    "message": "Node-level properties notes are in the wrong location. They must be at the node level, not inside parameters.",
                    "details": {
                      "fix": "Move these properties from node.parameters to the node level. Example:\n{\n  \"name\": \"Webhook Trigger\",\n  \"type\": \"n8n-nodes-base.webhook\",\n  \"parameters\": { /* operation-specific params */ },\n  \"onError\": \"continueErrorOutput\",  // ✅ Correct location\n  \"retryOnFail\": true,               // ✅ Correct location\n  \"executeOnce\": true,               // ✅ Correct location\n  \"disabled\": false,                 // ✅ Correct location\n  \"credentials\": { /* ... */ }       // ✅ Correct location\n}"
                    }
                  },
                  {
                    "node": "Research Agent",
                    "message": "Node-level properties notes are in the wrong location. They must be at the node level, not inside parameters.",
                    "details": {
                      "fix": "Move these properties from node.parameters to the node level. Example:\n{\n  \"name\": \"Research Agent\",\n  \"type\": \"n8n-nodes-langchain.agent\",\n  \"parameters\": { /* operation-specific params */ },\n  \"onError\": \"continueErrorOutput\",  // ✅ Correct location\n  \"retryOnFail\": true,               // ✅ Correct location\n  \"executeOnce\": true,               // ✅ Correct location\n  \"disabled\": false,                 // ✅ Correct location\n  \"credentials\": { /* ... */ }       // ✅ Correct location\n}"
                    }
                  },
                  {
                    "node": "Transform Data",
                    "message": "Node-level properties notes are in the wrong location. They must be at the node level, not inside parameters.",
                    "details": {
                      "fix": "Move these properties from node.parameters to the node level. Example:\n{\n  \"name\": \"Transform Data\",\n  \"type\": \"n8n-nodes-base.code\",\n  \"parameters\": { /* operation-specific params */ },\n  \"onError\": \"continueErrorOutput\",  // ✅ Correct location\n  \"retryOnFail\": true,               // ✅ Correct location\n  \"executeOnce\": true,               // ✅ Correct location\n  \"disabled\": false,                 // ✅ Correct location\n  \"credentials\": { /* ... */ }       // ✅ Correct location\n}"
                    }
                  },
                  {
                    "node": "Filter Content",
                    "message": "Node-level properties notes are in the wrong location. They must be at the node level, not inside parameters.",
                    "details": {
                      "fix": "Move these properties from node.parameters to the node level. Example:\n{\n  \"name\": \"Filter Content\",\n  \"type\": \"n8n-nodes-base.if\",\n  \"parameters\": { /* operation-specific params */ },\n  \"onError\": \"continueErrorOutput\",  // ✅ Correct location\n  \"retryOnFail\": true,               // ✅ Correct location\n  \"executeOnce\": true,               // ✅ Correct location\n  \"disabled\": false,                 // ✅ Correct location\n  \"credentials\": { /* ... */ }       // ✅ Correct location\n}"
                    }
                  },
                  {
                    "node": "Save to Google Sheets",
                    "message": "Node-level properties notes are in the wrong location. They must be at the node level, not inside parameters.",
                    "details": {
                      "fix": "Move these properties from node.parameters to the node level. Example:\n{\n  \"name\": \"Save to Google Sheets\",\n  \"type\": \"n8n-nodes-base.googleSheets\",\n  \"parameters\": { /* operation-specific params */ },\n  \"onError\": \"continueErrorOutput\",  // ✅ Correct location\n  \"retryOnFail\": true,               // ✅ Correct location\n  \"executeOnce\": true,               // ✅ Correct location\n  \"disabled\": false,                 // ✅ Correct location\n  \"credentials\": { /* ... */ }       // ✅ Correct location\n}"
                    }
                  },
                  {
                    "node": "YouTube Search",
                    "message": "Node-level properties notes are in the wrong location. They must be at the node level, not inside parameters.",
                    "details": {
                      "fix": "Move these properties from node.parameters to the node level. Example:\n{\n  \"name\": \"YouTube Search\",\n  \"type\": \"n8n-nodes-base.youTube\",\n  \"parameters\": { /* operation-specific params */ },\n  \"onError\": \"continueErrorOutput\",  // ✅ Correct location\n  \"retryOnFail\": true,               // ✅ Correct location\n  \"executeOnce\": true,               // ✅ Correct location\n  \"disabled\": false,                 // ✅ Correct location\n  \"credentials\": { /* ... */ }       // ✅ Correct location\n}"
                    }
                  },
                  {
                    "node": "LinkedIn Posts",
                    "message": "Node-level properties notes are in the wrong location. They must be at the node level, not inside parameters.",
                    "details": {
                      "fix": "Move these properties from node.parameters to the node level. Example:\n{\n  \"name\": \"LinkedIn Posts\",\n  \"type\": \"n8n-nodes-base.linkedIn\",\n  \"parameters\": { /* operation-specific params */ },\n  \"onError\": \"continueErrorOutput\",  // ✅ Correct location\n  \"retryOnFail\": true,               // ✅ Correct location\n  \"executeOnce\": true,               // ✅ Correct location\n  \"disabled\": false,                 // ✅ Correct location\n  \"credentials\": { /* ... */ }       // ✅ Correct location\n}"
                    }
                  },
                  {
                    "node": "workflow",
                    "message": "Workflow validation failed: e.message.includes is not a function"
                  },
                  {
                    "node": "Webhook Trigger",
                    "message": "Outdated typeVersion: 1. Latest is 2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Filter Content",
                    "message": "Outdated typeVersion: 2. Latest is 2.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Save to Google Sheets",
                    "message": "Outdated typeVersion: 4. Latest is 4.6",
                    "type": "typeVersion",
                    "severity": "error"
                  }
                ],
                "warnings": [
                  {
                    "node": "YouTube Search",
                    "message": "Node is not connected to any other nodes"
                  },
                  {
                    "node": "LinkedIn Posts",
                    "message": "Node is not connected to any other nodes"
                  },
                  {
                    "node": "YouTube Search",
                    "message": "Expression warning: q: Using $json but node might not have input data"
                  },
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  },
                  {
                    "node": "Research Agent",
                    "message": "AI Agent has no tools connected. Consider adding tools to enhance agent capabilities."
                  }
                ],
                "valid": false,
                "statistics": {
                  "totalNodes": 7,
                  "enabledNodes": 7,
                  "triggerNodes": 1,
                  "validConnections": 5,
                  "invalidConnections": 0,
                  "expressionsValidated": 4,
                  "errorCount": 10,
                  "warningCount": 8
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "fixesApplied": [
              {
                "type": "entity-replacement",
                "attempt": 1,
                "timestamp": "2025-08-12T15:08:06.602Z",
                "description": "Replaced 7 nodes",
                "reasoning": [
                  "Added required 'path' parameter to Webhook Trigger with value 'research-agent'",
                  "Fixed node type for Research Agent from 'n8n-nodes-langchain.agent' to '@n8n/n8n-nodes-langchain.agent' with proper package prefix",
                  "Moved all 'notes' properties from parameters to node level for all nodes",
                  "Updated typeVersion for Webhook Trigger from 1 to 2 (latest)",
                  "Updated typeVersion for Filter Content from 2 to 2.2 (latest)",
                  "Updated typeVersion for Save to Google Sheets from 4 to 4.6 (latest)",
                  "Added proper webhook configuration with httpMethod and responseMode"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "webhook_1",
                    "agent_1",
                    "code_1",
                    "if_1",
                    "googleSheets_1",
                    "youTube_1",
                    "linkedIn_1"
                  ],
                  "connections": false
                }
              },
              {
                "type": "entity-replacement",
                "attempt": 2,
                "timestamp": "2025-08-12T15:08:09.015Z",
                "description": "Replaced 1 nodes",
                "reasoning": [
                  "Updated typeVersion from 1 to 2 for the Research Agent node to match the latest version requirement"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "agent_1"
                  ],
                  "connections": false
                }
              }
            ],
            "final": {
              "workflow": {
                "errors": [],
                "warnings": [
                  {
                    "node": "YouTube Search",
                    "message": "Node is not connected to any other nodes"
                  },
                  {
                    "node": "LinkedIn Posts",
                    "message": "Node is not connected to any other nodes"
                  },
                  {
                    "node": "YouTube Search",
                    "message": "Expression warning: q: Using $json but node might not have input data"
                  },
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  },
                  {
                    "node": "Research Agent",
                    "message": "AI Agent has no tools connected. Consider adding tools to enhance agent capabilities."
                  }
                ],
                "valid": true,
                "statistics": {
                  "totalNodes": 7,
                  "enabledNodes": 7,
                  "triggerNodes": 1,
                  "validConnections": 5,
                  "invalidConnections": 0,
                  "expressionsValidated": 4,
                  "errorCount": 0,
                  "warningCount": 5
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "attempts": 3
          }
        },
        "transformations": [
          "Validation Check",
          "Error Detection",
          "Automatic Fixes"
        ]
      },
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "valid": true
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "validation",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:23.254Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "research-agent-trigger",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode"
                    },
                    "typeVersion": "1",
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Set up a webhook to receive data from external services",
                  "nodeType": "nodes-base.webhook",
                  "timestamp": "2025-08-12T15:07:23.497Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "parameters": {
                      "range": "A:C",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                      "dataMode": "defineBelow",
                      "operation": "append"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "nodeType": "nodes-base.googleSheets",
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "contains"
                            },
                            "leftValue": "{{ $json.url }}",
                            "rightValue": "linkedin.com"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Filter items based on conditions",
                  "nodeType": "nodes-base.if",
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "parameters": {
                      "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    }
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "outputType": "output",
                      "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_2",
                  "purpose": "AI agent with multiple tools for complex automation",
                  "nodeType": "nodes-langchain.agent",
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.438Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
                  "timestamp": "2025-08-12T15:07:24.438Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "timestamp": "2025-08-12T15:07:24.587Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.711Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
                  "timestamp": "2025-08-12T15:07:24.711Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "timestamp": "2025-08-12T15:07:24.878Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.768Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}",
                          "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "googleSheets_1"
                      ],
                      "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                    }
                  ],
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.987Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "documentation",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "research-agent",
                      "httpMethod": "POST",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4.6
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:23.254Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "research-agent-trigger",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode"
                    },
                    "typeVersion": "1",
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Set up a webhook to receive data from external services",
                  "nodeType": "nodes-base.webhook",
                  "timestamp": "2025-08-12T15:07:23.497Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "parameters": {
                      "range": "A:C",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                      "dataMode": "defineBelow",
                      "operation": "append"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "nodeType": "nodes-base.googleSheets",
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "contains"
                            },
                            "leftValue": "{{ $json.url }}",
                            "rightValue": "linkedin.com"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Filter items based on conditions",
                  "nodeType": "nodes-base.if",
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "parameters": {
                      "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    }
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "outputType": "output",
                      "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_2",
                  "purpose": "AI agent with multiple tools for complex automation",
                  "nodeType": "nodes-langchain.agent",
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.438Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
                  "timestamp": "2025-08-12T15:07:24.438Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "timestamp": "2025-08-12T15:07:24.587Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.711Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
                  "timestamp": "2025-08-12T15:07:24.711Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "timestamp": "2025-08-12T15:07:24.878Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.768Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}",
                          "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "googleSheets_1"
                      ],
                      "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                    }
                  ],
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-12T15:08:09.191Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "googleSheets_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "youTube_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "linkedIn_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "googleSheets_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "youTube_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "linkedIn_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "research-agent",
                          "httpMethod": "POST",
                          "responseMode": "onReceived"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4.6
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "documentation": {
      "name": "Documentation",
      "success": true,
      "metrics": {
        "startTime": 1755011290005,
        "endTime": 1755011290667,
        "duration": 662,
        "memoryUsage": {
          "heapUsed": 1357904,
          "heapTotal": 38027264,
          "external": 7279167
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-12T15:08:10.005Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting documentation phase"
        },
        {
          "timestamp": "2025-08-12T15:08:10.005Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for documentation phase"
        },
        {
          "timestamp": "2025-08-12T15:08:10.530Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Added 6 sticky notes for documentation"
        },
        {
          "timestamp": "2025-08-12T15:08:10.667Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-12T15:08:10.667Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1755011180180",
        "createdAt": "2025-08-12T15:06:20.586Z",
        "state": {
          "phase": "complete",
          "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "allEntries",
                "responseMode": "lastNode",
                "alwaysOutputData": true
              },
              "purpose": "Set up a webhook to receive data from external services",
              "displayName": "receive webhook",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.googleSheets",
              "config": {
                "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                "dataMode": "autoMap",
                "operation": "append"
              },
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "displayName": "use google sheets as tool",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.if",
              "config": {
                "conditions": {
                  "conditions": [
                    {
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "leftValue": "",
                      "rightValue": ""
                    }
                  ]
                }
              },
              "purpose": "Filter items based on conditions",
              "displayName": "filter data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "={{ $json.query }}",
                "outputType": "output",
                "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
              },
              "purpose": "AI agent with multiple tools for complex automation",
              "displayName": "multi tool ai agent",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.linkedIn",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.youTube",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_5",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "search_node_1",
            "search_node_2"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Webhook Trigger",
                "type": "n8n-nodes-base.webhook",
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "onError": "stopWorkflow",
                "position": [
                  470,
                  300
                ],
                "parameters": {
                  "path": "research-agent",
                  "httpMethod": "POST",
                  "responseMode": "onReceived"
                },
                "typeVersion": 2
              },
              {
                "id": "agent_1",
                "name": "Research Agent",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "onError": "continueRegularOutput",
                "position": [
                  870,
                  300
                ],
                "parameters": {
                  "text": "{{ $json.keyword }}"
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Transform Data",
                "type": "n8n-nodes-base.code",
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "onError": "continueRegularOutput",
                "position": [
                  1270,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "typeVersion": 2
              },
              {
                "id": "if_1",
                "name": "Filter Content",
                "type": "n8n-nodes-base.if",
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "onError": "continueRegularOutput",
                "position": [
                  1670,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn"
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "googleSheets_1",
                "name": "Save to Google Sheets",
                "type": "n8n-nodes-base.googleSheets",
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "onError": "continueErrorOutput",
                "position": [
                  2070,
                  300
                ],
                "parameters": {
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "URL": "={{ $json.url }}",
                      "Type": "={{ $json.type }}",
                      "Title": "={{ $json.title }}",
                      "Platform": "={{ $json.platform }}",
                      "Engagement": "={{ $json.engagement }}"
                    }
                  },
                  "operation": "append"
                },
                "typeVersion": 4.6
              },
              {
                "id": "youTube_1",
                "name": "YouTube Search",
                "type": "n8n-nodes-base.youTube",
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "onError": "continueErrorOutput",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "q": "={{ $json.keyword }}",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "order": "viewCount",
                  "operation": "search",
                  "maxResults": 10
                },
                "typeVersion": 2
              },
              {
                "id": "linkedIn_1",
                "name": "LinkedIn Posts",
                "type": "n8n-nodes-base.linkedIn",
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "onError": "continueErrorOutput",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "person": "",
                  "operation": "post"
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_triggers_1755011290138",
                "name": "Triggers Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  390,
                  -140
                ],
                "parameters": {
                  "color": 5,
                  "width": 310,
                  "height": 780,
                  "content": "## 📥 Triggers\nWebhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_inputs_1755011290138",
                "name": "Inputs Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  790,
                  -140
                ],
                "parameters": {
                  "color": 5,
                  "width": 310,
                  "height": 780,
                  "content": "## 📊 Inputs\nAI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_transforms_1755011290138",
                "name": "Transform Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1190,
                  -140
                ],
                "parameters": {
                  "color": 5,
                  "width": 310,
                  "height": 780,
                  "content": "## ⚙️ Transform\nTransform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_decision_1755011290138",
                "name": "Decision Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1590,
                  -140
                ],
                "parameters": {
                  "color": 2,
                  "width": 310,
                  "height": 780,
                  "content": "## 🔀 Decision\nFilter and route content based on platform type to ensure proper categorization in the final output."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_storage_1755011290138",
                "name": "Storage Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1990,
                  -140
                ],
                "parameters": {
                  "color": 5,
                  "width": 310,
                  "height": 780,
                  "content": "## 💾 Storage\nSave all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_promo_1755011290139",
                "name": "Workflow Overview",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  50,
                  -140
                ],
                "parameters": {
                  "color": 4,
                  "width": 280,
                  "height": 780,
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                },
                "typeVersion": 1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "agent_1"
              ],
              "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
            },
            {
              "type": "storage",
              "nodeIds": [
                "googleSheets_1"
              ],
              "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode",
                  "alwaysOutputData": true
                },
                "purpose": "Set up a webhook to receive data from external services",
                "displayName": "receive webhook",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.googleSheets",
                "config": {
                  "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                  "dataMode": "autoMap",
                  "operation": "append"
                },
                "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                "displayName": "use google sheets as tool",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.if",
                "config": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "leftValue": "",
                        "rightValue": ""
                      }
                    ]
                  }
                },
                "purpose": "Filter items based on conditions",
                "displayName": "filter data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "={{ $json.query }}",
                  "outputType": "output",
                  "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                },
                "purpose": "AI agent with multiple tools for complex automation",
                "displayName": "multi tool ai agent",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-12T15:06:38.245Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.linkedIn",
                "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.youTube",
                "purpose": "Access YouTube API to scrape top performing videos based on keywords"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-12T15:06:38.440Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:23.254Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "research-agent-trigger",
                  "httpMethod": "POST",
                  "responseData": "allEntries",
                  "responseMode": "lastNode"
                },
                "typeVersion": "1",
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Set up a webhook to receive data from external services",
              "nodeType": "nodes-base.webhook",
              "timestamp": "2025-08-12T15:07:23.497Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                "parameters": {
                  "range": "A:C",
                  "columns": {
                    "value": {
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Platform": "={{ $json.platform }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                  "dataMode": "defineBelow",
                  "operation": "append"
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_5",
              "purpose": "Use Google Sheets as an AI tool for reading/writing data",
              "nodeType": "nodes-base.googleSheets",
              "timestamp": "2025-08-12T15:07:23.724Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "operator": {
                          "type": "string",
                          "operation": "contains"
                        },
                        "leftValue": "{{ $json.url }}",
                        "rightValue": "linkedin.com"
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_3",
              "purpose": "Filter items based on conditions",
              "nodeType": "nodes-base.if",
              "timestamp": "2025-08-12T15:07:23.936Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                "parameters": {
                  "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "nodeId": "task_node_4",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "timestamp": "2025-08-12T15:07:24.122Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                "parameters": {
                  "text": "{{ $json.keyword }}",
                  "outputType": "output",
                  "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                },
                "typeVersion": "1"
              },
              "nodeId": "task_node_2",
              "purpose": "AI agent with multiple tools for complex automation",
              "nodeType": "nodes-langchain.agent",
              "timestamp": "2025-08-12T15:07:24.251Z"
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.438Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
              "timestamp": "2025-08-12T15:07:24.438Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                "parameters": {
                  "person": "",
                  "postAs": "person",
                  "resource": "post",
                  "binaryPropertyName": "data"
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
              "nodeType": "nodes-base.linkedIn",
              "timestamp": "2025-08-12T15:07:24.587Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:24.711Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
              "timestamp": "2025-08-12T15:07:24.711Z",
              "operationIndex": 0
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                "parameters": {
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "filters": {
                    "q": "{{ $json.keyword }}"
                  },
                  "options": {
                    "order": "viewCount",
                    "maxResults": 50
                  },
                  "resource": "video",
                  "operation": "getAll"
                },
                "typeVersion": 1
              },
              "nodeId": "search_node_2",
              "purpose": "Access YouTube API to scrape top performing videos based on keywords",
              "nodeType": "nodes-base.youTube",
              "timestamp": "2025-08-12T15:07:24.878Z"
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-12T15:07:25.064Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-12T15:07:25.064Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-12T15:07:50.768Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-12T15:07:50.987Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-12T15:08:09.191Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "googleSheets_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "youTube_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "linkedIn_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.466Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "googleSheets_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "youTube_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "validateNode",
              "nodeId": "linkedIn_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "research-agent",
                      "httpMethod": "POST",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4.6
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-12T15:08:09.712Z"
            },
            {
              "type": "setPhase",
              "phase": "documentation",
              "timestamp": "2025-08-12T15:08:10.139Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "stopWorkflow",
                    "position": [
                      470,
                      300
                    ],
                    "parameters": {
                      "path": "research-agent",
                      "httpMethod": "POST",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      870,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "onError": "continueRegularOutput",
                    "position": [
                      1270,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      1670,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "onError": "continueErrorOutput",
                    "position": [
                      2070,
                      300
                    ],
                    "parameters": {
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4.6
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_triggers_1755011290138",
                    "name": "Triggers Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      390,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## 📥 Triggers\nWebhook receives keyword input to initiate the research workflow for scraping top performing content."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1755011290138",
                    "name": "Inputs Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      790,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## 📊 Inputs\nAI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1755011290138",
                    "name": "Transform Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1190,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## ⚙️ Transform\nTransform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1755011290138",
                    "name": "Decision Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1590,
                      -140
                    ],
                    "parameters": {
                      "color": 2,
                      "width": 310,
                      "height": 780,
                      "content": "## 🔀 Decision\nFilter and route content based on platform type to ensure proper categorization in the final output."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_storage_1755011290138",
                    "name": "Storage Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1990,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## 💾 Storage\nSave all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_promo_1755011290139",
                    "name": "Workflow Overview",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      50,
                      -140
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 780,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-12T15:08:10.377Z"
            },
            {
              "type": "completePhase",
              "phase": "documentation",
              "timestamp": "2025-08-12T15:08:10.377Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "validatedWorkflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  470,
                  300
                ],
                "parameters": {
                  "path": "research-agent",
                  "httpMethod": "POST",
                  "responseMode": "onReceived"
                },
                "name": "Webhook Trigger",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  870,
                  300
                ],
                "parameters": {
                  "text": "{{ $json.keyword }}"
                },
                "name": "Research Agent",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  1270,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "name": "Transform Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1670,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ]
                  }
                },
                "name": "Filter Content",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput",
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets"
              },
              {
                "id": "googleSheets_1",
                "type": "n8n-nodes-base.googleSheets",
                "position": [
                  2070,
                  300
                ],
                "parameters": {
                  "operation": "append",
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "Platform": "={{ $json.platform }}",
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Engagement": "={{ $json.engagement }}",
                      "Type": "={{ $json.type }}"
                    }
                  }
                },
                "name": "Save to Google Sheets",
                "typeVersion": 4.6,
                "onError": "continueErrorOutput",
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis"
              },
              {
                "id": "youTube_1",
                "type": "n8n-nodes-base.youTube",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "operation": "search",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "q": "={{ $json.keyword }}",
                  "order": "viewCount",
                  "maxResults": 10
                },
                "name": "YouTube Search",
                "typeVersion": 2,
                "onError": "continueErrorOutput",
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics"
              },
              {
                "id": "linkedIn_1",
                "type": "n8n-nodes-base.linkedIn",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "operation": "post",
                  "person": ""
                },
                "name": "LinkedIn Posts",
                "typeVersion": 1,
                "onError": "continueErrorOutput",
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead"
              }
            ],
            "connections": {
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          }
        },
        "output": {
          "documentedWorkflow": {
            "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  470,
                  300
                ],
                "parameters": {
                  "path": "research-agent",
                  "httpMethod": "POST",
                  "responseMode": "onReceived"
                },
                "name": "Webhook Trigger",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  870,
                  300
                ],
                "parameters": {
                  "text": "{{ $json.keyword }}"
                },
                "name": "Research Agent",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  1270,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                },
                "name": "Transform Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics"
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1670,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "leftValue": "{{ $json.platform }}",
                        "rightValue": "LinkedIn",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ]
                  }
                },
                "name": "Filter Content",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput",
                "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets"
              },
              {
                "id": "googleSheets_1",
                "type": "n8n-nodes-base.googleSheets",
                "position": [
                  2070,
                  300
                ],
                "parameters": {
                  "operation": "append",
                  "range": "A:E",
                  "columns": {
                    "value": {
                      "Platform": "={{ $json.platform }}",
                      "URL": "={{ $json.url }}",
                      "Title": "={{ $json.title }}",
                      "Engagement": "={{ $json.engagement }}",
                      "Type": "={{ $json.type }}"
                    }
                  }
                },
                "name": "Save to Google Sheets",
                "typeVersion": 4.6,
                "onError": "continueErrorOutput",
                "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis"
              },
              {
                "id": "youTube_1",
                "type": "n8n-nodes-base.youTube",
                "position": [
                  550,
                  500
                ],
                "parameters": {
                  "operation": "search",
                  "part": [
                    "snippet",
                    "statistics"
                  ],
                  "q": "={{ $json.keyword }}",
                  "order": "viewCount",
                  "maxResults": 10
                },
                "name": "YouTube Search",
                "typeVersion": 2,
                "onError": "continueErrorOutput",
                "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics"
              },
              {
                "id": "linkedIn_1",
                "type": "n8n-nodes-base.linkedIn",
                "position": [
                  550,
                  100
                ],
                "parameters": {
                  "operation": "post",
                  "person": ""
                },
                "name": "LinkedIn Posts",
                "typeVersion": 1,
                "onError": "continueErrorOutput",
                "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead"
              },
              {
                "id": "sticky_triggers_1755011290138",
                "name": "Triggers Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  390,
                  -140
                ],
                "parameters": {
                  "content": "## 📥 Triggers\nWebhook receives keyword input to initiate the research workflow for scraping top performing content.",
                  "height": 780,
                  "width": 310,
                  "color": 5
                }
              },
              {
                "id": "sticky_inputs_1755011290138",
                "name": "Inputs Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  790,
                  -140
                ],
                "parameters": {
                  "content": "## 📊 Inputs\nAI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword.",
                  "height": 780,
                  "width": 310,
                  "color": 5
                }
              },
              {
                "id": "sticky_transforms_1755011290138",
                "name": "Transform Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1190,
                  -140
                ],
                "parameters": {
                  "content": "## ⚙️ Transform\nTransform and structure the scraped data from both platforms into a consistent format for Google Sheets storage.",
                  "height": 780,
                  "width": 310,
                  "color": 5
                }
              },
              {
                "id": "sticky_decision_1755011290138",
                "name": "Decision Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1590,
                  -140
                ],
                "parameters": {
                  "content": "## 🔀 Decision\nFilter and route content based on platform type to ensure proper categorization in the final output.",
                  "height": 780,
                  "width": 310,
                  "color": 2
                }
              },
              {
                "id": "sticky_storage_1755011290138",
                "name": "Storage Documentation",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1990,
                  -140
                ],
                "parameters": {
                  "content": "## 💾 Storage\nSave all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis.",
                  "height": 780,
                  "width": 310,
                  "color": 5
                }
              },
              {
                "id": "sticky_promo_1755011290139",
                "name": "Workflow Overview",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  50,
                  -140
                ],
                "parameters": {
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team.",
                  "height": 780,
                  "width": 280,
                  "color": 4
                }
              }
            ],
            "connections": {
              "Webhook Trigger": {
                "main": [
                  [
                    {
                      "node": "Research Agent",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Research Agent": {
                "main": [
                  [
                    {
                      "node": "Transform Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Data": {
                "main": [
                  [
                    {
                      "node": "Filter Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Filter Content": {
                "main": [
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Save to Google Sheets",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "stickyNotesAdded": 6
        },
        "transformations": [
          "Documentation Generation",
          "Sticky Note Placement",
          "Workflow Finalization"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "documentation",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "research-agent",
                      "httpMethod": "POST",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "onError": "continueErrorOutput",
                    "position": [
                      1450,
                      300
                    ],
                    "parameters": {
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4.6
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:23.254Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "research-agent-trigger",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode"
                    },
                    "typeVersion": "1",
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Set up a webhook to receive data from external services",
                  "nodeType": "nodes-base.webhook",
                  "timestamp": "2025-08-12T15:07:23.497Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "parameters": {
                      "range": "A:C",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                      "dataMode": "defineBelow",
                      "operation": "append"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "nodeType": "nodes-base.googleSheets",
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "contains"
                            },
                            "leftValue": "{{ $json.url }}",
                            "rightValue": "linkedin.com"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Filter items based on conditions",
                  "nodeType": "nodes-base.if",
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "parameters": {
                      "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    }
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "outputType": "output",
                      "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_2",
                  "purpose": "AI agent with multiple tools for complex automation",
                  "nodeType": "nodes-langchain.agent",
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.438Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
                  "timestamp": "2025-08-12T15:07:24.438Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "timestamp": "2025-08-12T15:07:24.587Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.711Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
                  "timestamp": "2025-08-12T15:07:24.711Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "timestamp": "2025-08-12T15:07:24.878Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.768Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}",
                          "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "googleSheets_1"
                      ],
                      "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                    }
                  ],
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-12T15:08:09.191Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "googleSheets_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "youTube_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "linkedIn_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "googleSheets_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "youTube_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "linkedIn_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "research-agent",
                          "httpMethod": "POST",
                          "responseMode": "onReceived"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4.6
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "complete",
              "userPrompt": "Create a research agent which uses apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword which I put in. Then, output a all the links to the top performing posts and YouTube videos into a Google sheets",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "allEntries",
                    "responseMode": "lastNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Set up a webhook to receive data from external services",
                  "displayName": "receive webhook",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.googleSheets",
                  "config": {
                    "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                    "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                    "dataMode": "autoMap",
                    "operation": "append"
                  },
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "displayName": "use google sheets as tool",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.if",
                  "config": {
                    "conditions": {
                      "conditions": [
                        {
                          "operator": {
                            "type": "string",
                            "operation": "equals"
                          },
                          "leftValue": "",
                          "rightValue": ""
                        }
                      ]
                    }
                  },
                  "purpose": "Filter items based on conditions",
                  "displayName": "filter data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "={{ $json.query }}",
                    "outputType": "output",
                    "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                  },
                  "purpose": "AI agent with multiple tools for complex automation",
                  "displayName": "multi tool ai agent",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.linkedIn",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.youTube",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_5",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "search_node_1",
                "search_node_2"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Webhook Trigger",
                    "type": "n8n-nodes-base.webhook",
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "stopWorkflow",
                    "position": [
                      470,
                      300
                    ],
                    "parameters": {
                      "path": "research-agent",
                      "httpMethod": "POST",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "Research Agent",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      870,
                      300
                    ],
                    "parameters": {
                      "text": "{{ $json.keyword }}"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Data",
                    "type": "n8n-nodes-base.code",
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "onError": "continueRegularOutput",
                    "position": [
                      1270,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "if_1",
                    "name": "Filter Content",
                    "type": "n8n-nodes-base.if",
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "onError": "continueRegularOutput",
                    "position": [
                      1670,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "{{ $json.platform }}",
                            "rightValue": "LinkedIn"
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "googleSheets_1",
                    "name": "Save to Google Sheets",
                    "type": "n8n-nodes-base.googleSheets",
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "onError": "continueErrorOutput",
                    "position": [
                      2070,
                      300
                    ],
                    "parameters": {
                      "range": "A:E",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Type": "={{ $json.type }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}",
                          "Engagement": "={{ $json.engagement }}"
                        }
                      },
                      "operation": "append"
                    },
                    "typeVersion": 4.6
                  },
                  {
                    "id": "youTube_1",
                    "name": "YouTube Search",
                    "type": "n8n-nodes-base.youTube",
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      500
                    ],
                    "parameters": {
                      "q": "={{ $json.keyword }}",
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "order": "viewCount",
                      "operation": "search",
                      "maxResults": 10
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "linkedIn_1",
                    "name": "LinkedIn Posts",
                    "type": "n8n-nodes-base.linkedIn",
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "onError": "continueErrorOutput",
                    "position": [
                      550,
                      100
                    ],
                    "parameters": {
                      "person": "",
                      "operation": "post"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_triggers_1755011290138",
                    "name": "Triggers Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      390,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## 📥 Triggers\nWebhook receives keyword input to initiate the research workflow for scraping top performing content."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1755011290138",
                    "name": "Inputs Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      790,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## 📊 Inputs\nAI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1755011290138",
                    "name": "Transform Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1190,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## ⚙️ Transform\nTransform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1755011290138",
                    "name": "Decision Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1590,
                      -140
                    ],
                    "parameters": {
                      "color": 2,
                      "width": 310,
                      "height": 780,
                      "content": "## 🔀 Decision\nFilter and route content based on platform type to ensure proper categorization in the final output."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_storage_1755011290138",
                    "name": "Storage Documentation",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1990,
                      -140
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 780,
                      "content": "## 💾 Storage\nSave all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_promo_1755011290139",
                    "name": "Workflow Overview",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      50,
                      -140
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 780,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Filter Content": {
                    "main": [
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Save to Google Sheets",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Research Agent": {
                    "main": [
                      [
                        {
                          "node": "Transform Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Data": {
                    "main": [
                      [
                        {
                          "node": "Filter Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Webhook Trigger": {
                    "main": [
                      [
                        {
                          "node": "Research Agent",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "googleSheets_1"
                  ],
                  "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Set up a webhook to receive data from external services",
                    "displayName": "receive webhook",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.googleSheets",
                    "config": {
                      "range": "={{ $fromAI(\"range\", \"The range to append to, e.g. A:Z\") }}",
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID\") }}",
                      "dataMode": "autoMap",
                      "operation": "append"
                    },
                    "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                    "displayName": "use google sheets as tool",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.if",
                    "config": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "",
                            "rightValue": ""
                          }
                        ]
                      }
                    },
                    "purpose": "Filter items based on conditions",
                    "displayName": "filter data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "={{ $json.query }}",
                      "outputType": "output",
                      "systemMessage": "You are an intelligent assistant with access to multiple tools. Use them wisely to complete tasks."
                    },
                    "purpose": "AI agent with multiple tools for complex automation",
                    "displayName": "multi tool ai agent",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-12T15:06:38.245Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.linkedIn",
                    "purpose": "Access LinkedIn API to scrape top performing posts based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.youTube",
                    "purpose": "Access YouTube API to scrape top performing videos based on keywords"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-12T15:06:38.440Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:23.254Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "research-agent-trigger",
                      "httpMethod": "POST",
                      "responseData": "allEntries",
                      "responseMode": "lastNode"
                    },
                    "typeVersion": "1",
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Set up a webhook to receive data from external services",
                  "nodeType": "nodes-base.webhook",
                  "timestamp": "2025-08-12T15:07:23.497Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                    "parameters": {
                      "range": "A:C",
                      "columns": {
                        "value": {
                          "URL": "={{ $json.url }}",
                          "Title": "={{ $json.title }}",
                          "Platform": "={{ $json.platform }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "sheetId": "={{ $fromAI(\"sheetId\", \"The Google Sheets ID where scraped content will be stored\") }}",
                      "dataMode": "defineBelow",
                      "operation": "append"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Use Google Sheets as an AI tool for reading/writing data",
                  "nodeType": "nodes-base.googleSheets",
                  "timestamp": "2025-08-12T15:07:23.724Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "operator": {
                              "type": "string",
                              "operation": "contains"
                            },
                            "leftValue": "{{ $json.url }}",
                            "rightValue": "linkedin.com"
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Filter items based on conditions",
                  "nodeType": "nodes-base.if",
                  "timestamp": "2025-08-12T15:07:23.936Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                    "parameters": {
                      "jsCode": "// Transform scraped data from Apify for Google Sheets output\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Handle LinkedIn posts\n  if (data.platform === 'linkedin' || data.type === 'linkedin_post') {\n    results.push({\n      json: {\n        platform: 'LinkedIn',\n        title: data.text || data.content || data.description || 'No title',\n        link: data.url || data.postUrl || data.link,\n        engagement: data.likes || data.reactions || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.reposts || 0,\n        author: data.author || data.authorName || 'Unknown',\n        publishedDate: data.publishedAt || data.createdAt || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle YouTube videos\n  if (data.platform === 'youtube' || data.type === 'youtube_video') {\n    results.push({\n      json: {\n        platform: 'YouTube',\n        title: data.title || data.name || 'No title',\n        link: data.url || data.videoUrl || `https://youtube.com/watch?v=${data.videoId}`,\n        engagement: data.views || data.viewCount || 0,\n        comments: data.comments || data.commentCount || 0,\n        shares: data.likes || data.likeCount || 0,\n        author: data.channelName || data.author || data.uploader || 'Unknown',\n        publishedDate: data.publishedAt || data.uploadDate || data.date || new Date().toISOString(),\n        keyword: data.searchKeyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n  \n  // Handle generic scraped data (fallback)\n  if (!data.platform && !data.type) {\n    results.push({\n      json: {\n        platform: data.source || 'Unknown',\n        title: data.title || data.text || data.content || 'No title',\n        link: data.url || data.link || 'No link',\n        engagement: data.engagement || data.likes || data.views || 0,\n        comments: data.comments || 0,\n        shares: data.shares || data.likes || 0,\n        author: data.author || data.creator || 'Unknown',\n        publishedDate: data.date || data.publishedAt || new Date().toISOString(),\n        keyword: data.keyword || 'N/A',\n        processedAt: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    }
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "timestamp": "2025-08-12T15:07:24.122Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                    "parameters": {
                      "text": "{{ $json.keyword }}",
                      "outputType": "output",
                      "systemMessage": "You are a research agent specialized in finding top performing content on social media platforms. Your task is to:\n\n1. Use Apify tools to scrape LinkedIn posts based on the provided keyword\n2. Use Apify tools to scrape YouTube videos based on the provided keyword\n3. Identify the top performing content based on engagement metrics (likes, comments, shares, views)\n4. Extract the direct links to these posts and videos\n5. Organize the results in a structured format suitable for Google Sheets output\n6. Return a comprehensive list of links to the top performing LinkedIn posts and YouTube videos\n\nAlways prioritize content with high engagement rates and recent publication dates. Focus on extracting clean, direct URLs that can be easily accessed."
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "task_node_2",
                  "purpose": "AI agent with multiple tools for complex automation",
                  "nodeType": "nodes-langchain.agent",
                  "timestamp": "2025-08-12T15:07:24.251Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.438Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "reasoning": "I need to clarify an important limitation: The LinkedIn node (nodes-base.linkedIn) you specified is designed for CREATING LinkedIn posts, not for scraping or searching existing posts",
                  "timestamp": "2025-08-12T15:07:24.438Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                    "parameters": {
                      "person": "",
                      "postAs": "person",
                      "resource": "post",
                      "binaryPropertyName": "data"
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Access LinkedIn API to scrape top performing posts based on keywords",
                  "nodeType": "nodes-base.linkedIn",
                  "timestamp": "2025-08-12T15:07:24.587Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:24.711Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "reasoning": "Configured YouTube node to search for videos using the 'getAll' operation on the 'video' resource",
                  "timestamp": "2025-08-12T15:07:24.711Z",
                  "operationIndex": 0
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                    "parameters": {
                      "part": [
                        "snippet",
                        "statistics"
                      ],
                      "filters": {
                        "q": "{{ $json.keyword }}"
                      },
                      "options": {
                        "order": "viewCount",
                        "maxResults": 50
                      },
                      "resource": "video",
                      "operation": "getAll"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Access YouTube API to scrape top performing videos based on keywords",
                  "nodeType": "nodes-base.youTube",
                  "timestamp": "2025-08-12T15:07:24.878Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-12T15:07:25.064Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.768Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}",
                          "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives keyword input to initiate the research workflow for scraping top performing content."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Filter and route content based on platform type to ensure proper categorization in the final output."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "googleSheets_1"
                      ],
                      "description": "Save all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                    }
                  ],
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-12T15:07:50.987Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-12T15:08:09.191Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "googleSheets_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "youTube_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "linkedIn_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.466Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "googleSheets_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "youTube_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "linkedIn_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "research-agent",
                          "httpMethod": "POST",
                          "responseMode": "onReceived"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                        "onError": "continueErrorOutput",
                        "position": [
                          1450,
                          300
                        ],
                        "parameters": {
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4.6
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-12T15:08:09.712Z"
                },
                {
                  "type": "setPhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-12T15:08:10.139Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Research Agent - LinkedIn & YouTube Scraper to Google Sheets",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Webhook Trigger",
                        "type": "n8n-nodes-base.webhook",
                        "notes": "Webhook trigger to initiate research agent workflow for scraping top performing LinkedIn posts and YouTube videos based on keyword input",
                        "onError": "stopWorkflow",
                        "position": [
                          470,
                          300
                        ],
                        "parameters": {
                          "path": "research-agent",
                          "httpMethod": "POST",
                          "responseMode": "onReceived"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "Research Agent",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "notes": "Research agent that uses Apify to scrape top performing LinkedIn posts and YouTube videos based on a keyword, then outputs all links to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          870,
                          300
                        ],
                        "parameters": {
                          "text": "{{ $json.keyword }}"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Data",
                        "type": "n8n-nodes-base.code",
                        "notes": "Transform scraped LinkedIn posts and YouTube videos data from Apify into a clean format for Google Sheets output with links and performance metrics",
                        "onError": "continueRegularOutput",
                        "position": [
                          1270,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform agent output into structured data for Google Sheets\nconst items = [];\n\n// Process agent response\nif ($input.all().length > 0) {\n  const agentData = $input.all()[0].json;\n  \n  // Extract LinkedIn posts\n  if (agentData.linkedinPosts) {\n    agentData.linkedinPosts.forEach(post => {\n      items.push({\n        platform: 'LinkedIn',\n        url: post.url,\n        title: post.title || 'LinkedIn Post',\n        engagement: post.likes || 0,\n        type: 'Post'\n      });\n    });\n  }\n  \n  // Extract YouTube videos\n  if (agentData.youtubeVideos) {\n    agentData.youtubeVideos.forEach(video => {\n      items.push({\n        platform: 'YouTube',\n        url: video.url,\n        title: video.title || 'YouTube Video',\n        engagement: video.views || 0,\n        type: 'Video'\n      });\n    });\n  }\n}\n\nreturn items;"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "if_1",
                        "name": "Filter Content",
                        "type": "n8n-nodes-base.if",
                        "notes": "Filter scraped content to separate LinkedIn posts from YouTube videos for proper routing to Google Sheets",
                        "onError": "continueRegularOutput",
                        "position": [
                          1670,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "conditions": [
                              {
                                "operator": {
                                  "type": "string",
                                  "operation": "equals"
                                },
                                "leftValue": "{{ $json.platform }}",
                                "rightValue": "LinkedIn"
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "googleSheets_1",
                        "name": "Save to Google Sheets",
                        "type": "n8n-nodes-base.googleSheets",
                        "notes": "Append scraped LinkedIn posts and YouTube video links to Google Sheets for research analysis",
                        "onError": "continueErrorOutput",
                        "position": [
                          2070,
                          300
                        ],
                        "parameters": {
                          "range": "A:E",
                          "columns": {
                            "value": {
                              "URL": "={{ $json.url }}",
                              "Type": "={{ $json.type }}",
                              "Title": "={{ $json.title }}",
                              "Platform": "={{ $json.platform }}",
                              "Engagement": "={{ $json.engagement }}"
                            }
                          },
                          "operation": "append"
                        },
                        "typeVersion": 4.6
                      },
                      {
                        "id": "youTube_1",
                        "name": "YouTube Search",
                        "type": "n8n-nodes-base.youTube",
                        "notes": "Searches YouTube for top performing videos based on keyword input and retrieves video details with statistics",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          500
                        ],
                        "parameters": {
                          "q": "={{ $json.keyword }}",
                          "part": [
                            "snippet",
                            "statistics"
                          ],
                          "order": "viewCount",
                          "operation": "search",
                          "maxResults": 10
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "linkedIn_1",
                        "name": "LinkedIn Posts",
                        "type": "n8n-nodes-base.linkedIn",
                        "notes": "This LinkedIn node is configured for creating posts, but it cannot scrape top performing posts - you'll need to use Apify's LinkedIn scraper instead",
                        "onError": "continueErrorOutput",
                        "position": [
                          550,
                          100
                        ],
                        "parameters": {
                          "person": "",
                          "operation": "post"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_triggers_1755011290138",
                        "name": "Triggers Documentation",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          390,
                          -140
                        ],
                        "parameters": {
                          "color": 5,
                          "width": 310,
                          "height": 780,
                          "content": "## 📥 Triggers\nWebhook receives keyword input to initiate the research workflow for scraping top performing content."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_inputs_1755011290138",
                        "name": "Inputs Documentation",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          790,
                          -140
                        ],
                        "parameters": {
                          "color": 5,
                          "width": 310,
                          "height": 780,
                          "content": "## 📊 Inputs\nAI research agent orchestrates the scraping of LinkedIn posts and YouTube videos using Apify based on the provided keyword."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_transforms_1755011290138",
                        "name": "Transform Documentation",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1190,
                          -140
                        ],
                        "parameters": {
                          "color": 5,
                          "width": 310,
                          "height": 780,
                          "content": "## ⚙️ Transform\nTransform and structure the scraped data from both platforms into a consistent format for Google Sheets storage."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_decision_1755011290138",
                        "name": "Decision Documentation",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1590,
                          -140
                        ],
                        "parameters": {
                          "color": 2,
                          "width": 310,
                          "height": 780,
                          "content": "## 🔀 Decision\nFilter and route content based on platform type to ensure proper categorization in the final output."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_storage_1755011290138",
                        "name": "Storage Documentation",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1990,
                          -140
                        ],
                        "parameters": {
                          "color": 5,
                          "width": 310,
                          "height": 780,
                          "content": "## 💾 Storage\nSave all scraped LinkedIn posts and YouTube video links with performance metrics to Google Sheets for analysis."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_promo_1755011290139",
                        "name": "Workflow Overview",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          50,
                          -140
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 280,
                          "height": 780,
                          "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Filter Content": {
                        "main": [
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Save to Google Sheets",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Research Agent": {
                        "main": [
                          [
                            {
                              "node": "Transform Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Data": {
                        "main": [
                          [
                            {
                              "node": "Filter Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Webhook Trigger": {
                        "main": [
                          [
                            {
                              "node": "Research Agent",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-12T15:08:10.377Z"
                },
                {
                  "type": "completePhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-12T15:08:10.377Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    }
  },
  "summary": {
    "totalNodes": 13,
    "totalConnections": 4,
    "validationAttempts": 3,
    "errorsFixed": 2,
    "stickyNotesAdded": 6,
    "performanceScore": 20,
    "qualityScore": 115,
    "completenessScore": 100
  },
  "optimizationSuggestions": [
    "Consider optimizing discovery phase (took 18103ms)",
    "Consider optimizing configuration phase (took 46618ms)",
    "Consider optimizing building phase (took 26046ms)",
    "Consider optimizing validation phase (took 18628ms)",
    "High validation attempts detected. Consider improving initial node configuration."
  ],
  "errorPatterns": []
}