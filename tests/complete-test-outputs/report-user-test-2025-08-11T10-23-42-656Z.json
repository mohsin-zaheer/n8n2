{
  "testName": "User Test",
  "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
  "sessionId": "complete_e2e_user_test_1754907704984",
  "timestamp": "2025-08-11T10:21:44.984Z",
  "duration": 117672,
  "success": true,
  "phases": {
    "discovery": {
      "name": "Discovery",
      "success": true,
      "metrics": {
        "startTime": 1754907705698,
        "endTime": 1754907724522,
        "duration": 18824,
        "memoryUsage": {
          "heapUsed": 2508528,
          "heapTotal": 30605312,
          "external": 6361567
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T10:21:45.699Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting discovery phase"
        },
        {
          "timestamp": "2025-08-11T10:21:45.699Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for discovery phase"
        },
        {
          "timestamp": "2025-08-11T10:21:58.040Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T10:21:58.040Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"webhook_with_error_handling\"}"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"ai_agent_workflow\"}"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"transform_data\"}"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"send_slack_message\"}"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T10:21:58.041Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"modern_error_handling_patterns\"}"
        },
        {
          "timestamp": "2025-08-11T10:21:58.202Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:21:58.205Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:21:58.210Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:21:58.212Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:21:58.220Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:21:58.221Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T10:21:58.221Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"switch\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T10:21:58.336Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:04.418Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Webhook that gracefully handles processing errors)"
        },
        {
          "timestamp": "2025-08-11T10:22:04.418Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T10:22:04.418Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.slack (Send a message to Slack channel)"
        },
        {
          "timestamp": "2025-08-11T10:22:04.419Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-langchain.agent (Create an AI agent that can use tools)"
        },
        {
          "timestamp": "2025-08-11T10:22:04.419Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.httpRequest (Examples of modern error handling using onError property)"
        },
        {
          "timestamp": "2025-08-11T10:22:04.419Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.switch (Route support tickets to different teams based on keywords and categorization results)"
        },
        {
          "timestamp": "2025-08-11T10:22:04.521Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T10:22:04.521Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_1",
          "type": "nodes-base.webhook",
          "purpose": "Webhook that gracefully handles processing errors"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.slack",
          "purpose": "Send a message to Slack channel"
        },
        {
          "id": "task_node_2",
          "type": "nodes-langchain.agent",
          "purpose": "Create an AI agent that can use tools"
        },
        {
          "id": "task_node_5",
          "type": "nodes-base.httpRequest",
          "purpose": "Examples of modern error handling using onError property"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.switch",
          "purpose": "Route support tickets to different teams based on keywords and categorization results"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754907704984",
        "createdAt": "2025-08-11T10:21:45.682Z",
        "state": {
          "phase": "configuration",
          "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "resilient-webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "firstEntryJson",
                "responseMode": "responseNode",
                "alwaysOutputData": true
              },
              "purpose": "Webhook that gracefully handles processing errors",
              "displayName": "webhook with error handling",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "",
                "outputType": "output",
                "systemMessage": "You are a helpful assistant."
              },
              "purpose": "Create an AI agent that can use tools",
              "displayName": "ai agent workflow",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Examples of modern error handling using onError property",
              "displayName": "modern error handling patterns",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "task_node_5",
            "search_node_1"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "resilient-webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode",
                  "alwaysOutputData": true
                },
                "purpose": "Webhook that gracefully handles processing errors",
                "displayName": "webhook with error handling",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "",
                  "outputType": "output",
                  "systemMessage": "You are a helpful assistant."
                },
                "purpose": "Create an AI agent that can use tools",
                "displayName": "ai agent workflow",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Examples of modern error handling using onError property",
                "displayName": "modern error handling patterns",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.switch",
                "purpose": "Route support tickets to different teams based on keywords and categorization results"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T10:22:03.783Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "prompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling"
        },
        "output": {
          "nodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "displayName": "webhook with error handling",
              "purpose": "Webhook that gracefully handles processing errors",
              "isPreConfigured": true,
              "config": {
                "httpMethod": "POST",
                "path": "resilient-webhook",
                "responseMode": "responseNode",
                "responseData": "firstEntryJson",
                "onError": "continueRegularOutput",
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "displayName": "send slack message",
              "purpose": "Send a message to Slack channel",
              "isPreConfigured": true,
              "config": {
                "resource": "message",
                "operation": "post",
                "channel": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 2000,
                "parameters": {}
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "displayName": "ai agent workflow",
              "purpose": "Create an AI agent that can use tools",
              "isPreConfigured": true,
              "config": {
                "text": "",
                "outputType": "output",
                "systemMessage": "You are a helpful assistant."
              }
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "displayName": "modern error handling patterns",
              "purpose": "Examples of modern error handling using onError property",
              "isPreConfigured": true,
              "config": {
                "method": "GET",
                "url": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 2000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "displayName": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "needsConfiguration": true
            }
          ]
        },
        "transformations": [
          "Intent Analysis",
          "Node Discovery",
          "Selection"
        ]
      }
    },
    "configuration": {
      "name": "Configuration",
      "success": true,
      "metrics": {
        "startTime": 1754907724522,
        "endTime": 1754907757805,
        "duration": 33283,
        "memoryUsage": {
          "heapUsed": 3153144,
          "heapTotal": 34537472,
          "external": 7247274
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T10:22:04.522Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting configuration phase"
        },
        {
          "timestamp": "2025-08-11T10:22:04.522Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for configuration phase"
        },
        {
          "timestamp": "2025-08-11T10:22:11.246Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T10:22:11.246Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\",\"config\":{\"path\":\"support-tickets\",\"httpMethod\":\"POST\",\"responseData\":\"firstEntryJson\",\"responseMode\":\"responseNode\"}}"
        },
        {
          "timestamp": "2025-08-11T10:22:11.409Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:15.795Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T10:22:15.795Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.slack\",\"config\":{\"text\":\"🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\\n\\n*Ticket ID:* {{$json.ticketId}}\\n*Customer:* {{$json.customerName}}\\n*Subject:* {{$json.subject}}\\n*Urgency:* {{$json.urgency}}\\n*Sentiment:* {{$json.sentiment}}\\n*Assigned Team:* {{$json.assignedTeam}}\\n\\n*Description:*\\n{{$json.description}}\\n\\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}\",\"resource\":\"message\",\"operation\":\"post\",\"parameters\":{},\"channelId\":\"{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}\",\"select\":\"channel\"}}"
        },
        {
          "timestamp": "2025-08-11T10:22:15.936Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:21.108Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T10:22:21.108Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-langchain.agent\",\"config\":{\"text\":\"{{$json.ticket_content || $json.description || $json.message}}\",\"outputType\":\"output\",\"systemMessage\":\"You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\\n\\n{\\n  \\\"urgency\\\": \\\"low|medium|high|critical\\\",\\n  \\\"sentiment\\\": \\\"positive|neutral|negative\\\",\\n  \\\"keywords\\\": [\\\"keyword1\\\", \\\"keyword2\\\"],\\n  \\\"category\\\": \\\"technical|billing|general|bug|feature_request\\\",\\n  \\\"reasoning\\\": \\\"Brief explanation of the classification\\\"\\n}\\n\\nClassification guidelines:\\n- CRITICAL: System down, security issues, data loss\\n- HIGH: Major functionality broken, multiple users affected\\n- MEDIUM: Single user issues, minor bugs, feature requests\\n- LOW: Questions, documentation requests, general inquiries\\n\\nExtract relevant keywords that could help with team assignment (e.g., \\\"payment\\\", \\\"login\\\", \\\"API\\\", \\\"mobile\\\", \\\"database\\\").\"}}"
        },
        {
          "timestamp": "2025-08-11T10:22:21.256Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:21.258Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T10:22:21.258Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.switch\"}"
        },
        {
          "timestamp": "2025-08-11T10:22:21.410Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:24.235Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T10:22:24.235Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\",\"config\":{\"jsCode\":\"// Transform customer support tickets and assign teams\\nconst results = [];\\n\\nfor (const item of items) {\\n  try {\\n    const ticket = item.json;\\n    \\n    // Extract ticket data\\n    const ticketData = {\\n      id: ticket.id || `ticket_${Date.now()}`,\\n      subject: ticket.subject || '',\\n      description: ticket.description || ticket.body || '',\\n      customer: {\\n        name: ticket.customer_name || ticket.name || 'Unknown',\\n        email: ticket.customer_email || ticket.email || '',\\n        priority: ticket.priority || 'medium'\\n      },\\n      urgency: ticket.urgency || 'medium',\\n      sentiment: ticket.sentiment || 'neutral',\\n      category: ticket.category || 'general',\\n      processedAt: new Date().toISOString(),\\n      status: 'new'\\n    };\\n    \\n    // Team assignment logic based on keywords\\n    let assignedTeam = 'general';\\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\\n    \\n    // Technical keywords\\n    if (content.match(/\\\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\\\b/)) {\\n      assignedTeam = 'technical';\\n    }\\n    // Billing keywords\\n    else if (content.match(/\\\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\\\b/)) {\\n      assignedTeam = 'billing';\\n    }\\n    // Sales keywords\\n    else if (content.match(/\\\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\\\b/)) {\\n      assignedTeam = 'sales';\\n    }\\n    // Account management keywords\\n    else if (content.match(/\\\\b(account|profile|settings|permissions|access|user)\\\\b/)) {\\n      assignedTeam = 'account';\\n    }\\n    \\n    // Priority mapping for Slack notifications\\n    let slackPriority = 'normal';\\n    let slackColor = '#36a64f'; // green\\n    \\n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\\n      slackPriority = 'high';\\n      slackColor = '#ff0000'; // red\\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\\n      slackPriority = 'medium';\\n      slackColor = '#ffaa00'; // orange\\n    }\\n    \\n    // Sentiment-based adjustments\\n    if (ticketData.sentiment === 'negative') {\\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\\n    }\\n    \\n    results.push({\\n      json: {\\n        ...ticketData,\\n        assignedTeam,\\n        slackNotification: {\\n          priority: slackPriority,\\n          color: slackColor,\\n          channel: assignedTeam === 'technical' ? '#tech-support' : \\n                  assignedTeam === 'billing' ? '#billing-support' :\\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\\n        },\\n        retryConfig: {\\n          maxRetries: slackPriority === 'high' ? 5 : 3,\\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\\n        }\\n      }\\n    });\\n    \\n  } catch (error) {\\n    // Error handling - create error ticket entry\\n    results.push({\\n      json: {\\n        id: `error_${Date.now()}`,\\n        error: true,\\n        errorMessage: error.message,\\n        originalData: item.json,\\n        processedAt: new Date().toISOString(),\\n        assignedTeam: 'technical',\\n        slackNotification: {\\n          priority: 'high',\\n          color: '#ff0000',\\n          channel: '#tech-support',\\n          urgentChannel: '#urgent-tickets'\\n        }\\n      }\\n    });\\n  }\\n}\\n\\nreturn results;\",\"language\":\"javaScript\"}}"
        },
        {
          "timestamp": "2025-08-11T10:22:24.348Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:29.514Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T10:22:29.514Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.switch\",\"config\":{\"mode\":\"rules\",\"rules\":{\"values\":[{\"conditions\":{\"options\":{\"caseSensitive\":false,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"{{ $json.ai_category }}\",\"rightValue\":\"technical\",\"operator\":{\"operation\":\"contains\",\"type\":\"string\"}}]},\"renameOutput\":\"Technical Team\"},{\"conditions\":{\"options\":{\"caseSensitive\":false,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"{{ $json.ai_category }}\",\"rightValue\":\"billing\",\"operator\":{\"operation\":\"contains\",\"type\":\"string\"}}]},\"renameOutput\":\"Billing Team\"},{\"conditions\":{\"options\":{\"caseSensitive\":false,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"{{ $json.ai_urgency }}\",\"rightValue\":\"high\",\"operator\":{\"operation\":\"equal\",\"type\":\"string\"}}]},\"renameOutput\":\"Priority Queue\"},{\"conditions\":{\"options\":{\"caseSensitive\":false,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"{{ $json.description }}\",\"rightValue\":\"refund|cancel|subscription\",\"operator\":{\"operation\":\"regex\",\"type\":\"string\"}}]},\"renameOutput\":\"Account Management\"}]},\"looseTypeValidation\":false}}"
        },
        {
          "timestamp": "2025-08-11T10:22:29.678Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:35.890Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T10:22:35.890Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.httpRequest\",\"config\":{\"url\":\"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\",\"method\":\"POST\",\"sendHeaders\":true,\"headerParameters\":{\"parameters\":[{\"name\":\"Content-Type\",\"value\":\"application/json\"}]},\"sendBody\":true,\"bodyParameters\":{\"parameters\":[]},\"jsonBody\":\"{\\n  \\\"channel\\\": \\\"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\\\",\\n  \\\"username\\\": \\\"Support Bot\\\",\\n  \\\"icon_emoji\\\": \\\"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\\\",\\n  \\\"text\\\": \\\"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\\\",\\n  \\\"attachments\\\": [\\n    {\\n      \\\"color\\\": \\\"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\\\",\\n      \\\"fields\\\": [\\n        {\\n          \\\"title\\\": \\\"Ticket ID\\\",\\n          \\\"value\\\": \\\"{{$json.ticketId}}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Priority\\\",\\n          \\\"value\\\": \\\"{{$json.priority.toUpperCase()}}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Category\\\",\\n          \\\"value\\\": \\\"{{$json.category}}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Assigned Team\\\",\\n          \\\"value\\\": \\\"{{$json.assignedTeam}}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Sentiment\\\",\\n          \\\"value\\\": \\\"{{$json.sentiment}}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Customer\\\",\\n          \\\"value\\\": \\\"{{$json.customerEmail}}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Subject\\\",\\n          \\\"value\\\": \\\"{{$json.subject}}\\\",\\n          \\\"short\\\": false\\n        },\\n        {\\n          \\\"title\\\": \\\"Description\\\",\\n          \\\"value\\\": \\\"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\\\",\\n          \\\"short\\\": false\\n        }\\n      ],\\n      \\\"footer\\\": \\\"Support Ticket System\\\",\\n      \\\"ts\\\": \\\"{{Math.floor(Date.now() / 1000)}}\\\"\\n    }\\n  ]\\n}\",\"options\":{\"timeout\":10000,\"response\":{\"response\":{\"fullResponse\":false,\"responseFormat\":\"json\"}}}}}"
        },
        {
          "timestamp": "2025-08-11T10:22:36.045Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:22:37.672Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Webhook that gracefully handles processing errors)"
        },
        {
          "timestamp": "2025-08-11T10:22:37.672Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T10:22:37.672Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.slack (Send a message to Slack channel)"
        },
        {
          "timestamp": "2025-08-11T10:22:37.672Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-langchain.agent (Create an AI agent that can use tools)"
        },
        {
          "timestamp": "2025-08-11T10:22:37.672Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.httpRequest (Examples of modern error handling using onError property)"
        },
        {
          "timestamp": "2025-08-11T10:22:37.672Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.switch (Route support tickets to different teams based on keywords and categorization results)"
        },
        {
          "timestamp": "2025-08-11T10:22:37.804Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T10:22:37.805Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_1",
          "type": "nodes-base.webhook",
          "purpose": "Webhook that gracefully handles processing errors",
          "configuration": {
            "onError": "continueRegularOutput",
            "alwaysOutputData": true,
            "typeVersion": 1,
            "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
            "parameters": {
              "path": "support-tickets",
              "httpMethod": "POST",
              "responseData": "firstEntryJson",
              "responseMode": "responseNode"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript",
          "configuration": {
            "typeVersion": 1,
            "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
            "parameters": {
              "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
              "language": "javaScript"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.slack",
          "purpose": "Send a message to Slack channel",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 2,
            "retryOnFail": true,
            "waitBetweenTries": 2000,
            "typeVersion": 1,
            "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
            "parameters": {
              "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
              "resource": "message",
              "operation": "post",
              "parameters": {},
              "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
              "select": "channel"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_2",
          "type": "nodes-langchain.agent",
          "purpose": "Create an AI agent that can use tools",
          "configuration": {
            "typeVersion": 1,
            "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
            "parameters": {
              "text": "{{$json.ticket_content || $json.description || $json.message}}",
              "outputType": "output",
              "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_5",
          "type": "nodes-base.httpRequest",
          "purpose": "Examples of modern error handling using onError property",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 2000,
            "typeVersion": 1,
            "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
            "parameters": {
              "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
              "method": "POST",
              "sendHeaders": true,
              "headerParameters": {
                "parameters": [
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              },
              "sendBody": true,
              "bodyParameters": {
                "parameters": []
              },
              "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
              "options": {
                "timeout": 10000,
                "response": {
                  "response": {
                    "fullResponse": false,
                    "responseFormat": "json"
                  }
                }
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.switch",
          "purpose": "Route support tickets to different teams based on keywords and categorization results",
          "configuration": {
            "typeVersion": 3.2,
            "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
            "parameters": {
              "mode": "rules",
              "rules": {
                "values": [
                  {
                    "conditions": {
                      "options": {
                        "caseSensitive": false,
                        "leftValue": "",
                        "typeValidation": "strict"
                      },
                      "conditions": [
                        {
                          "leftValue": "{{ $json.ai_category }}",
                          "rightValue": "technical",
                          "operator": {
                            "operation": "contains",
                            "type": "string"
                          }
                        }
                      ]
                    },
                    "renameOutput": "Technical Team"
                  },
                  {
                    "conditions": {
                      "options": {
                        "caseSensitive": false,
                        "leftValue": "",
                        "typeValidation": "strict"
                      },
                      "conditions": [
                        {
                          "leftValue": "{{ $json.ai_category }}",
                          "rightValue": "billing",
                          "operator": {
                            "operation": "contains",
                            "type": "string"
                          }
                        }
                      ]
                    },
                    "renameOutput": "Billing Team"
                  },
                  {
                    "conditions": {
                      "options": {
                        "caseSensitive": false,
                        "leftValue": "",
                        "typeValidation": "strict"
                      },
                      "conditions": [
                        {
                          "leftValue": "{{ $json.ai_urgency }}",
                          "rightValue": "high",
                          "operator": {
                            "operation": "equal",
                            "type": "string"
                          }
                        }
                      ]
                    },
                    "renameOutput": "Priority Queue"
                  },
                  {
                    "conditions": {
                      "options": {
                        "caseSensitive": false,
                        "leftValue": "",
                        "typeValidation": "strict"
                      },
                      "conditions": [
                        {
                          "leftValue": "{{ $json.description }}",
                          "rightValue": "refund|cancel|subscription",
                          "operator": {
                            "operation": "regex",
                            "type": "string"
                          }
                        }
                      ]
                    },
                    "renameOutput": "Account Management"
                  }
                ]
              },
              "looseTypeValidation": false
            }
          },
          "validationStatus": "valid"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754907704984",
        "createdAt": "2025-08-11T10:21:45.682Z",
        "state": {
          "phase": "building",
          "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "resilient-webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "firstEntryJson",
                "responseMode": "responseNode",
                "alwaysOutputData": true
              },
              "purpose": "Webhook that gracefully handles processing errors",
              "displayName": "webhook with error handling",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "",
                "outputType": "output",
                "systemMessage": "You are a helpful assistant."
              },
              "purpose": "Create an AI agent that can use tools",
              "displayName": "ai agent workflow",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Examples of modern error handling using onError property",
              "displayName": "modern error handling patterns",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "task_node_5",
            "search_node_1"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "resilient-webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode",
                  "alwaysOutputData": true
                },
                "purpose": "Webhook that gracefully handles processing errors",
                "displayName": "webhook with error handling",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "",
                  "outputType": "output",
                  "systemMessage": "You are a helpful assistant."
                },
                "purpose": "Create an AI agent that can use tools",
                "displayName": "ai agent workflow",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Examples of modern error handling using onError property",
                "displayName": "modern error handling patterns",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.switch",
                "purpose": "Route support tickets to different teams based on keywords and categorization results"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:36.046Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "support-tickets",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode"
                },
                "typeVersion": 1,
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Webhook that gracefully handles processing errors",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
              "timestamp": "2025-08-11T10:22:36.318Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.542Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
              "timestamp": "2025-08-11T10:22:36.542Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.719Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
              "timestamp": "2025-08-11T10:22:36.719Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.905Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                "parameters": {
                  "text": "{{$json.ticket_content || $json.description || $json.message}}",
                  "outputType": "output",
                  "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_2",
              "purpose": "Create an AI agent that can use tools",
              "nodeType": "nodes-langchain.agent",
              "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
              "timestamp": "2025-08-11T10:22:36.906Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                  "method": "POST",
                  "options": {
                    "timeout": 10000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "json"
                      }
                    }
                  },
                  "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                  "sendBody": true,
                  "sendHeaders": true,
                  "bodyParameters": {
                    "parameters": []
                  },
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      }
                    ]
                  }
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Examples of modern error handling using onError property",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
              "timestamp": "2025-08-11T10:22:37.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.329Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "technical"
                            }
                          ]
                        },
                        "renameOutput": "Technical Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "billing"
                            }
                          ]
                        },
                        "renameOutput": "Billing Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equal"
                              },
                              "leftValue": "{{ $json.ai_urgency }}",
                              "rightValue": "high"
                            }
                          ]
                        },
                        "renameOutput": "Priority Queue"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "regex"
                              },
                              "leftValue": "{{ $json.description }}",
                              "rightValue": "refund|cancel|subscription"
                            }
                          ]
                        },
                        "renameOutput": "Account Management"
                      }
                    ]
                  },
                  "looseTypeValidation": false
                },
                "typeVersion": 3.2
              },
              "nodeId": "search_node_1",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "nodeType": "nodes-base.switch",
              "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
              "timestamp": "2025-08-11T10:22:37.329Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.540Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:37.540Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "discoveredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "displayName": "webhook with error handling",
              "purpose": "Webhook that gracefully handles processing errors",
              "isPreConfigured": true,
              "config": {
                "httpMethod": "POST",
                "path": "resilient-webhook",
                "responseMode": "responseNode",
                "responseData": "firstEntryJson",
                "onError": "continueRegularOutput",
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "displayName": "send slack message",
              "purpose": "Send a message to Slack channel",
              "isPreConfigured": true,
              "config": {
                "resource": "message",
                "operation": "post",
                "channel": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 2000,
                "parameters": {}
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "displayName": "ai agent workflow",
              "purpose": "Create an AI agent that can use tools",
              "isPreConfigured": true,
              "config": {
                "text": "",
                "outputType": "output",
                "systemMessage": "You are a helpful assistant."
              }
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "displayName": "modern error handling patterns",
              "purpose": "Examples of modern error handling using onError property",
              "isPreConfigured": true,
              "config": {
                "method": "GET",
                "url": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 2000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "displayName": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "needsConfiguration": true
            }
          ]
        },
        "output": {
          "configuredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "purpose": "Webhook that gracefully handles processing errors",
              "config": {
                "onError": "continueRegularOutput",
                "alwaysOutputData": true,
                "typeVersion": 1,
                "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                "parameters": {
                  "path": "support-tickets",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 1,
                "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "purpose": "Send a message to Slack channel",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 2000,
                "typeVersion": 1,
                "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                  "select": "channel"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "purpose": "Create an AI agent that can use tools",
              "config": {
                "typeVersion": 1,
                "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                "parameters": {
                  "text": "{{$json.ticket_content || $json.description || $json.message}}",
                  "outputType": "output",
                  "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                }
              },
              "validated": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "purpose": "Examples of modern error handling using onError property",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000,
                "typeVersion": 1,
                "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                  "method": "POST",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      }
                    ]
                  },
                  "sendBody": true,
                  "bodyParameters": {
                    "parameters": []
                  },
                  "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                  "options": {
                    "timeout": 10000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "json"
                      }
                    }
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "config": {
                "typeVersion": 3.2,
                "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "technical",
                              "operator": {
                                "operation": "contains",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Technical Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "billing",
                              "operator": {
                                "operation": "contains",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Billing Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.ai_urgency }}",
                              "rightValue": "high",
                              "operator": {
                                "operation": "equal",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Priority Queue"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.description }}",
                              "rightValue": "refund|cancel|subscription",
                              "operator": {
                                "operation": "regex",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Account Management"
                      }
                    ]
                  },
                  "looseTypeValidation": false
                }
              },
              "validated": true
            }
          ]
        },
        "transformations": [
          "Parameter Configuration",
          "Validation",
          "Type Checking"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "configuration",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "building",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:36.046Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "support-tickets",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1,
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Webhook that gracefully handles processing errors",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
                  "timestamp": "2025-08-11T10:22:36.318Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.542Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
                  "timestamp": "2025-08-11T10:22:36.542Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.719Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
                  "timestamp": "2025-08-11T10:22:36.719Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.905Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                    "parameters": {
                      "text": "{{$json.ticket_content || $json.description || $json.message}}",
                      "outputType": "output",
                      "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Create an AI agent that can use tools",
                  "nodeType": "nodes-langchain.agent",
                  "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
                  "timestamp": "2025-08-11T10:22:36.906Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                      "method": "POST",
                      "options": {
                        "timeout": 10000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "json"
                          }
                        }
                      },
                      "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": []
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          }
                        ]
                      }
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Examples of modern error handling using onError property",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
                  "timestamp": "2025-08-11T10:22:37.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.329Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": "Technical Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": "Billing Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equal"
                                  },
                                  "leftValue": "{{ $json.ai_urgency }}",
                                  "rightValue": "high"
                                }
                              ]
                            },
                            "renameOutput": "Priority Queue"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "regex"
                                  },
                                  "leftValue": "{{ $json.description }}",
                                  "rightValue": "refund|cancel|subscription"
                                }
                              ]
                            },
                            "renameOutput": "Account Management"
                          }
                        ]
                      },
                      "looseTypeValidation": false
                    },
                    "typeVersion": 3.2
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results",
                  "nodeType": "nodes-base.switch",
                  "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
                  "timestamp": "2025-08-11T10:22:37.329Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:37.540Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "building": {
      "name": "Building",
      "success": true,
      "metrics": {
        "startTime": 1754907757805,
        "endTime": 1754907801442,
        "duration": 43637,
        "memoryUsage": {
          "heapUsed": 909912,
          "heapTotal": 36159488,
          "external": 7435129
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T10:22:37.805Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting building phase"
        },
        {
          "timestamp": "2025-08-11T10:22:37.805Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for building phase"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.webhook (Support Ticket Webhook)"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: @n8n/n8n-nodes-langchain.agent (AI Ticket Analyzer)"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.code (Ticket Data Processor)"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.switch (Team Router)"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.slack (Slack Notification)"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.httpRequest (Backup Notification)"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 6 nodes"
        },
        {
          "timestamp": "2025-08-11T10:23:21.316Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 5 connection groups"
        },
        {
          "timestamp": "2025-08-11T10:23:21.442Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T10:23:21.442Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "webhook_1",
          "type": "n8n-nodes-base.webhook",
          "purpose": "Support Ticket Webhook"
        },
        {
          "id": "agent_1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "purpose": "AI Ticket Analyzer"
        },
        {
          "id": "code_1",
          "type": "n8n-nodes-base.code",
          "purpose": "Ticket Data Processor"
        },
        {
          "id": "switch_1",
          "type": "n8n-nodes-base.switch",
          "purpose": "Team Router"
        },
        {
          "id": "slack_1",
          "type": "n8n-nodes-base.slack",
          "purpose": "Slack Notification"
        },
        {
          "id": "httpRequest_1",
          "type": "n8n-nodes-base.httpRequest",
          "purpose": "Backup Notification"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754907704984",
        "createdAt": "2025-08-11T10:21:45.682Z",
        "state": {
          "phase": "validation",
          "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "resilient-webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "firstEntryJson",
                "responseMode": "responseNode",
                "alwaysOutputData": true
              },
              "purpose": "Webhook that gracefully handles processing errors",
              "displayName": "webhook with error handling",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "",
                "outputType": "output",
                "systemMessage": "You are a helpful assistant."
              },
              "purpose": "Create an AI agent that can use tools",
              "displayName": "ai agent workflow",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Examples of modern error handling using onError property",
              "displayName": "modern error handling patterns",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "task_node_5",
            "search_node_1"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Support Ticket Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "support-tickets",
                  "options": {},
                  "httpMethod": "POST",
                  "responseMode": "responseNode"
                },
                "typeVersion": 1
              },
              {
                "id": "agent_1",
                "name": "AI Ticket Analyzer",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                  "agent": "conversationalAgent",
                  "options": {},
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "promptType": "define",
                  "outputParser": "structuredOutputParser",
                  "hasOutputParser": true
                },
                "typeVersion": 1
              },
              {
                "id": "code_1",
                "name": "Ticket Data Processor",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "typeVersion": 2
              },
              {
                "id": "switch_1",
                "name": "Team Router",
                "type": "n8n-nodes-base.switch",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "outputKey": "technical",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical"
                            }
                          ]
                        },
                        "renameOutput": true
                      },
                      {
                        "outputKey": "billing",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing"
                            }
                          ]
                        },
                        "renameOutput": true
                      },
                      {
                        "outputKey": "escalation",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation"
                            }
                          ]
                        },
                        "renameOutput": true
                      }
                    ]
                  },
                  "options": {},
                  "fallbackOutput": "extra"
                },
                "typeVersion": 3
              },
              {
                "id": "slack_1",
                "name": "Slack Notification",
                "type": "n8n-nodes-base.slack",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                  "blocks": [],
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "otherOptions": {}
                },
                "retryOnFail": true,
                "typeVersion": 2
              },
              {
                "id": "httpRequest_1",
                "name": "Backup Notification",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "method": "POST",
                  "options": {
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    },
                    "timeout": 10000
                  },
                  "requestFormat": "json",
                  "authentication": "none",
                  "jsonParameters": true,
                  "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                },
                "retryOnFail": true,
                "typeVersion": 4
              }
            ],
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "agent_1"
              ],
              "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
            },
            {
              "type": "integration",
              "nodeIds": [
                "switch_1"
              ],
              "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
            },
            {
              "type": "notification",
              "nodeIds": [
                "slack_1",
                "httpRequest_1"
              ],
              "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "resilient-webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode",
                  "alwaysOutputData": true
                },
                "purpose": "Webhook that gracefully handles processing errors",
                "displayName": "webhook with error handling",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "",
                  "outputType": "output",
                  "systemMessage": "You are a helpful assistant."
                },
                "purpose": "Create an AI agent that can use tools",
                "displayName": "ai agent workflow",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Examples of modern error handling using onError property",
                "displayName": "modern error handling patterns",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.switch",
                "purpose": "Route support tickets to different teams based on keywords and categorization results"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:36.046Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "support-tickets",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode"
                },
                "typeVersion": 1,
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Webhook that gracefully handles processing errors",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
              "timestamp": "2025-08-11T10:22:36.318Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.542Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
              "timestamp": "2025-08-11T10:22:36.542Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.719Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
              "timestamp": "2025-08-11T10:22:36.719Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.905Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                "parameters": {
                  "text": "{{$json.ticket_content || $json.description || $json.message}}",
                  "outputType": "output",
                  "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_2",
              "purpose": "Create an AI agent that can use tools",
              "nodeType": "nodes-langchain.agent",
              "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
              "timestamp": "2025-08-11T10:22:36.906Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                  "method": "POST",
                  "options": {
                    "timeout": 10000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "json"
                      }
                    }
                  },
                  "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                  "sendBody": true,
                  "sendHeaders": true,
                  "bodyParameters": {
                    "parameters": []
                  },
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      }
                    ]
                  }
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Examples of modern error handling using onError property",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
              "timestamp": "2025-08-11T10:22:37.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.329Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "technical"
                            }
                          ]
                        },
                        "renameOutput": "Technical Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "billing"
                            }
                          ]
                        },
                        "renameOutput": "Billing Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equal"
                              },
                              "leftValue": "{{ $json.ai_urgency }}",
                              "rightValue": "high"
                            }
                          ]
                        },
                        "renameOutput": "Priority Queue"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "regex"
                              },
                              "leftValue": "{{ $json.description }}",
                              "rightValue": "refund|cancel|subscription"
                            }
                          ]
                        },
                        "renameOutput": "Account Management"
                      }
                    ]
                  },
                  "looseTypeValidation": false
                },
                "typeVersion": 3.2
              },
              "nodeId": "search_node_1",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "nodeType": "nodes-base.switch",
              "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
              "timestamp": "2025-08-11T10:22:37.329Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.540Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:37.540Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T10:23:20.654Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T10:23:21.004Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "timestamp": "2025-08-11T10:23:21.004Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T10:23:21.005Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "configuredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "purpose": "Webhook that gracefully handles processing errors",
              "config": {
                "onError": "continueRegularOutput",
                "alwaysOutputData": true,
                "typeVersion": 1,
                "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                "parameters": {
                  "path": "support-tickets",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 1,
                "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "purpose": "Send a message to Slack channel",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 2000,
                "typeVersion": 1,
                "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                  "select": "channel"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "purpose": "Create an AI agent that can use tools",
              "config": {
                "typeVersion": 1,
                "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                "parameters": {
                  "text": "{{$json.ticket_content || $json.description || $json.message}}",
                  "outputType": "output",
                  "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                }
              },
              "validated": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "purpose": "Examples of modern error handling using onError property",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000,
                "typeVersion": 1,
                "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                  "method": "POST",
                  "sendHeaders": true,
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      }
                    ]
                  },
                  "sendBody": true,
                  "bodyParameters": {
                    "parameters": []
                  },
                  "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                  "options": {
                    "timeout": 10000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "json"
                      }
                    }
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "config": {
                "typeVersion": 3.2,
                "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "technical",
                              "operator": {
                                "operation": "contains",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Technical Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "billing",
                              "operator": {
                                "operation": "contains",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Billing Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.ai_urgency }}",
                              "rightValue": "high",
                              "operator": {
                                "operation": "equal",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Priority Queue"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": false,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "{{ $json.description }}",
                              "rightValue": "refund|cancel|subscription",
                              "operator": {
                                "operation": "regex",
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "renameOutput": "Account Management"
                      }
                    ]
                  },
                  "looseTypeValidation": false
                }
              },
              "validated": true
            }
          ]
        },
        "output": {
          "workflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "httpMethod": "POST",
                  "path": "support-tickets",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Support Ticket Webhook",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "agent": "conversationalAgent",
                  "promptType": "define",
                  "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                  "hasOutputParser": true,
                  "outputParser": "structuredOutputParser",
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "options": {}
                },
                "name": "AI Ticket Analyzer",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "name": "Ticket Data Processor",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "switch_1",
                "type": "n8n-nodes-base.switch",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "technical"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "billing"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "escalation"
                      }
                    ]
                  },
                  "fallbackOutput": "extra",
                  "options": {}
                },
                "name": "Team Router",
                "typeVersion": 3,
                "onError": "continueRegularOutput"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "blocks": [],
                  "otherOptions": {}
                },
                "name": "Slack Notification",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "method": "POST",
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "authentication": "none",
                  "requestFormat": "json",
                  "jsonParameters": true,
                  "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}",
                  "options": {
                    "timeout": 10000,
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    }
                  }
                },
                "name": "Backup Notification",
                "typeVersion": 4,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3
              }
            ],
            "connections": {
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "transformations": [
          "Workflow Generation",
          "Connection Building",
          "Settings Configuration"
        ]
      },
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "name": "Customer Support Ticket Processing with AI Categorization",
              "settings": {
                "executionOrder": "v1",
                "saveManualExecutions": true,
                "saveDataErrorExecution": "all",
                "saveDataSuccessExecution": "all"
              },
              "connections": {
                "Team Router": {
                  "main": [
                    [
                      {
                        "node": "Slack Notification",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Slack Notification",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Slack Notification",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Slack Notification",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "AI Ticket Analyzer": {
                  "main": [
                    [
                      {
                        "node": "Ticket Data Processor",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Slack Notification": {
                  "main": [
                    [
                      {
                        "node": "Backup Notification",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Ticket Data Processor": {
                  "main": [
                    [
                      {
                        "node": "Team Router",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Support Ticket Webhook": {
                  "main": [
                    [
                      {
                        "node": "AI Ticket Analyzer",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "building",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:36.046Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "support-tickets",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1,
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Webhook that gracefully handles processing errors",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
                  "timestamp": "2025-08-11T10:22:36.318Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.542Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
                  "timestamp": "2025-08-11T10:22:36.542Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.719Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
                  "timestamp": "2025-08-11T10:22:36.719Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.905Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                    "parameters": {
                      "text": "{{$json.ticket_content || $json.description || $json.message}}",
                      "outputType": "output",
                      "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Create an AI agent that can use tools",
                  "nodeType": "nodes-langchain.agent",
                  "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
                  "timestamp": "2025-08-11T10:22:36.906Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                      "method": "POST",
                      "options": {
                        "timeout": 10000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "json"
                          }
                        }
                      },
                      "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": []
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          }
                        ]
                      }
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Examples of modern error handling using onError property",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
                  "timestamp": "2025-08-11T10:22:37.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.329Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": "Technical Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": "Billing Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equal"
                                  },
                                  "leftValue": "{{ $json.ai_urgency }}",
                                  "rightValue": "high"
                                }
                              ]
                            },
                            "renameOutput": "Priority Queue"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "regex"
                                  },
                                  "leftValue": "{{ $json.description }}",
                                  "rightValue": "refund|cancel|subscription"
                                }
                              ]
                            },
                            "renameOutput": "Account Management"
                          }
                        ]
                      },
                      "looseTypeValidation": false
                    },
                    "typeVersion": 3.2
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results",
                  "nodeType": "nodes-base.switch",
                  "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
                  "timestamp": "2025-08-11T10:22:37.329Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:37.540Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "validation",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:36.046Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "support-tickets",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1,
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Webhook that gracefully handles processing errors",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
                  "timestamp": "2025-08-11T10:22:36.318Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.542Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
                  "timestamp": "2025-08-11T10:22:36.542Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.719Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
                  "timestamp": "2025-08-11T10:22:36.719Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.905Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                    "parameters": {
                      "text": "{{$json.ticket_content || $json.description || $json.message}}",
                      "outputType": "output",
                      "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Create an AI agent that can use tools",
                  "nodeType": "nodes-langchain.agent",
                  "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
                  "timestamp": "2025-08-11T10:22:36.906Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                      "method": "POST",
                      "options": {
                        "timeout": 10000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "json"
                          }
                        }
                      },
                      "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": []
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          }
                        ]
                      }
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Examples of modern error handling using onError property",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
                  "timestamp": "2025-08-11T10:22:37.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.329Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": "Technical Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": "Billing Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equal"
                                  },
                                  "leftValue": "{{ $json.ai_urgency }}",
                                  "rightValue": "high"
                                }
                              ]
                            },
                            "renameOutput": "Priority Queue"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "regex"
                                  },
                                  "leftValue": "{{ $json.description }}",
                                  "rightValue": "refund|cancel|subscription"
                                }
                              ]
                            },
                            "renameOutput": "Account Management"
                          }
                        ]
                      },
                      "looseTypeValidation": false
                    },
                    "typeVersion": 3.2
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results",
                  "nodeType": "nodes-base.switch",
                  "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
                  "timestamp": "2025-08-11T10:22:37.329Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:20.654Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "switch_1"
                      ],
                      "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "httpRequest_1"
                      ],
                      "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                    }
                  ],
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:21.005Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "validation": {
      "name": "Validation",
      "success": true,
      "metrics": {
        "startTime": 1754907801443,
        "endTime": 1754907821861,
        "duration": 20418,
        "memoryUsage": {
          "heapUsed": 1704704,
          "heapTotal": 37486592,
          "external": 7968351
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T10:23:21.443Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting validation phase"
        },
        {
          "timestamp": "2025-08-11T10:23:21.443Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for validation phase"
        },
        {
          "timestamp": "2025-08-11T10:23:21.444Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T10:23:21.444Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Customer Support Ticket Processing with AI Categorization\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"httpMethod\":\"POST\",\"path\":\"support-tickets\",\"responseMode\":\"responseNode\",\"options\":{}},\"name\":\"Support Ticket Webhook\",\"typeVersion\":1,\"onError\":\"stopWorkflow\"},{\"id\":\"agent_1\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[550,300],\"parameters\":{\"agent\":\"conversationalAgent\",\"promptType\":\"define\",\"text\":\"You are a customer support ticket analyzer. Analyze the following ticket and provide:\\n1. Urgency level (low/medium/high/critical)\\n2. Sentiment (positive/neutral/negative)\\n3. Brief reasoning\\n\\nTicket: {{ $json.subject }} - {{ $json.description }}\",\"hasOutputParser\":true,\"outputParser\":\"structuredOutputParser\",\"jsonSchema\":\"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"urgency\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"enum\\\": [\\\"low\\\", \\\"medium\\\", \\\"high\\\", \\\"critical\\\"]\\n    },\\n    \\\"sentiment\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"enum\\\": [\\\"positive\\\", \\\"neutral\\\", \\\"negative\\\"]\\n    },\\n    \\\"reasoning\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\\"urgency\\\", \\\"sentiment\\\", \\\"reasoning\\\"]\\n}\",\"options\":{}},\"name\":\"AI Ticket Analyzer\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,300],\"parameters\":{\"jsCode\":\"// Transform customer support tickets and assign teams based on keywords and AI categorization\\nconst ticketData = $input.first();\\nconst aiAnalysis = $input.last();\\n\\n// Extract ticket information\\nconst ticket = {\\n  id: ticketData.json.id || Date.now(),\\n  subject: ticketData.json.subject || '',\\n  description: ticketData.json.description || '',\\n  customer: ticketData.json.customer || 'Unknown',\\n  email: ticketData.json.email || '',\\n  timestamp: new Date().toISOString()\\n};\\n\\n// Extract AI analysis\\nconst analysis = {\\n  urgency: aiAnalysis.json.urgency || 'medium',\\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\\n};\\n\\n// Team assignment logic based on keywords\\nfunction assignTeam(subject, description, urgency) {\\n  const content = (subject + ' ' + description).toLowerCase();\\n  \\n  // Critical issues go to escalation team\\n  if (urgency === 'critical') {\\n    return 'escalation';\\n  }\\n  \\n  // Technical keywords\\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\\n    return 'technical';\\n  }\\n  \\n  // Billing keywords\\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\\n    return 'billing';\\n  }\\n  \\n  // Account keywords\\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\\n    return 'account';\\n  }\\n  \\n  // Default to general support\\n  return 'general';\\n}\\n\\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\\n\\n// Priority mapping for notifications\\nconst priorityMap = {\\n  'critical': 'HIGH',\\n  'high': 'HIGH', \\n  'medium': 'MEDIUM',\\n  'low': 'LOW'\\n};\\n\\nreturn {\\n  json: {\\n    ticket: ticket,\\n    analysis: analysis,\\n    assignedTeam: assignedTeam,\\n    priority: priorityMap[analysis.urgency],\\n    slackChannel: `#support-${assignedTeam}`,\\n    processed: true\\n  }\\n};\"},\"name\":\"Ticket Data Processor\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"switch_1\",\"type\":\"n8n-nodes-base.switch\",\"position\":[1150,300],\"parameters\":{\"mode\":\"rules\",\"rules\":{\"values\":[{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"={{ $json.assignedTeam }}\",\"rightValue\":\"technical\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}],\"combinator\":\"and\"},\"renameOutput\":true,\"outputKey\":\"technical\"},{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"={{ $json.assignedTeam }}\",\"rightValue\":\"billing\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}],\"combinator\":\"and\"},\"renameOutput\":true,\"outputKey\":\"billing\"},{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"={{ $json.assignedTeam }}\",\"rightValue\":\"escalation\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}],\"combinator\":\"and\"},\"renameOutput\":true,\"outputKey\":\"escalation\"}]},\"fallbackOutput\":\"extra\",\"options\":{}},\"name\":\"Team Router\",\"typeVersion\":3,\"onError\":\"continueRegularOutput\"},{\"id\":\"slack_1\",\"type\":\"n8n-nodes-base.slack\",\"position\":[1450,200],\"parameters\":{\"text\":\"🎫 *New Support Ticket - {{ $json.priority }} Priority*\\n\\n*Ticket ID:* {{ $json.ticket.id }}\\n*Subject:* {{ $json.ticket.subject }}\\n*Customer:* {{ $json.ticket.customer }}\\n*Team:* {{ $json.assignedTeam }}\\n*Urgency:* {{ $json.analysis.urgency }}\\n*Sentiment:* {{ $json.analysis.sentiment }}\\n\\n*Description:*\\n{{ $json.ticket.description }}\\n\\n*AI Analysis:* {{ $json.analysis.reasoning }}\",\"channel\":\"={{ $json.slackChannel }}\",\"username\":\"Support Bot\",\"iconEmoji\":\":ticket:\",\"attachments\":[],\"blocks\":[],\"otherOptions\":{}},\"name\":\"Slack Notification\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"retryOnFail\":true,\"maxTries\":2},{\"id\":\"httpRequest_1\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1450,400],\"parameters\":{\"method\":\"POST\",\"url\":\"https://hooks.slack.com/services/YOUR/WEBHOOK/URL\",\"authentication\":\"none\",\"requestFormat\":\"json\",\"jsonParameters\":true,\"parametersJson\":\"{\\n  \\\"text\\\": \\\"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\\\",\\n  \\\"channel\\\": \\\"{{ $json.slackChannel }}\\\",\\n  \\\"username\\\": \\\"Support Bot Backup\\\",\\n  \\\"icon_emoji\\\": \\\":warning:\\\",\\n  \\\"attachments\\\": [\\n    {\\n      \\\"color\\\": \\\"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\\\",\\n      \\\"fields\\\": [\\n        {\\n          \\\"title\\\": \\\"Subject\\\",\\n          \\\"value\\\": \\\"{{ $json.ticket.subject }}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Priority\\\",\\n          \\\"value\\\": \\\"{{ $json.priority }}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Team\\\",\\n          \\\"value\\\": \\\"{{ $json.assignedTeam }}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Urgency\\\",\\n          \\\"value\\\": \\\"{{ $json.analysis.urgency }}\\\",\\n          \\\"short\\\": true\\n        }\\n      ]\\n    }\\n  ]\\n}\",\"options\":{\"timeout\":10000,\"retry\":{\"enabled\":true,\"maxAttempts\":3,\"waitBetween\":1000}}},\"name\":\"Backup Notification\",\"typeVersion\":4,\"onError\":\"continueRegularOutput\",\"retryOnFail\":true,\"maxTries\":3}],\"connections\":{\"Support Ticket Webhook\":{\"main\":[[{\"node\":\"AI Ticket Analyzer\",\"type\":\"main\",\"index\":0}]]},\"AI Ticket Analyzer\":{\"main\":[[{\"node\":\"Ticket Data Processor\",\"type\":\"main\",\"index\":0}]]},\"Ticket Data Processor\":{\"main\":[[{\"node\":\"Team Router\",\"type\":\"main\",\"index\":0}]]},\"Team Router\":{\"main\":[[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}]]},\"Slack Notification\":{\"main\":[[{\"node\":\"Backup Notification\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T10:23:21.618Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:23:40.612Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T10:23:40.612Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Customer Support Ticket Processing with AI Categorization\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"httpMethod\":\"POST\",\"path\":\"support-tickets\",\"responseMode\":\"responseNode\",\"options\":{}},\"name\":\"Support Ticket Webhook\",\"typeVersion\":2,\"onError\":\"stopWorkflow\"},{\"id\":\"agent_1\",\"type\":\"@n8n/n8n-nodes-langchain.agent\",\"position\":[550,300],\"parameters\":{\"agent\":\"conversationalAgent\",\"promptType\":\"define\",\"text\":\"{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\\n1. Urgency level (low/medium/high/critical)\\n2. Sentiment (positive/neutral/negative)\\n3. Brief reasoning\\n\\nTicket: ${$json.subject} - ${$json.description}` }}\",\"hasOutputParser\":true,\"outputParser\":\"structuredOutputParser\",\"jsonSchema\":\"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"urgency\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"enum\\\": [\\\"low\\\", \\\"medium\\\", \\\"high\\\", \\\"critical\\\"]\\n    },\\n    \\\"sentiment\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"enum\\\": [\\\"positive\\\", \\\"neutral\\\", \\\"negative\\\"]\\n    },\\n    \\\"reasoning\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\\"urgency\\\", \\\"sentiment\\\", \\\"reasoning\\\"]\\n}\",\"options\":{}},\"name\":\"AI Ticket Analyzer\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,300],\"parameters\":{\"jsCode\":\"// Transform customer support tickets and assign teams based on keywords and AI categorization\\nconst ticketData = $input.first();\\nconst aiAnalysis = $input.last();\\n\\n// Extract ticket information\\nconst ticket = {\\n  id: ticketData.json.id || Date.now(),\\n  subject: ticketData.json.subject || '',\\n  description: ticketData.json.description || '',\\n  customer: ticketData.json.customer || 'Unknown',\\n  email: ticketData.json.email || '',\\n  timestamp: new Date().toISOString()\\n};\\n\\n// Extract AI analysis\\nconst analysis = {\\n  urgency: aiAnalysis.json.urgency || 'medium',\\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\\n};\\n\\n// Team assignment logic based on keywords\\nfunction assignTeam(subject, description, urgency) {\\n  const content = (subject + ' ' + description).toLowerCase();\\n  \\n  // Critical issues go to escalation team\\n  if (urgency === 'critical') {\\n    return 'escalation';\\n  }\\n  \\n  // Technical keywords\\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\\n    return 'technical';\\n  }\\n  \\n  // Billing keywords\\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\\n    return 'billing';\\n  }\\n  \\n  // Account keywords\\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\\n    return 'account';\\n  }\\n  \\n  // Default to general support\\n  return 'general';\\n}\\n\\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\\n\\n// Priority mapping for notifications\\nconst priorityMap = {\\n  'critical': 'HIGH',\\n  'high': 'HIGH', \\n  'medium': 'MEDIUM',\\n  'low': 'LOW'\\n};\\n\\nreturn {\\n  json: {\\n    ticket: ticket,\\n    analysis: analysis,\\n    assignedTeam: assignedTeam,\\n    priority: priorityMap[analysis.urgency],\\n    slackChannel: `#support-${assignedTeam}`,\\n    processed: true\\n  }\\n};\"},\"name\":\"Ticket Data Processor\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"switch_1\",\"type\":\"n8n-nodes-base.switch\",\"position\":[1150,300],\"parameters\":{\"mode\":\"rules\",\"rules\":{\"values\":[{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"={{ $json.assignedTeam }}\",\"rightValue\":\"technical\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}],\"combinator\":\"and\"},\"renameOutput\":true,\"outputKey\":\"technical\"},{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"={{ $json.assignedTeam }}\",\"rightValue\":\"billing\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}],\"combinator\":\"and\"},\"renameOutput\":true,\"outputKey\":\"billing\"},{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"leftValue\":\"={{ $json.assignedTeam }}\",\"rightValue\":\"escalation\",\"operator\":{\"type\":\"string\",\"operation\":\"equals\"}}],\"combinator\":\"and\"},\"renameOutput\":true,\"outputKey\":\"escalation\"}]},\"fallbackOutput\":\"extra\",\"options\":{}},\"name\":\"Team Router\",\"typeVersion\":3.2,\"onError\":\"continueRegularOutput\"},{\"id\":\"slack_1\",\"type\":\"n8n-nodes-base.slack\",\"position\":[1450,200],\"parameters\":{\"text\":\"{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\\n\\n*Ticket ID:* ${$json.ticket.id}\\n*Subject:* ${$json.ticket.subject}\\n*Customer:* ${$json.ticket.customer}\\n*Team:* ${$json.assignedTeam}\\n*Urgency:* ${$json.analysis.urgency}\\n*Sentiment:* ${$json.analysis.sentiment}\\n\\n*Description:*\\n${$json.ticket.description}\\n\\n*AI Analysis:* ${$json.analysis.reasoning}` }}\",\"channel\":\"={{ $json.slackChannel }}\",\"username\":\"Support Bot\",\"iconEmoji\":\":ticket:\",\"attachments\":[],\"blocks\":[],\"otherOptions\":{}},\"name\":\"Slack Notification\",\"typeVersion\":2.3,\"onError\":\"continueRegularOutput\",\"retryOnFail\":true,\"maxTries\":2},{\"id\":\"httpRequest_1\",\"type\":\"n8n-nodes-base.httpRequest\",\"position\":[1450,400],\"parameters\":{\"method\":\"POST\",\"url\":\"https://hooks.slack.com/services/YOUR/WEBHOOK/URL\",\"authentication\":\"none\",\"requestFormat\":\"json\",\"jsonParameters\":true,\"parametersJson\":\"{{ `{\\n  \\\"text\\\": \\\"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\\\",\\n  \\\"channel\\\": \\\"${$json.slackChannel}\\\",\\n  \\\"username\\\": \\\"Support Bot Backup\\\",\\n  \\\"icon_emoji\\\": \\\":warning:\\\",\\n  \\\"attachments\\\": [\\n    {\\n      \\\"color\\\": \\\"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\\\",\\n      \\\"fields\\\": [\\n        {\\n          \\\"title\\\": \\\"Subject\\\",\\n          \\\"value\\\": \\\"${$json.ticket.subject}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Priority\\\",\\n          \\\"value\\\": \\\"${$json.priority}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Team\\\",\\n          \\\"value\\\": \\\"${$json.assignedTeam}\\\",\\n          \\\"short\\\": true\\n        },\\n        {\\n          \\\"title\\\": \\\"Urgency\\\",\\n          \\\"value\\\": \\\"${$json.analysis.urgency}\\\",\\n          \\\"short\\\": true\\n        }\\n      ]\\n    }\\n  ]\\n}` }}\",\"options\":{\"timeout\":10000,\"retry\":{\"enabled\":true,\"maxAttempts\":3,\"waitBetween\":1000}}},\"name\":\"Backup Notification\",\"typeVersion\":4.2,\"onError\":\"continueRegularOutput\",\"retryOnFail\":true,\"maxTries\":3}],\"connections\":{\"Support Ticket Webhook\":{\"main\":[[{\"node\":\"AI Ticket Analyzer\",\"type\":\"main\",\"index\":0}]]},\"AI Ticket Analyzer\":{\"main\":[[{\"node\":\"Ticket Data Processor\",\"type\":\"main\",\"index\":0}]]},\"Ticket Data Processor\":{\"main\":[[{\"node\":\"Team Router\",\"type\":\"main\",\"index\":0}]]},\"Team Router\":{\"main\":[[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Slack Notification\",\"type\":\"main\",\"index\":0}]]},\"Slack Notification\":{\"main\":[[{\"node\":\"Backup Notification\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T10:23:40.804Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T10:23:41.718Z",
          "level": "ERROR",
          "source": "Orchestrator",
          "message": "Error in validation: Error 1"
        },
        {
          "timestamp": "2025-08-11T10:23:41.718Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Validation completed in 2 attempts"
        },
        {
          "timestamp": "2025-08-11T10:23:41.718Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Applied 1 fixes"
        },
        {
          "timestamp": "2025-08-11T10:23:41.861Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T10:23:41.861Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754907704984",
        "createdAt": "2025-08-11T10:21:45.682Z",
        "state": {
          "phase": "documentation",
          "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "resilient-webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "firstEntryJson",
                "responseMode": "responseNode",
                "alwaysOutputData": true
              },
              "purpose": "Webhook that gracefully handles processing errors",
              "displayName": "webhook with error handling",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "",
                "outputType": "output",
                "systemMessage": "You are a helpful assistant."
              },
              "purpose": "Create an AI agent that can use tools",
              "displayName": "ai agent workflow",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Examples of modern error handling using onError property",
              "displayName": "modern error handling patterns",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "task_node_5",
            "search_node_1"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Support Ticket Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "support-tickets",
                  "options": {},
                  "httpMethod": "POST",
                  "responseMode": "responseNode"
                },
                "typeVersion": 2
              },
              {
                "id": "agent_1",
                "name": "AI Ticket Analyzer",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                  "agent": "conversationalAgent",
                  "options": {},
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "promptType": "define",
                  "outputParser": "structuredOutputParser",
                  "hasOutputParser": true
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Ticket Data Processor",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "typeVersion": 2
              },
              {
                "id": "switch_1",
                "name": "Team Router",
                "type": "n8n-nodes-base.switch",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "outputKey": "technical",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical"
                            }
                          ]
                        },
                        "renameOutput": true
                      },
                      {
                        "outputKey": "billing",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing"
                            }
                          ]
                        },
                        "renameOutput": true
                      },
                      {
                        "outputKey": "escalation",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation"
                            }
                          ]
                        },
                        "renameOutput": true
                      }
                    ]
                  },
                  "options": {},
                  "fallbackOutput": "extra"
                },
                "typeVersion": 3.2
              },
              {
                "id": "slack_1",
                "name": "Slack Notification",
                "type": "n8n-nodes-base.slack",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                  "blocks": [],
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "otherOptions": {}
                },
                "retryOnFail": true,
                "typeVersion": 2.3
              },
              {
                "id": "httpRequest_1",
                "name": "Backup Notification",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "method": "POST",
                  "options": {
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    },
                    "timeout": 10000
                  },
                  "requestFormat": "json",
                  "authentication": "none",
                  "jsonParameters": true,
                  "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                },
                "retryOnFail": true,
                "typeVersion": 4.2
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "agent_1"
              ],
              "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
            },
            {
              "type": "integration",
              "nodeIds": [
                "switch_1"
              ],
              "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
            },
            {
              "type": "notification",
              "nodeIds": [
                "slack_1",
                "httpRequest_1"
              ],
              "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "resilient-webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode",
                  "alwaysOutputData": true
                },
                "purpose": "Webhook that gracefully handles processing errors",
                "displayName": "webhook with error handling",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "",
                  "outputType": "output",
                  "systemMessage": "You are a helpful assistant."
                },
                "purpose": "Create an AI agent that can use tools",
                "displayName": "ai agent workflow",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Examples of modern error handling using onError property",
                "displayName": "modern error handling patterns",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.switch",
                "purpose": "Route support tickets to different teams based on keywords and categorization results"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:36.046Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "support-tickets",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode"
                },
                "typeVersion": 1,
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Webhook that gracefully handles processing errors",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
              "timestamp": "2025-08-11T10:22:36.318Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.542Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
              "timestamp": "2025-08-11T10:22:36.542Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.719Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
              "timestamp": "2025-08-11T10:22:36.719Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.905Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                "parameters": {
                  "text": "{{$json.ticket_content || $json.description || $json.message}}",
                  "outputType": "output",
                  "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_2",
              "purpose": "Create an AI agent that can use tools",
              "nodeType": "nodes-langchain.agent",
              "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
              "timestamp": "2025-08-11T10:22:36.906Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                  "method": "POST",
                  "options": {
                    "timeout": 10000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "json"
                      }
                    }
                  },
                  "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                  "sendBody": true,
                  "sendHeaders": true,
                  "bodyParameters": {
                    "parameters": []
                  },
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      }
                    ]
                  }
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Examples of modern error handling using onError property",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
              "timestamp": "2025-08-11T10:22:37.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.329Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "technical"
                            }
                          ]
                        },
                        "renameOutput": "Technical Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "billing"
                            }
                          ]
                        },
                        "renameOutput": "Billing Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equal"
                              },
                              "leftValue": "{{ $json.ai_urgency }}",
                              "rightValue": "high"
                            }
                          ]
                        },
                        "renameOutput": "Priority Queue"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "regex"
                              },
                              "leftValue": "{{ $json.description }}",
                              "rightValue": "refund|cancel|subscription"
                            }
                          ]
                        },
                        "renameOutput": "Account Management"
                      }
                    ]
                  },
                  "looseTypeValidation": false
                },
                "typeVersion": 3.2
              },
              "nodeId": "search_node_1",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "nodeType": "nodes-base.switch",
              "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
              "timestamp": "2025-08-11T10:22:37.329Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.540Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:37.540Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T10:23:20.654Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T10:23:21.004Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "timestamp": "2025-08-11T10:23:21.004Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T10:23:21.005Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T10:23:40.805Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "switch_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "switch_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.479Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3.2
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.3
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T10:23:41.479Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T10:23:41.479Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "workflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "httpMethod": "POST",
                  "path": "support-tickets",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Support Ticket Webhook",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "agent": "conversationalAgent",
                  "promptType": "define",
                  "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                  "hasOutputParser": true,
                  "outputParser": "structuredOutputParser",
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "options": {}
                },
                "name": "AI Ticket Analyzer",
                "typeVersion": 1,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "name": "Ticket Data Processor",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "switch_1",
                "type": "n8n-nodes-base.switch",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "technical"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "billing"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "escalation"
                      }
                    ]
                  },
                  "fallbackOutput": "extra",
                  "options": {}
                },
                "name": "Team Router",
                "typeVersion": 3,
                "onError": "continueRegularOutput"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "blocks": [],
                  "otherOptions": {}
                },
                "name": "Slack Notification",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "method": "POST",
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "authentication": "none",
                  "requestFormat": "json",
                  "jsonParameters": true,
                  "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}",
                  "options": {
                    "timeout": 10000,
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    }
                  }
                },
                "name": "Backup Notification",
                "typeVersion": 4,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3
              }
            ],
            "connections": {
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "output": {
          "validatedWorkflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "httpMethod": "POST",
                  "path": "support-tickets",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Support Ticket Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "agent": "conversationalAgent",
                  "promptType": "define",
                  "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                  "hasOutputParser": true,
                  "outputParser": "structuredOutputParser",
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "options": {}
                },
                "name": "AI Ticket Analyzer",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "name": "Ticket Data Processor",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "switch_1",
                "type": "n8n-nodes-base.switch",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "technical"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "billing"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "escalation"
                      }
                    ]
                  },
                  "fallbackOutput": "extra",
                  "options": {}
                },
                "name": "Team Router",
                "typeVersion": 3.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "blocks": [],
                  "otherOptions": {}
                },
                "name": "Slack Notification",
                "typeVersion": 2.3,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "method": "POST",
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "authentication": "none",
                  "requestFormat": "json",
                  "jsonParameters": true,
                  "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}",
                  "options": {
                    "timeout": 10000,
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    }
                  }
                },
                "name": "Backup Notification",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3
              }
            ],
            "connections": {
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "report": {
            "initial": {
              "workflow": {
                "errors": [
                  {
                    "node": "AI Ticket Analyzer",
                    "message": "Expression error: text: Nested expressions are not supported"
                  },
                  {
                    "node": "Support Ticket Webhook",
                    "message": "Outdated typeVersion: 1. Latest is 2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "AI Ticket Analyzer",
                    "message": "Outdated typeVersion: 1. Latest is 2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Team Router",
                    "message": "Outdated typeVersion: 3. Latest is 3.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Slack Notification",
                    "message": "Outdated typeVersion: 2. Latest is 2.3",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Backup Notification",
                    "message": "Outdated typeVersion: 4. Latest is 4.2",
                    "type": "typeVersion",
                    "severity": "error"
                  }
                ],
                "warnings": [
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  },
                  {
                    "node": "AI Ticket Analyzer",
                    "message": "AI Agent has no tools connected. Consider adding tools to enhance agent capabilities."
                  }
                ],
                "valid": false,
                "statistics": {
                  "totalNodes": 6,
                  "enabledNodes": 6,
                  "triggerNodes": 1,
                  "validConnections": 8,
                  "invalidConnections": 0,
                  "expressionsValidated": 4,
                  "errorCount": 1,
                  "warningCount": 7
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "fixesApplied": [
              {
                "type": "entity-replacement",
                "attempt": 1,
                "timestamp": "2025-08-11T10:23:40.612Z",
                "description": "Replaced 5 nodes",
                "reasoning": [
                  "Fixed nested expression error in AI Ticket Analyzer by converting multiple {{ }} expressions to single template literal format",
                  "Updated Support Ticket Webhook typeVersion from 1 to 2",
                  "Updated AI Ticket Analyzer typeVersion from 1 to 2",
                  "Updated Team Router typeVersion from 3 to 3.2",
                  "Fixed nested expressions in Slack Notification text field and updated typeVersion from 2 to 2.3",
                  "Fixed nested expressions in Backup Notification parametersJson field and updated typeVersion from 4 to 4.2"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "agent_1",
                    "webhook_1",
                    "switch_1",
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "connections": false
                }
              }
            ],
            "final": {
              "workflow": {
                "errors": [],
                "warnings": [
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  },
                  {
                    "node": "AI Ticket Analyzer",
                    "message": "AI Agent has no tools connected. Consider adding tools to enhance agent capabilities."
                  }
                ],
                "valid": true,
                "statistics": {
                  "totalNodes": 6,
                  "enabledNodes": 6,
                  "triggerNodes": 1,
                  "validConnections": 8,
                  "invalidConnections": 0,
                  "expressionsValidated": 2,
                  "errorCount": 0,
                  "warningCount": 2
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "attempts": 2
          }
        },
        "transformations": [
          "Validation Check",
          "Error Detection",
          "Automatic Fixes"
        ]
      },
      "errors": [
        {
          "type": "ValidationError",
          "message": "Error 1",
          "resolution": "Applied automatic fix",
          "attemptNumber": 1
        }
      ],
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "valid": true
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "validation",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:36.046Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "support-tickets",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1,
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Webhook that gracefully handles processing errors",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
                  "timestamp": "2025-08-11T10:22:36.318Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.542Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
                  "timestamp": "2025-08-11T10:22:36.542Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.719Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
                  "timestamp": "2025-08-11T10:22:36.719Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.905Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                    "parameters": {
                      "text": "{{$json.ticket_content || $json.description || $json.message}}",
                      "outputType": "output",
                      "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Create an AI agent that can use tools",
                  "nodeType": "nodes-langchain.agent",
                  "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
                  "timestamp": "2025-08-11T10:22:36.906Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                      "method": "POST",
                      "options": {
                        "timeout": 10000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "json"
                          }
                        }
                      },
                      "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": []
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          }
                        ]
                      }
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Examples of modern error handling using onError property",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
                  "timestamp": "2025-08-11T10:22:37.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.329Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": "Technical Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": "Billing Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equal"
                                  },
                                  "leftValue": "{{ $json.ai_urgency }}",
                                  "rightValue": "high"
                                }
                              ]
                            },
                            "renameOutput": "Priority Queue"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "regex"
                                  },
                                  "leftValue": "{{ $json.description }}",
                                  "rightValue": "refund|cancel|subscription"
                                }
                              ]
                            },
                            "renameOutput": "Account Management"
                          }
                        ]
                      },
                      "looseTypeValidation": false
                    },
                    "typeVersion": 3.2
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results",
                  "nodeType": "nodes-base.switch",
                  "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
                  "timestamp": "2025-08-11T10:22:37.329Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:20.654Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "switch_1"
                      ],
                      "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "httpRequest_1"
                      ],
                      "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                    }
                  ],
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:21.005Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "documentation",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3.2
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.3
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:36.046Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "support-tickets",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1,
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Webhook that gracefully handles processing errors",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
                  "timestamp": "2025-08-11T10:22:36.318Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.542Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
                  "timestamp": "2025-08-11T10:22:36.542Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.719Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
                  "timestamp": "2025-08-11T10:22:36.719Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.905Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                    "parameters": {
                      "text": "{{$json.ticket_content || $json.description || $json.message}}",
                      "outputType": "output",
                      "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Create an AI agent that can use tools",
                  "nodeType": "nodes-langchain.agent",
                  "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
                  "timestamp": "2025-08-11T10:22:36.906Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                      "method": "POST",
                      "options": {
                        "timeout": 10000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "json"
                          }
                        }
                      },
                      "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": []
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          }
                        ]
                      }
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Examples of modern error handling using onError property",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
                  "timestamp": "2025-08-11T10:22:37.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.329Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": "Technical Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": "Billing Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equal"
                                  },
                                  "leftValue": "{{ $json.ai_urgency }}",
                                  "rightValue": "high"
                                }
                              ]
                            },
                            "renameOutput": "Priority Queue"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "regex"
                                  },
                                  "leftValue": "{{ $json.description }}",
                                  "rightValue": "refund|cancel|subscription"
                                }
                              ]
                            },
                            "renameOutput": "Account Management"
                          }
                        ]
                      },
                      "looseTypeValidation": false
                    },
                    "typeVersion": 3.2
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results",
                  "nodeType": "nodes-base.switch",
                  "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
                  "timestamp": "2025-08-11T10:22:37.329Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:20.654Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "switch_1"
                      ],
                      "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "httpRequest_1"
                      ],
                      "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                    }
                  ],
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:21.005Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T10:23:40.805Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "switch_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "switch_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.479Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3.2
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2.3
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4.2
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:41.479Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T10:23:41.479Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "documentation": {
      "name": "Documentation",
      "success": true,
      "metrics": {
        "startTime": 1754907821861,
        "endTime": 1754907822652,
        "duration": 791,
        "memoryUsage": {
          "heapUsed": -2568472,
          "heapTotal": 37502976,
          "external": 7177065
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T10:23:41.861Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting documentation phase"
        },
        {
          "timestamp": "2025-08-11T10:23:41.862Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for documentation phase"
        },
        {
          "timestamp": "2025-08-11T10:23:42.511Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Added 3 sticky notes for documentation"
        },
        {
          "timestamp": "2025-08-11T10:23:42.652Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T10:23:42.652Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754907704984",
        "createdAt": "2025-08-11T10:21:45.682Z",
        "state": {
          "phase": "complete",
          "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.webhook",
              "config": {
                "path": "resilient-webhook",
                "onError": "continueRegularOutput",
                "httpMethod": "POST",
                "responseData": "firstEntryJson",
                "responseMode": "responseNode",
                "alwaysOutputData": true
              },
              "purpose": "Webhook that gracefully handles processing errors",
              "displayName": "webhook with error handling",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.slack",
              "config": {
                "text": "",
                "channel": "",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "resource": "message",
                "operation": "post",
                "parameters": {},
                "retryOnFail": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Send a message to Slack channel",
              "displayName": "send slack message",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-langchain.agent",
              "config": {
                "text": "",
                "outputType": "output",
                "systemMessage": "You are a helpful assistant."
              },
              "purpose": "Create an AI agent that can use tools",
              "displayName": "ai agent workflow",
              "isPreConfigured": true
            },
            {
              "id": "task_node_5",
              "type": "nodes-base.httpRequest",
              "config": {
                "url": "",
                "method": "GET",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "purpose": "Examples of modern error handling using onError property",
              "displayName": "modern error handling patterns",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.switch",
              "purpose": "Route support tickets to different teams based on keywords and categorization results"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_3",
            "task_node_4",
            "task_node_2",
            "task_node_5",
            "search_node_1"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Support Ticket Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "support-tickets",
                  "options": {},
                  "httpMethod": "POST",
                  "responseMode": "responseNode"
                },
                "typeVersion": 2
              },
              {
                "id": "agent_1",
                "name": "AI Ticket Analyzer",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                  "agent": "conversationalAgent",
                  "options": {},
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "promptType": "define",
                  "outputParser": "structuredOutputParser",
                  "hasOutputParser": true
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Ticket Data Processor",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "typeVersion": 2
              },
              {
                "id": "switch_1",
                "name": "Team Router",
                "type": "n8n-nodes-base.switch",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "outputKey": "technical",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical"
                            }
                          ]
                        },
                        "renameOutput": true
                      },
                      {
                        "outputKey": "billing",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing"
                            }
                          ]
                        },
                        "renameOutput": true
                      },
                      {
                        "outputKey": "escalation",
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": true,
                            "typeValidation": "strict"
                          },
                          "combinator": "and",
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              },
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation"
                            }
                          ]
                        },
                        "renameOutput": true
                      }
                    ]
                  },
                  "options": {},
                  "fallbackOutput": "extra"
                },
                "typeVersion": 3.2
              },
              {
                "id": "slack_1",
                "name": "Slack Notification",
                "type": "n8n-nodes-base.slack",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                  "blocks": [],
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "otherOptions": {}
                },
                "retryOnFail": true,
                "typeVersion": 2.3
              },
              {
                "id": "httpRequest_1",
                "name": "Backup Notification",
                "type": "n8n-nodes-base.httpRequest",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "method": "POST",
                  "options": {
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    },
                    "timeout": 10000
                  },
                  "requestFormat": "json",
                  "authentication": "none",
                  "jsonParameters": true,
                  "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                },
                "retryOnFail": true,
                "typeVersion": 4.2
              },
              {
                "id": "sticky_triggers_1754907822010",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  210,
                  160
                ],
                "parameters": {
                  "color": 6,
                  "width": 230,
                  "height": 480,
                  "content": "## 📥 Triggers\nWebhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_transforms_1754907822010",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  510,
                  160
                ],
                "parameters": {
                  "color": 4,
                  "width": 530,
                  "height": 480,
                  "content": "## ⚙️ Transform\nAI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails.\n\nJavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_outputs_1754907822010",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1110,
                  60
                ],
                "parameters": {
                  "color": 7,
                  "width": 530,
                  "height": 480,
                  "content": "## 🚀 Outputs\nSwitch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications.\n\nPrimary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                },
                "typeVersion": 1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "agent_1"
              ],
              "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
            },
            {
              "type": "integration",
              "nodeIds": [
                "switch_1"
              ],
              "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
            },
            {
              "type": "notification",
              "nodeIds": [
                "slack_1",
                "httpRequest_1"
              ],
              "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.webhook",
                "config": {
                  "path": "resilient-webhook",
                  "onError": "continueRegularOutput",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode",
                  "alwaysOutputData": true
                },
                "purpose": "Webhook that gracefully handles processing errors",
                "displayName": "webhook with error handling",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.slack",
                "config": {
                  "text": "",
                  "channel": "",
                  "onError": "continueRegularOutput",
                  "maxTries": 2,
                  "resource": "message",
                  "operation": "post",
                  "parameters": {},
                  "retryOnFail": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Send a message to Slack channel",
                "displayName": "send slack message",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-langchain.agent",
                "config": {
                  "text": "",
                  "outputType": "output",
                  "systemMessage": "You are a helpful assistant."
                },
                "purpose": "Create an AI agent that can use tools",
                "displayName": "ai agent workflow",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "task_node_5",
                "type": "nodes-base.httpRequest",
                "config": {
                  "url": "",
                  "method": "GET",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 2000
                },
                "purpose": "Examples of modern error handling using onError property",
                "displayName": "modern error handling patterns",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_5",
              "timestamp": "2025-08-11T10:22:03.529Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.switch",
                "purpose": "Route support tickets to different teams based on keywords and categorization results"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T10:22:03.783Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:36.046Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                "onError": "continueRegularOutput",
                "parameters": {
                  "path": "support-tickets",
                  "httpMethod": "POST",
                  "responseData": "firstEntryJson",
                  "responseMode": "responseNode"
                },
                "typeVersion": 1,
                "alwaysOutputData": true
              },
              "nodeId": "task_node_1",
              "purpose": "Webhook that gracefully handles processing errors",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
              "timestamp": "2025-08-11T10:22:36.318Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.542Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_3",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
              "timestamp": "2025-08-11T10:22:36.542Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.719Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                "onError": "continueRegularOutput",
                "maxTries": 2,
                "parameters": {
                  "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                  "select": "channel",
                  "resource": "message",
                  "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                  "operation": "post",
                  "parameters": {}
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_4",
              "purpose": "Send a message to Slack channel",
              "nodeType": "nodes-base.slack",
              "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
              "timestamp": "2025-08-11T10:22:36.719Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:36.905Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                "parameters": {
                  "text": "{{$json.ticket_content || $json.description || $json.message}}",
                  "outputType": "output",
                  "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                },
                "typeVersion": 1
              },
              "nodeId": "task_node_2",
              "purpose": "Create an AI agent that can use tools",
              "nodeType": "nodes-langchain.agent",
              "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
              "timestamp": "2025-08-11T10:22:36.906Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.123Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                  "method": "POST",
                  "options": {
                    "timeout": 10000,
                    "response": {
                      "response": {
                        "fullResponse": false,
                        "responseFormat": "json"
                      }
                    }
                  },
                  "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                  "sendBody": true,
                  "sendHeaders": true,
                  "bodyParameters": {
                    "parameters": []
                  },
                  "headerParameters": {
                    "parameters": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      }
                    ]
                  }
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 2000
              },
              "nodeId": "task_node_5",
              "purpose": "Examples of modern error handling using onError property",
              "nodeType": "nodes-base.httpRequest",
              "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
              "timestamp": "2025-08-11T10:22:37.123Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_5",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.329Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "technical"
                            }
                          ]
                        },
                        "renameOutput": "Technical Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "contains"
                              },
                              "leftValue": "{{ $json.ai_category }}",
                              "rightValue": "billing"
                            }
                          ]
                        },
                        "renameOutput": "Billing Team"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "equal"
                              },
                              "leftValue": "{{ $json.ai_urgency }}",
                              "rightValue": "high"
                            }
                          ]
                        },
                        "renameOutput": "Priority Queue"
                      },
                      {
                        "conditions": {
                          "options": {
                            "leftValue": "",
                            "caseSensitive": false,
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "operator": {
                                "type": "string",
                                "operation": "regex"
                              },
                              "leftValue": "{{ $json.description }}",
                              "rightValue": "refund|cancel|subscription"
                            }
                          ]
                        },
                        "renameOutput": "Account Management"
                      }
                    ]
                  },
                  "looseTypeValidation": false
                },
                "typeVersion": 3.2
              },
              "nodeId": "search_node_1",
              "purpose": "Route support tickets to different teams based on keywords and categorization results",
              "nodeType": "nodes-base.switch",
              "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
              "timestamp": "2025-08-11T10:22:37.329Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T10:22:37.540Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T10:22:37.540Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T10:23:20.654Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T10:23:21.004Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "timestamp": "2025-08-11T10:23:21.004Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T10:23:21.005Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T10:23:40.805Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "switch_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "agent_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "switch_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "slack_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.207Z"
            },
            {
              "type": "validateNode",
              "nodeId": "httpRequest_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 2,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T10:23:41.479Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3.2
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.3
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T10:23:41.479Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T10:23:41.479Z"
            },
            {
              "type": "setPhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T10:23:42.010Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3.2
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.3
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2
                  },
                  {
                    "id": "sticky_triggers_1754907822010",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      210,
                      160
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 230,
                      "height": 480,
                      "content": "## 📥 Triggers\nWebhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754907822010",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      510,
                      160
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 530,
                      "height": 480,
                      "content": "## ⚙️ Transform\nAI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails.\n\nJavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754907822010",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1110,
                      60
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 530,
                      "height": 480,
                      "content": "## 🚀 Outputs\nSwitch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications.\n\nPrimary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T10:23:42.270Z"
            },
            {
              "type": "completePhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T10:23:42.270Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "validatedWorkflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "httpMethod": "POST",
                  "path": "support-tickets",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Support Ticket Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "agent": "conversationalAgent",
                  "promptType": "define",
                  "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                  "hasOutputParser": true,
                  "outputParser": "structuredOutputParser",
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "options": {}
                },
                "name": "AI Ticket Analyzer",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "name": "Ticket Data Processor",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "switch_1",
                "type": "n8n-nodes-base.switch",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "technical"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "billing"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "escalation"
                      }
                    ]
                  },
                  "fallbackOutput": "extra",
                  "options": {}
                },
                "name": "Team Router",
                "typeVersion": 3.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "blocks": [],
                  "otherOptions": {}
                },
                "name": "Slack Notification",
                "typeVersion": 2.3,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "method": "POST",
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "authentication": "none",
                  "requestFormat": "json",
                  "jsonParameters": true,
                  "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}",
                  "options": {
                    "timeout": 10000,
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    }
                  }
                },
                "name": "Backup Notification",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3
              }
            ],
            "connections": {
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          }
        },
        "output": {
          "documentedWorkflow": {
            "name": "Customer Support Ticket Processing with AI Categorization",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "httpMethod": "POST",
                  "path": "support-tickets",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Support Ticket Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "agent_1",
                "type": "@n8n/n8n-nodes-langchain.agent",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "agent": "conversationalAgent",
                  "promptType": "define",
                  "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                  "hasOutputParser": true,
                  "outputParser": "structuredOutputParser",
                  "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                  "options": {}
                },
                "name": "AI Ticket Analyzer",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                },
                "name": "Ticket Data Processor",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "switch_1",
                "type": "n8n-nodes-base.switch",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "mode": "rules",
                  "rules": {
                    "values": [
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "technical",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "technical"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "billing",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "billing"
                      },
                      {
                        "conditions": {
                          "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict"
                          },
                          "conditions": [
                            {
                              "leftValue": "={{ $json.assignedTeam }}",
                              "rightValue": "escalation",
                              "operator": {
                                "type": "string",
                                "operation": "equals"
                              }
                            }
                          ],
                          "combinator": "and"
                        },
                        "renameOutput": true,
                        "outputKey": "escalation"
                      }
                    ]
                  },
                  "fallbackOutput": "extra",
                  "options": {}
                },
                "name": "Team Router",
                "typeVersion": 3.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "slack_1",
                "type": "n8n-nodes-base.slack",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                  "channel": "={{ $json.slackChannel }}",
                  "username": "Support Bot",
                  "iconEmoji": ":ticket:",
                  "attachments": [],
                  "blocks": [],
                  "otherOptions": {}
                },
                "name": "Slack Notification",
                "typeVersion": 2.3,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 2
              },
              {
                "id": "httpRequest_1",
                "type": "n8n-nodes-base.httpRequest",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "method": "POST",
                  "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                  "authentication": "none",
                  "requestFormat": "json",
                  "jsonParameters": true,
                  "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}",
                  "options": {
                    "timeout": 10000,
                    "retry": {
                      "enabled": true,
                      "maxAttempts": 3,
                      "waitBetween": 1000
                    }
                  }
                },
                "name": "Backup Notification",
                "typeVersion": 4.2,
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3
              },
              {
                "id": "sticky_triggers_1754907822010",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  210,
                  160
                ],
                "parameters": {
                  "content": "## 📥 Triggers\nWebhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur.",
                  "height": 480,
                  "width": 230,
                  "color": 6
                }
              },
              {
                "id": "sticky_transforms_1754907822010",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  510,
                  160
                ],
                "parameters": {
                  "content": "## ⚙️ Transform\nAI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails.\n\nJavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications.",
                  "height": 480,
                  "width": 530,
                  "color": 4
                }
              },
              {
                "id": "sticky_outputs_1754907822010",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1110,
                  60
                ],
                "parameters": {
                  "content": "## 🚀 Outputs\nSwitch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications.\n\nPrimary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling.",
                  "height": 480,
                  "width": 530,
                  "color": 7
                }
              }
            ],
            "connections": {
              "Support Ticket Webhook": {
                "main": [
                  [
                    {
                      "node": "AI Ticket Analyzer",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Ticket Analyzer": {
                "main": [
                  [
                    {
                      "node": "Ticket Data Processor",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Ticket Data Processor": {
                "main": [
                  [
                    {
                      "node": "Team Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Team Router": {
                "main": [
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Slack Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Slack Notification": {
                "main": [
                  [
                    {
                      "node": "Backup Notification",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "stickyNotesAdded": 3
        },
        "transformations": [
          "Documentation Generation",
          "Sticky Note Placement",
          "Workflow Finalization"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "documentation",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3.2
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.3
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:36.046Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "support-tickets",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1,
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Webhook that gracefully handles processing errors",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
                  "timestamp": "2025-08-11T10:22:36.318Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.542Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
                  "timestamp": "2025-08-11T10:22:36.542Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.719Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
                  "timestamp": "2025-08-11T10:22:36.719Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.905Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                    "parameters": {
                      "text": "{{$json.ticket_content || $json.description || $json.message}}",
                      "outputType": "output",
                      "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Create an AI agent that can use tools",
                  "nodeType": "nodes-langchain.agent",
                  "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
                  "timestamp": "2025-08-11T10:22:36.906Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                      "method": "POST",
                      "options": {
                        "timeout": 10000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "json"
                          }
                        }
                      },
                      "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": []
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          }
                        ]
                      }
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Examples of modern error handling using onError property",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
                  "timestamp": "2025-08-11T10:22:37.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.329Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": "Technical Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": "Billing Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equal"
                                  },
                                  "leftValue": "{{ $json.ai_urgency }}",
                                  "rightValue": "high"
                                }
                              ]
                            },
                            "renameOutput": "Priority Queue"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "regex"
                                  },
                                  "leftValue": "{{ $json.description }}",
                                  "rightValue": "refund|cancel|subscription"
                                }
                              ]
                            },
                            "renameOutput": "Account Management"
                          }
                        ]
                      },
                      "looseTypeValidation": false
                    },
                    "typeVersion": 3.2
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results",
                  "nodeType": "nodes-base.switch",
                  "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
                  "timestamp": "2025-08-11T10:22:37.329Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:20.654Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "switch_1"
                      ],
                      "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "httpRequest_1"
                      ],
                      "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                    }
                  ],
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:21.005Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T10:23:40.805Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "switch_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "switch_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.479Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3.2
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2.3
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4.2
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:41.479Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T10:23:41.479Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "complete",
              "userPrompt": "Create an n8n workflow that receives customer support tickets via webhook, uses an AI agent to categorize the urgency and sentiment, automatically assigns tickets to the right team based on keywords, and sends Slack notifications with different priority levels. Include retry logic and error handling",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.webhook",
                  "config": {
                    "path": "resilient-webhook",
                    "onError": "continueRegularOutput",
                    "httpMethod": "POST",
                    "responseData": "firstEntryJson",
                    "responseMode": "responseNode",
                    "alwaysOutputData": true
                  },
                  "purpose": "Webhook that gracefully handles processing errors",
                  "displayName": "webhook with error handling",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.slack",
                  "config": {
                    "text": "",
                    "channel": "",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "resource": "message",
                    "operation": "post",
                    "parameters": {},
                    "retryOnFail": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Send a message to Slack channel",
                  "displayName": "send slack message",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-langchain.agent",
                  "config": {
                    "text": "",
                    "outputType": "output",
                    "systemMessage": "You are a helpful assistant."
                  },
                  "purpose": "Create an AI agent that can use tools",
                  "displayName": "ai agent workflow",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_5",
                  "type": "nodes-base.httpRequest",
                  "config": {
                    "url": "",
                    "method": "GET",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "purpose": "Examples of modern error handling using onError property",
                  "displayName": "modern error handling patterns",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.switch",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_3",
                "task_node_4",
                "task_node_2",
                "task_node_5",
                "search_node_1"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Customer Support Ticket Processing with AI Categorization",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Support Ticket Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "support-tickets",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "agent_1",
                    "name": "AI Ticket Analyzer",
                    "type": "@n8n/n8n-nodes-langchain.agent",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                      "agent": "conversationalAgent",
                      "options": {},
                      "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                      "promptType": "define",
                      "outputParser": "structuredOutputParser",
                      "hasOutputParser": true
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Ticket Data Processor",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "switch_1",
                    "name": "Team Router",
                    "type": "n8n-nodes-base.switch",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "outputKey": "technical",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "billing",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": true
                          },
                          {
                            "outputKey": "escalation",
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": true,
                                "typeValidation": "strict"
                              },
                              "combinator": "and",
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equals"
                                  },
                                  "leftValue": "={{ $json.assignedTeam }}",
                                  "rightValue": "escalation"
                                }
                              ]
                            },
                            "renameOutput": true
                          }
                        ]
                      },
                      "options": {},
                      "fallbackOutput": "extra"
                    },
                    "typeVersion": 3.2
                  },
                  {
                    "id": "slack_1",
                    "name": "Slack Notification",
                    "type": "n8n-nodes-base.slack",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                      "blocks": [],
                      "channel": "={{ $json.slackChannel }}",
                      "username": "Support Bot",
                      "iconEmoji": ":ticket:",
                      "attachments": [],
                      "otherOptions": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.3
                  },
                  {
                    "id": "httpRequest_1",
                    "name": "Backup Notification",
                    "type": "n8n-nodes-base.httpRequest",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "method": "POST",
                      "options": {
                        "retry": {
                          "enabled": true,
                          "maxAttempts": 3,
                          "waitBetween": 1000
                        },
                        "timeout": 10000
                      },
                      "requestFormat": "json",
                      "authentication": "none",
                      "jsonParameters": true,
                      "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                    },
                    "retryOnFail": true,
                    "typeVersion": 4.2
                  },
                  {
                    "id": "sticky_triggers_1754907822010",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      210,
                      160
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 230,
                      "height": 480,
                      "content": "## 📥 Triggers\nWebhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754907822010",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      510,
                      160
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 530,
                      "height": 480,
                      "content": "## ⚙️ Transform\nAI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails.\n\nJavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754907822010",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1110,
                      60
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 530,
                      "height": 480,
                      "content": "## 🚀 Outputs\nSwitch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications.\n\nPrimary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "Team Router": {
                    "main": [
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Slack Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "AI Ticket Analyzer": {
                    "main": [
                      [
                        {
                          "node": "Ticket Data Processor",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Slack Notification": {
                    "main": [
                      [
                        {
                          "node": "Backup Notification",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Ticket Data Processor": {
                    "main": [
                      [
                        {
                          "node": "Team Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Support Ticket Webhook": {
                    "main": [
                      [
                        {
                          "node": "AI Ticket Analyzer",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "agent_1"
                  ],
                  "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                },
                {
                  "type": "integration",
                  "nodeIds": [
                    "switch_1"
                  ],
                  "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "slack_1",
                    "httpRequest_1"
                  ],
                  "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.webhook",
                    "config": {
                      "path": "resilient-webhook",
                      "onError": "continueRegularOutput",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode",
                      "alwaysOutputData": true
                    },
                    "purpose": "Webhook that gracefully handles processing errors",
                    "displayName": "webhook with error handling",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.slack",
                    "config": {
                      "text": "",
                      "channel": "",
                      "onError": "continueRegularOutput",
                      "maxTries": 2,
                      "resource": "message",
                      "operation": "post",
                      "parameters": {},
                      "retryOnFail": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Send a message to Slack channel",
                    "displayName": "send slack message",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-langchain.agent",
                    "config": {
                      "text": "",
                      "outputType": "output",
                      "systemMessage": "You are a helpful assistant."
                    },
                    "purpose": "Create an AI agent that can use tools",
                    "displayName": "ai agent workflow",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "task_node_5",
                    "type": "nodes-base.httpRequest",
                    "config": {
                      "url": "",
                      "method": "GET",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 2000
                    },
                    "purpose": "Examples of modern error handling using onError property",
                    "displayName": "modern error handling patterns",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_5",
                  "timestamp": "2025-08-11T10:22:03.529Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.switch",
                    "purpose": "Route support tickets to different teams based on keywords and categorization results"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T10:22:03.783Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:36.046Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Webhook endpoint for receiving customer support tickets. Configured with error handling to gracefully process incoming tickets and continue workflow execution even if downstream processing fails.",
                    "onError": "continueRegularOutput",
                    "parameters": {
                      "path": "support-tickets",
                      "httpMethod": "POST",
                      "responseData": "firstEntryJson",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1,
                    "alwaysOutputData": true
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Webhook that gracefully handles processing errors",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Customized the webhook path from 'resilient-webhook' to 'support-tickets' to clearly indicate this endpoint receives customer support tickets",
                  "timestamp": "2025-08-11T10:22:36.318Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.542Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform webhook ticket data and add team assignment logic based on keywords and AI categorization",
                    "parameters": {
                      "jsCode": "// Transform customer support tickets and assign teams\nconst results = [];\n\nfor (const item of items) {\n  try {\n    const ticket = item.json;\n    \n    // Extract ticket data\n    const ticketData = {\n      id: ticket.id || `ticket_${Date.now()}`,\n      subject: ticket.subject || '',\n      description: ticket.description || ticket.body || '',\n      customer: {\n        name: ticket.customer_name || ticket.name || 'Unknown',\n        email: ticket.customer_email || ticket.email || '',\n        priority: ticket.priority || 'medium'\n      },\n      urgency: ticket.urgency || 'medium',\n      sentiment: ticket.sentiment || 'neutral',\n      category: ticket.category || 'general',\n      processedAt: new Date().toISOString(),\n      status: 'new'\n    };\n    \n    // Team assignment logic based on keywords\n    let assignedTeam = 'general';\n    const content = (ticketData.subject + ' ' + ticketData.description).toLowerCase();\n    \n    // Technical keywords\n    if (content.match(/\\b(bug|error|crash|api|integration|technical|server|database|login|password)\\b/)) {\n      assignedTeam = 'technical';\n    }\n    // Billing keywords\n    else if (content.match(/\\b(billing|payment|invoice|refund|charge|subscription|price|cost)\\b/)) {\n      assignedTeam = 'billing';\n    }\n    // Sales keywords\n    else if (content.match(/\\b(upgrade|demo|trial|purchase|quote|sales|pricing|plan)\\b/)) {\n      assignedTeam = 'sales';\n    }\n    // Account management keywords\n    else if (content.match(/\\b(account|profile|settings|permissions|access|user)\\b/)) {\n      assignedTeam = 'account';\n    }\n    \n    // Priority mapping for Slack notifications\n    let slackPriority = 'normal';\n    let slackColor = '#36a64f'; // green\n    \n    if (ticketData.urgency === 'high' || ticketData.customer.priority === 'high') {\n      slackPriority = 'high';\n      slackColor = '#ff0000'; // red\n    } else if (ticketData.urgency === 'medium' || ticketData.customer.priority === 'medium') {\n      slackPriority = 'medium';\n      slackColor = '#ffaa00'; // orange\n    }\n    \n    // Sentiment-based adjustments\n    if (ticketData.sentiment === 'negative') {\n      slackPriority = slackPriority === 'low' ? 'medium' : 'high';\n      slackColor = ticketData.sentiment === 'negative' && slackPriority === 'high' ? '#cc0000' : slackColor;\n    }\n    \n    results.push({\n      json: {\n        ...ticketData,\n        assignedTeam,\n        slackNotification: {\n          priority: slackPriority,\n          color: slackColor,\n          channel: assignedTeam === 'technical' ? '#tech-support' : \n                  assignedTeam === 'billing' ? '#billing-support' :\n                  assignedTeam === 'sales' ? '#sales-team' : '#general-support',\n          urgentChannel: slackPriority === 'high' ? '#urgent-tickets' : null\n        },\n        retryConfig: {\n          maxRetries: slackPriority === 'high' ? 5 : 3,\n          retryDelay: slackPriority === 'high' ? 30000 : 60000 // ms\n        }\n      }\n    });\n    \n  } catch (error) {\n    // Error handling - create error ticket entry\n    results.push({\n      json: {\n        id: `error_${Date.now()}`,\n        error: true,\n        errorMessage: error.message,\n        originalData: item.json,\n        processedAt: new Date().toISOString(),\n        assignedTeam: 'technical',\n        slackNotification: {\n          priority: 'high',\n          color: '#ff0000',\n          channel: '#tech-support',\n          urgentChannel: '#urgent-tickets'\n        }\n      }\n    });\n  }\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle customer support ticket processing",
                  "timestamp": "2025-08-11T10:22:36.542Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.719Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send Slack notifications for customer support tickets with priority-based formatting and team mentions",
                    "onError": "continueRegularOutput",
                    "maxTries": 2,
                    "parameters": {
                      "text": "🎫 *New Support Ticket - {{$json.urgency === 'high' ? '🔴 HIGH PRIORITY' : $json.urgency === 'medium' ? '🟡 MEDIUM' : '🟢 LOW'}}*\n\n*Ticket ID:* {{$json.ticketId}}\n*Customer:* {{$json.customerName}}\n*Subject:* {{$json.subject}}\n*Urgency:* {{$json.urgency}}\n*Sentiment:* {{$json.sentiment}}\n*Assigned Team:* {{$json.assignedTeam}}\n\n*Description:*\n{{$json.description}}\n\n{{$json.urgency === 'high' ? '<!channel> Immediate attention required!' : $json.urgency === 'medium' ? 'Please review when available' : ''}}",
                      "select": "channel",
                      "resource": "message",
                      "channelId": "{{$json.assignedTeam === 'technical' ? 'C1234567890' : $json.assignedTeam === 'billing' ? 'C0987654321' : 'C1122334455'}}",
                      "operation": "post",
                      "parameters": {}
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send a message to Slack channel",
                  "nodeType": "nodes-base.slack",
                  "reasoning": "Customized the template to handle customer support ticket notifications with dynamic priority levels",
                  "timestamp": "2025-08-11T10:22:36.719Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:36.905Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI agent that analyzes customer support tickets to categorize urgency (low/medium/high/critical) and sentiment (positive/neutral/negative) for automated routing and prioritization",
                    "parameters": {
                      "text": "{{$json.ticket_content || $json.description || $json.message}}",
                      "outputType": "output",
                      "systemMessage": "You are a customer support ticket analysis assistant. Analyze the provided ticket content and return a JSON response with the following structure:\n\n{\n  \"urgency\": \"low|medium|high|critical\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"category\": \"technical|billing|general|bug|feature_request\",\n  \"reasoning\": \"Brief explanation of the classification\"\n}\n\nClassification guidelines:\n- CRITICAL: System down, security issues, data loss\n- HIGH: Major functionality broken, multiple users affected\n- MEDIUM: Single user issues, minor bugs, feature requests\n- LOW: Questions, documentation requests, general inquiries\n\nExtract relevant keywords that could help with team assignment (e.g., \"payment\", \"login\", \"API\", \"mobile\", \"database\")."
                    },
                    "typeVersion": 1
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Create an AI agent that can use tools",
                  "nodeType": "nodes-langchain.agent",
                  "reasoning": "Customized the text parameter to map to common ticket content fields (ticket_content, description, or message) using fallback syntax",
                  "timestamp": "2025-08-11T10:22:36.906Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.123Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "HTTP Request node for sending Slack notifications with priority-based formatting and retry logic for customer support ticket workflow",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
                      "method": "POST",
                      "options": {
                        "timeout": 10000,
                        "response": {
                          "response": {
                            "fullResponse": false,
                            "responseFormat": "json"
                          }
                        }
                      },
                      "jsonBody": "{\n  \"channel\": \"{{$json.priority === 'high' ? '#support-urgent' : '#support-general'}}\",\n  \"username\": \"Support Bot\",\n  \"icon_emoji\": \"{{$json.priority === 'high' ? ':rotating_light:' : ':ticket:'}}\",\n  \"text\": \"{{$json.priority === 'high' ? '🚨 HIGH PRIORITY TICKET' : '📋 New Support Ticket'}}\",\n  \"attachments\": [\n    {\n      \"color\": \"{{$json.priority === 'high' ? 'danger' : ($json.sentiment === 'negative' ? 'warning' : 'good')}}\",\n      \"fields\": [\n        {\n          \"title\": \"Ticket ID\",\n          \"value\": \"{{$json.ticketId}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{$json.priority.toUpperCase()}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Category\",\n          \"value\": \"{{$json.category}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Assigned Team\",\n          \"value\": \"{{$json.assignedTeam}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Sentiment\",\n          \"value\": \"{{$json.sentiment}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Customer\",\n          \"value\": \"{{$json.customerEmail}}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{$json.subject}}\",\n          \"short\": false\n        },\n        {\n          \"title\": \"Description\",\n          \"value\": \"{{$json.description.length > 200 ? $json.description.substring(0, 200) + '...' : $json.description}}\",\n          \"short\": false\n        }\n      ],\n      \"footer\": \"Support Ticket System\",\n      \"ts\": \"{{Math.floor(Date.now() / 1000)}}\"\n    }\n  ]\n}",
                      "sendBody": true,
                      "sendHeaders": true,
                      "bodyParameters": {
                        "parameters": []
                      },
                      "headerParameters": {
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "value": "application/json"
                          }
                        ]
                      }
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 2000
                  },
                  "nodeId": "task_node_5",
                  "purpose": "Examples of modern error handling using onError property",
                  "nodeType": "nodes-base.httpRequest",
                  "reasoning": "Customized the template to create two HTTP Request nodes for the customer support ticket workflow",
                  "timestamp": "2025-08-11T10:22:37.123Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_5",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.329Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes support tickets to appropriate teams based on AI categorization and keywords",
                    "parameters": {
                      "mode": "rules",
                      "rules": {
                        "values": [
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "technical"
                                }
                              ]
                            },
                            "renameOutput": "Technical Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "contains"
                                  },
                                  "leftValue": "{{ $json.ai_category }}",
                                  "rightValue": "billing"
                                }
                              ]
                            },
                            "renameOutput": "Billing Team"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "equal"
                                  },
                                  "leftValue": "{{ $json.ai_urgency }}",
                                  "rightValue": "high"
                                }
                              ]
                            },
                            "renameOutput": "Priority Queue"
                          },
                          {
                            "conditions": {
                              "options": {
                                "leftValue": "",
                                "caseSensitive": false,
                                "typeValidation": "strict"
                              },
                              "conditions": [
                                {
                                  "operator": {
                                    "type": "string",
                                    "operation": "regex"
                                  },
                                  "leftValue": "{{ $json.description }}",
                                  "rightValue": "refund|cancel|subscription"
                                }
                              ]
                            },
                            "renameOutput": "Account Management"
                          }
                        ]
                      },
                      "looseTypeValidation": false
                    },
                    "typeVersion": 3.2
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Route support tickets to different teams based on keywords and categorization results",
                  "nodeType": "nodes-base.switch",
                  "reasoning": "This Switch node configuration routes support tickets based on AI categorization results and keyword matching",
                  "timestamp": "2025-08-11T10:22:37.329Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T10:22:37.540Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:20.654Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: {{ $json.subject }} - {{ $json.description }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "🎫 *New Support Ticket - {{ $json.priority }} Priority*\n\n*Ticket ID:* {{ $json.ticket.id }}\n*Subject:* {{ $json.ticket.subject }}\n*Customer:* {{ $json.ticket.customer }}\n*Team:* {{ $json.assignedTeam }}\n*Urgency:* {{ $json.analysis.urgency }}\n*Sentiment:* {{ $json.analysis.sentiment }}\n\n*Description:*\n{{ $json.ticket.description }}\n\n*AI Analysis:* {{ $json.analysis.reasoning }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket {{ $json.ticket.id }}\",\n  \"channel\": \"{{ $json.slackChannel }}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"{{ $json.ticket.subject }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"{{ $json.priority }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"{{ $json.assignedTeam }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"{{ $json.analysis.urgency }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "agent_1"
                      ],
                      "description": "AI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "JavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                    },
                    {
                      "type": "integration",
                      "nodeIds": [
                        "switch_1"
                      ],
                      "description": "Switch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "slack_1",
                        "httpRequest_1"
                      ],
                      "description": "Primary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                    }
                  ],
                  "timestamp": "2025-08-11T10:23:21.004Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T10:23:21.005Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T10:23:40.805Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "switch_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "agent_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "switch_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "slack_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.207Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "httpRequest_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 2,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T10:23:41.479Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3.2
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2.3
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4.2
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:41.479Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T10:23:41.479Z"
                },
                {
                  "type": "setPhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T10:23:42.010Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Customer Support Ticket Processing with AI Categorization",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Support Ticket Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "support-tickets",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "agent_1",
                        "name": "AI Ticket Analyzer",
                        "type": "@n8n/n8n-nodes-langchain.agent",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "text": "{{ `You are a customer support ticket analyzer. Analyze the following ticket and provide:\n1. Urgency level (low/medium/high/critical)\n2. Sentiment (positive/neutral/negative)\n3. Brief reasoning\n\nTicket: ${$json.subject} - ${$json.description}` }}",
                          "agent": "conversationalAgent",
                          "options": {},
                          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urgency\": {\n      \"type\": \"string\",\n      \"enum\": [\"low\", \"medium\", \"high\", \"critical\"]\n    },\n    \"sentiment\": {\n      \"type\": \"string\",\n      \"enum\": [\"positive\", \"neutral\", \"negative\"]\n    },\n    \"reasoning\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"urgency\", \"sentiment\", \"reasoning\"]\n}",
                          "promptType": "define",
                          "outputParser": "structuredOutputParser",
                          "hasOutputParser": true
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Ticket Data Processor",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform customer support tickets and assign teams based on keywords and AI categorization\nconst ticketData = $input.first();\nconst aiAnalysis = $input.last();\n\n// Extract ticket information\nconst ticket = {\n  id: ticketData.json.id || Date.now(),\n  subject: ticketData.json.subject || '',\n  description: ticketData.json.description || '',\n  customer: ticketData.json.customer || 'Unknown',\n  email: ticketData.json.email || '',\n  timestamp: new Date().toISOString()\n};\n\n// Extract AI analysis\nconst analysis = {\n  urgency: aiAnalysis.json.urgency || 'medium',\n  sentiment: aiAnalysis.json.sentiment || 'neutral',\n  reasoning: aiAnalysis.json.reasoning || 'No analysis available'\n};\n\n// Team assignment logic based on keywords\nfunction assignTeam(subject, description, urgency) {\n  const content = (subject + ' ' + description).toLowerCase();\n  \n  // Critical issues go to escalation team\n  if (urgency === 'critical') {\n    return 'escalation';\n  }\n  \n  // Technical keywords\n  if (content.includes('api') || content.includes('integration') || content.includes('bug') || content.includes('error')) {\n    return 'technical';\n  }\n  \n  // Billing keywords\n  if (content.includes('billing') || content.includes('payment') || content.includes('invoice') || content.includes('refund')) {\n    return 'billing';\n  }\n  \n  // Account keywords\n  if (content.includes('account') || content.includes('login') || content.includes('password') || content.includes('access')) {\n    return 'account';\n  }\n  \n  // Default to general support\n  return 'general';\n}\n\nconst assignedTeam = assignTeam(ticket.subject, ticket.description, analysis.urgency);\n\n// Priority mapping for notifications\nconst priorityMap = {\n  'critical': 'HIGH',\n  'high': 'HIGH', \n  'medium': 'MEDIUM',\n  'low': 'LOW'\n};\n\nreturn {\n  json: {\n    ticket: ticket,\n    analysis: analysis,\n    assignedTeam: assignedTeam,\n    priority: priorityMap[analysis.urgency],\n    slackChannel: `#support-${assignedTeam}`,\n    processed: true\n  }\n};"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "switch_1",
                        "name": "Team Router",
                        "type": "n8n-nodes-base.switch",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "mode": "rules",
                          "rules": {
                            "values": [
                              {
                                "outputKey": "technical",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "technical"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "billing",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "billing"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              },
                              {
                                "outputKey": "escalation",
                                "conditions": {
                                  "options": {
                                    "leftValue": "",
                                    "caseSensitive": true,
                                    "typeValidation": "strict"
                                  },
                                  "combinator": "and",
                                  "conditions": [
                                    {
                                      "operator": {
                                        "type": "string",
                                        "operation": "equals"
                                      },
                                      "leftValue": "={{ $json.assignedTeam }}",
                                      "rightValue": "escalation"
                                    }
                                  ]
                                },
                                "renameOutput": true
                              }
                            ]
                          },
                          "options": {},
                          "fallbackOutput": "extra"
                        },
                        "typeVersion": 3.2
                      },
                      {
                        "id": "slack_1",
                        "name": "Slack Notification",
                        "type": "n8n-nodes-base.slack",
                        "onError": "continueRegularOutput",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "text": "{{ `🎫 *New Support Ticket - ${$json.priority} Priority*\n\n*Ticket ID:* ${$json.ticket.id}\n*Subject:* ${$json.ticket.subject}\n*Customer:* ${$json.ticket.customer}\n*Team:* ${$json.assignedTeam}\n*Urgency:* ${$json.analysis.urgency}\n*Sentiment:* ${$json.analysis.sentiment}\n\n*Description:*\n${$json.ticket.description}\n\n*AI Analysis:* ${$json.analysis.reasoning}` }}",
                          "blocks": [],
                          "channel": "={{ $json.slackChannel }}",
                          "username": "Support Bot",
                          "iconEmoji": ":ticket:",
                          "attachments": [],
                          "otherOptions": {}
                        },
                        "retryOnFail": true,
                        "typeVersion": 2.3
                      },
                      {
                        "id": "httpRequest_1",
                        "name": "Backup Notification",
                        "type": "n8n-nodes-base.httpRequest",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "url": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                          "method": "POST",
                          "options": {
                            "retry": {
                              "enabled": true,
                              "maxAttempts": 3,
                              "waitBetween": 1000
                            },
                            "timeout": 10000
                          },
                          "requestFormat": "json",
                          "authentication": "none",
                          "jsonParameters": true,
                          "parametersJson": "{{ `{\n  \"text\": \"🚨 *BACKUP NOTIFICATION* - Support Ticket ${$json.ticket.id}\",\n  \"channel\": \"${$json.slackChannel}\",\n  \"username\": \"Support Bot Backup\",\n  \"icon_emoji\": \":warning:\",\n  \"attachments\": [\n    {\n      \"color\": \"${$json.priority === 'HIGH' ? 'danger' : ($json.priority === 'MEDIUM' ? 'warning' : 'good')}\",\n      \"fields\": [\n        {\n          \"title\": \"Subject\",\n          \"value\": \"${$json.ticket.subject}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Priority\",\n          \"value\": \"${$json.priority}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Team\",\n          \"value\": \"${$json.assignedTeam}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Urgency\",\n          \"value\": \"${$json.analysis.urgency}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}` }}"
                        },
                        "retryOnFail": true,
                        "typeVersion": 4.2
                      },
                      {
                        "id": "sticky_triggers_1754907822010",
                        "name": "Triggers Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          210,
                          160
                        ],
                        "parameters": {
                          "color": 6,
                          "width": 230,
                          "height": 480,
                          "content": "## 📥 Triggers\nWebhook endpoint receives incoming customer support tickets via HTTP POST requests. Configured with error handling to gracefully process tickets and stop workflow execution if critical errors occur."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_transforms_1754907822010",
                        "name": "Transform Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          510,
                          160
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 530,
                          "height": 480,
                          "content": "## ⚙️ Transform\nAI agent analyzes ticket content to categorize urgency levels and sentiment, providing structured output for automated routing decisions. Continues workflow execution even if AI analysis fails.\n\nJavaScript code transforms ticket data, applies team assignment logic based on keywords and AI categorization, and prepares structured data for routing and notifications."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_outputs_1754907822010",
                        "name": "Outputs Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1110,
                          60
                        ],
                        "parameters": {
                          "color": 7,
                          "width": 530,
                          "height": 480,
                          "content": "## 🚀 Outputs\nSwitch node routes processed tickets to appropriate team channels based on assigned team values from the data processor, enabling targeted notifications.\n\nPrimary Slack notification sends formatted ticket details to team-specific channels with priority-based formatting. Backup HTTP request provides redundant notification delivery with retry logic and error handling."
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "Team Router": {
                        "main": [
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Slack Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "AI Ticket Analyzer": {
                        "main": [
                          [
                            {
                              "node": "Ticket Data Processor",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Slack Notification": {
                        "main": [
                          [
                            {
                              "node": "Backup Notification",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Ticket Data Processor": {
                        "main": [
                          [
                            {
                              "node": "Team Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Support Ticket Webhook": {
                        "main": [
                          [
                            {
                              "node": "AI Ticket Analyzer",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T10:23:42.270Z"
                },
                {
                  "type": "completePhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T10:23:42.270Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    }
  },
  "summary": {
    "totalNodes": 9,
    "totalConnections": 5,
    "validationAttempts": 2,
    "errorsFixed": 1,
    "stickyNotesAdded": 3,
    "performanceScore": 20,
    "qualityScore": 105,
    "completenessScore": 100
  },
  "optimizationSuggestions": [
    "Consider optimizing discovery phase (took 18824ms)",
    "Consider optimizing configuration phase (took 33283ms)",
    "Consider optimizing building phase (took 43637ms)",
    "Consider optimizing validation phase (took 20418ms)"
  ],
  "errorPatterns": [
    {
      "pattern": "ValidationError",
      "frequency": 1,
      "suggestedFix": "Review node configuration requirements and ensure all required fields are set"
    }
  ]
}