{
  "testName": "User Test",
  "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
  "sessionId": "complete_e2e_user_test_1754920766637",
  "timestamp": "2025-08-11T13:59:26.639Z",
  "duration": 134957,
  "success": true,
  "phases": {
    "discovery": {
      "name": "Discovery",
      "success": true,
      "metrics": {
        "startTime": 1754920767209,
        "endTime": 1754920789086,
        "duration": 21877,
        "memoryUsage": {
          "heapUsed": 3808352,
          "heapTotal": 30801920,
          "external": 6373807
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T13:59:27.209Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting discovery phase"
        },
        {
          "timestamp": "2025-08-11T13:59:27.209Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for discovery phase"
        },
        {
          "timestamp": "2025-08-11T13:59:41.955Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:59:41.956Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"transform_data\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:41.956Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:59:41.956Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"chat_with_ai\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:41.956Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:59:41.956Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"insert_postgres_data\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:41.956Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:59:41.956Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"send_email\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:42.120Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:42.125Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:42.131Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:42.140Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:42.141Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T13:59:42.141Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"webhook\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T13:59:42.141Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T13:59:42.141Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"if\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T13:59:42.141Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T13:59:42.141Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"schedule\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T13:59:42.269Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:42.273Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:42.275Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:48.975Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.emailSend (Send an email notification)"
        },
        {
          "timestamp": "2025-08-11T13:59:48.975Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.postgres (Insert data into PostgreSQL table)"
        },
        {
          "timestamp": "2025-08-11T13:59:48.975Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T13:59:48.975Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.openAi (Send a message to an AI model and get response)"
        },
        {
          "timestamp": "2025-08-11T13:59:48.975Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.scheduleTrigger (Triggers daily digest email workflow on schedule)"
        },
        {
          "timestamp": "2025-08-11T13:59:48.975Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Receives new social media posts from external platforms)"
        },
        {
          "timestamp": "2025-08-11T13:59:48.975Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Routes content based on AI analysis results for flagging)"
        },
        {
          "timestamp": "2025-08-11T13:59:49.085Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T13:59:49.085Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_4",
          "type": "nodes-base.emailSend",
          "purpose": "Send an email notification"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.postgres",
          "purpose": "Insert data into PostgreSQL table"
        },
        {
          "id": "task_node_1",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript"
        },
        {
          "id": "task_node_2",
          "type": "nodes-base.openAi",
          "purpose": "Send a message to an AI model and get response"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.scheduleTrigger",
          "purpose": "Triggers daily digest email workflow on schedule"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.webhook",
          "purpose": "Receives new social media posts from external platforms"
        },
        {
          "id": "search_node_3",
          "type": "nodes-base.if",
          "purpose": "Routes content based on AI analysis results for flagging"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754920766637",
        "createdAt": "2025-08-11T13:59:27.210Z",
        "state": {
          "phase": "configuration",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging"
            }
          ],
          "selected": [
            "task_node_4",
            "task_node_3",
            "task_node_1",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Triggers daily digest email workflow on schedule"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.webhook",
                "purpose": "Receives new social media posts from external platforms"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Routes content based on AI analysis results for flagging"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:59:48.407Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "prompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items"
        },
        "output": {
          "nodes": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "displayName": "send email",
              "purpose": "Send an email notification",
              "isPreConfigured": true,
              "config": {
                "fromEmail": "",
                "toEmail": "",
                "subject": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 3000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "displayName": "insert postgres data",
              "purpose": "Insert data into PostgreSQL table",
              "isPreConfigured": true,
              "config": {
                "operation": "insert",
                "table": "",
                "columns": "",
                "returnFields": "*",
                "onError": "stopWorkflow",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000
              }
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "displayName": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "displayName": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms",
              "needsConfiguration": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "displayName": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging",
              "needsConfiguration": true
            }
          ]
        },
        "transformations": [
          "Intent Analysis",
          "Node Discovery",
          "Selection"
        ]
      }
    },
    "configuration": {
      "name": "Configuration",
      "success": true,
      "metrics": {
        "startTime": 1754920789087,
        "endTime": 1754920812866,
        "duration": 23779,
        "memoryUsage": {
          "heapUsed": 613464,
          "heapTotal": 35586048,
          "external": 6540825
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T13:59:49.087Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting configuration phase"
        },
        {
          "timestamp": "2025-08-11T13:59:49.087Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for configuration phase"
        },
        {
          "timestamp": "2025-08-11T13:59:49.190Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:59:49.190Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.emailSend\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:49.190Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:59:49.190Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:49.190Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:59:49.190Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.openAi\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.scheduleTrigger\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:59:49.191Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\"}"
        },
        {
          "timestamp": "2025-08-11T13:59:49.341Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:49.343Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:49.348Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:49.358Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:49.366Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:49.370Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:49.371Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:56.762Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:59:56.762Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\",\"config\":{\"table\":\"content_moderation\",\"columns\":\"post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle\",\"operation\":\"insert\",\"returnFields\":\"*\"}}"
        },
        {
          "timestamp": "2025-08-11T13:59:57.022Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:57.024Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:59:57.024Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\",\"config\":{\"table\":\"content_moderation\",\"columns\":\"post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle\",\"operation\":\"insert\",\"returnFields\":\"*\",\"schema\":\"public\"}}"
        },
        {
          "timestamp": "2025-08-11T13:59:57.228Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:59:59.380Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:59:59.381Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.emailSend\",\"config\":{\"text\":\"Daily Content Moderation Report\\n\\n📊 Statistics:\\n- Total posts analyzed: {{$json.totalPosts}}\\n- Flagged items: {{$json.flaggedCount}}\\n- Clean content: {{$json.cleanCount}}\\n- Flagging rate: {{$json.flaggingRate}}%\\n\\n🚩 Flagged Items Summary:\\n{{$json.flaggedItemsSummary}}\\n\\n📈 Trends:\\n- Compared to yesterday: {{$json.trendComparison}}\\n- Most common violation types: {{$json.topViolationTypes}}\\n\\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\\n\\nThis is an automated report from the content moderation system.\",\"subject\":\"Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}\",\"toEmail\":\"moderators@company.com\",\"fromEmail\":\"content-moderation@company.com\"}}"
        },
        {
          "timestamp": "2025-08-11T13:59:59.524Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:00:03.761Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T14:00:03.761Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\",\"config\":{\"jsCode\":\"// Transform social media posts for AI content analysis\\nconst results = [];\\n\\nfor (const item of items) {\\n  // Extract and normalize social media post data\\n  const postData = item.json;\\n  \\n  // Create standardized structure for AI analysis\\n  const transformedPost = {\\n    // Core identification\\n    postId: postData.id || postData.post_id,\\n    platform: postData.platform || 'unknown',\\n    \\n    // Content for AI analysis\\n    content: {\\n      text: postData.text || postData.content || postData.message || '',\\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\\n      hashtags: postData.hashtags || [],\\n      mentions: postData.mentions || []\\n    },\\n    \\n    // Author information\\n    author: {\\n      id: postData.author?.id || postData.user_id,\\n      username: postData.author?.username || postData.username,\\n      followerCount: postData.author?.followers_count || 0,\\n      verified: postData.author?.verified || false\\n    },\\n    \\n    // Engagement metrics\\n    engagement: {\\n      likes: postData.likes_count || postData.likes || 0,\\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\\n      comments: postData.comments_count || postData.replies || 0\\n    },\\n    \\n    // Timestamps\\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\\n    processedAt: new Date().toISOString(),\\n    \\n    // Analysis preparation flags\\n    requiresAnalysis: true,\\n    contentLength: (postData.text || postData.content || '').length,\\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\\n    \\n    // Risk indicators for prioritization\\n    riskFactors: {\\n      hasExternalLinks: /https?:\\\\/\\\\//.test(postData.text || postData.content || ''),\\n      highEngagement: (postData.likes_count || 0) > 1000,\\n      newAccount: postData.author?.account_age_days < 30 || false,\\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\\n    }\\n  };\\n  \\n  results.push({\\n    json: transformedPost\\n  });\\n}\\n\\nreturn results;\",\"language\":\"javaScript\"}}"
        },
        {
          "timestamp": "2025-08-11T14:00:03.991Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:00:05.339Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T14:00:05.339Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.scheduleTrigger\",\"config\":{\"notice\":\"\",\"rule\":{\"interval\":[{\"field\":\"hours\",\"triggerAtHour\":9}]}}}"
        },
        {
          "timestamp": "2025-08-11T14:00:05.460Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:00:07.330Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T14:00:07.330Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.openAi\",\"config\":{\"modelId\":\"gpt-4\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\\\"flagged\\\": boolean, \\\"confidence\\\": number (0-1), \\\"categories\\\": [array of violation types], \\\"severity\\\": \\\"low\\\"|\\\"medium\\\"|\\\"high\\\", \\\"summary\\\": \\\"brief explanation\\\"}\"},{\"role\":\"user\",\"content\":\"Please analyze this social media post for inappropriate content:\\n\\nPost Content: {{$json.content}}\\nAuthor: {{$json.author}}\\nPlatform: {{$json.platform}}\\nPost ID: {{$json.post_id}}\"}]},\"resource\":\"chat\",\"operation\":\"message\",\"options\":{\"temperature\":0.1,\"maxTokens\":500}}}"
        },
        {
          "timestamp": "2025-08-11T14:00:07.462Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:00:09.476Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T14:00:09.476Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\",\"config\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\",\"responseMode\":\"onReceived\",\"responseData\":\"firstEntryJson\",\"responseCode\":200}}"
        },
        {
          "timestamp": "2025-08-11T14:00:09.603Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:00:10.590Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T14:00:10.590Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\",\"config\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"leftValue\":\"={{ $json.aiAnalysis.isInappropriate }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equals\"}}]}}}"
        },
        {
          "timestamp": "2025-08-11T14:00:10.701Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:00:12.767Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.emailSend (Send an email notification)"
        },
        {
          "timestamp": "2025-08-11T14:00:12.767Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.postgres (Insert data into PostgreSQL table)"
        },
        {
          "timestamp": "2025-08-11T14:00:12.768Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T14:00:12.768Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.openAi (Send a message to an AI model and get response)"
        },
        {
          "timestamp": "2025-08-11T14:00:12.768Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.scheduleTrigger (Triggers daily digest email workflow on schedule)"
        },
        {
          "timestamp": "2025-08-11T14:00:12.768Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Receives new social media posts from external platforms)"
        },
        {
          "timestamp": "2025-08-11T14:00:12.768Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Routes content based on AI analysis results for flagging)"
        },
        {
          "timestamp": "2025-08-11T14:00:12.866Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T14:00:12.866Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_4",
          "type": "nodes-base.emailSend",
          "purpose": "Send an email notification",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 3000,
            "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
            "parameters": {
              "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
              "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
              "toEmail": "moderators@company.com",
              "fromEmail": "content-moderation@company.com"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.postgres",
          "purpose": "Insert data into PostgreSQL table",
          "configuration": {
            "onError": "stopWorkflow",
            "maxTries": 2,
            "retryOnFail": true,
            "waitBetweenTries": 1000,
            "typeVersion": 2.4,
            "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
            "parameters": {
              "table": "content_moderation",
              "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
              "operation": "insert",
              "returnFields": "*",
              "schema": "public"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_1",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript",
          "configuration": {
            "typeVersion": 2,
            "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
            "parameters": {
              "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
              "language": "javaScript"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_2",
          "type": "nodes-base.openAi",
          "purpose": "Send a message to an AI model and get response",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 5000,
            "typeVersion": 1,
            "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
            "parameters": {
              "modelId": "gpt-4",
              "messages": {
                "values": [
                  {
                    "role": "system",
                    "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                  },
                  {
                    "role": "user",
                    "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                  }
                ]
              },
              "resource": "chat",
              "operation": "message",
              "options": {
                "temperature": 0.1,
                "maxTokens": 500
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.scheduleTrigger",
          "purpose": "Triggers daily digest email workflow on schedule",
          "configuration": {
            "typeVersion": "1.2",
            "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
            "parameters": {
              "notice": "",
              "rule": {
                "interval": [
                  {
                    "field": "hours",
                    "triggerAtHour": 9
                  }
                ]
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.webhook",
          "purpose": "Receives new social media posts from external platforms",
          "configuration": {
            "typeVersion": "2",
            "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
            "parameters": {
              "path": "social-media-posts",
              "httpMethod": "POST",
              "responseMode": "onReceived",
              "responseData": "firstEntryJson",
              "responseCode": 200
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_3",
          "type": "nodes-base.if",
          "purpose": "Routes content based on AI analysis results for flagging",
          "configuration": {
            "typeVersion": "2.2",
            "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
            "parameters": {
              "conditions": {
                "conditions": [
                  {
                    "id": "1",
                    "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "equals"
                    }
                  }
                ]
              }
            }
          },
          "validationStatus": "valid"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754920766637",
        "createdAt": "2025-08-11T13:59:27.210Z",
        "state": {
          "phase": "building",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging"
            }
          ],
          "selected": [
            "task_node_4",
            "task_node_3",
            "task_node_1",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Triggers daily digest email workflow on schedule"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.webhook",
                "purpose": "Receives new social media posts from external platforms"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Routes content based on AI analysis results for flagging"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:10.702Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T14:00:11.115Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.361Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T14:00:11.362Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.570Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
              "timestamp": "2025-08-11T14:00:11.570Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.809Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T14:00:11.809Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.979Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "triggerAtHour": 9
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_1",
              "purpose": "Triggers daily digest email workflow on schedule",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
              "timestamp": "2025-08-11T14:00:11.979Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.155Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_2",
              "purpose": "Receives new social media posts from external platforms",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
              "timestamp": "2025-08-11T14:00:12.156Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.391Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Routes content based on AI analysis results for flagging",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
              "timestamp": "2025-08-11T14:00:12.391Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.574Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:12.574Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "discoveredNodes": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "displayName": "send email",
              "purpose": "Send an email notification",
              "isPreConfigured": true,
              "config": {
                "fromEmail": "",
                "toEmail": "",
                "subject": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 3000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "displayName": "insert postgres data",
              "purpose": "Insert data into PostgreSQL table",
              "isPreConfigured": true,
              "config": {
                "operation": "insert",
                "table": "",
                "columns": "",
                "returnFields": "*",
                "onError": "stopWorkflow",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000
              }
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "displayName": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "displayName": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms",
              "needsConfiguration": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "displayName": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging",
              "needsConfiguration": true
            }
          ]
        },
        "output": {
          "configuredNodes": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "purpose": "Send an email notification",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000,
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "purpose": "Insert data into PostgreSQL table",
              "config": {
                "onError": "stopWorkflow",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 1000,
                "typeVersion": 2.4,
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*",
                  "schema": "public"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 2,
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "purpose": "Send a message to an AI model and get response",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000,
                "typeVersion": 1,
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "parameters": {
                  "modelId": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule",
              "config": {
                "typeVersion": "1.2",
                "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                "parameters": {
                  "notice": "",
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "triggerAtHour": 9
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms",
              "config": {
                "typeVersion": "2",
                "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "onReceived",
                  "responseData": "firstEntryJson",
                  "responseCode": 200
                }
              },
              "validated": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging",
              "config": {
                "typeVersion": "2.2",
                "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        }
                      }
                    ]
                  }
                }
              },
              "validated": true
            }
          ]
        },
        "transformations": [
          "Parameter Configuration",
          "Validation",
          "Type Checking"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "configuration",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "building",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:10.702Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T14:00:11.115Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.361Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T14:00:11.362Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.570Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
                  "timestamp": "2025-08-11T14:00:11.570Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.809Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T14:00:11.809Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.979Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "triggerAtHour": 9
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Triggers daily digest email workflow on schedule",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
                  "timestamp": "2025-08-11T14:00:11.979Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.155Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Receives new social media posts from external platforms",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
                  "timestamp": "2025-08-11T14:00:12.156Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.391Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Routes content based on AI analysis results for flagging",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
                  "timestamp": "2025-08-11T14:00:12.391Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:12.574Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "building": {
      "name": "Building",
      "success": true,
      "metrics": {
        "startTime": 1754920812867,
        "endTime": 1754920868675,
        "duration": 55808,
        "memoryUsage": {
          "heapUsed": 1856960,
          "heapTotal": 35880960,
          "external": 7124559
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T14:00:12.867Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting building phase"
        },
        {
          "timestamp": "2025-08-11T14:00:12.867Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for building phase"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.webhook (Social Media Post Webhook)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.code (Transform Post Data)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.openAi (AI Content Analysis)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.if (Check If Content Flagged)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.postgres (Store Analysis Results)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.postgres (Store Clean Content)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.scheduleTrigger (Daily Digest Schedule)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.postgres (Get Daily Statistics)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.code (Generate Report Summary)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.580Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.emailSend (Send Daily Digest)"
        },
        {
          "timestamp": "2025-08-11T14:01:08.581Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 10 nodes"
        },
        {
          "timestamp": "2025-08-11T14:01:08.581Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 7 connection groups"
        },
        {
          "timestamp": "2025-08-11T14:01:08.675Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T14:01:08.675Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "webhook_1",
          "type": "n8n-nodes-base.webhook",
          "purpose": "Social Media Post Webhook"
        },
        {
          "id": "code_1",
          "type": "n8n-nodes-base.code",
          "purpose": "Transform Post Data"
        },
        {
          "id": "openAi_1",
          "type": "n8n-nodes-base.openAi",
          "purpose": "AI Content Analysis"
        },
        {
          "id": "if_1",
          "type": "n8n-nodes-base.if",
          "purpose": "Check If Content Flagged"
        },
        {
          "id": "postgres_1",
          "type": "n8n-nodes-base.postgres",
          "purpose": "Store Analysis Results"
        },
        {
          "id": "postgres_2",
          "type": "n8n-nodes-base.postgres",
          "purpose": "Store Clean Content"
        },
        {
          "id": "scheduleTrigger_1",
          "type": "n8n-nodes-base.scheduleTrigger",
          "purpose": "Daily Digest Schedule"
        },
        {
          "id": "postgres_3",
          "type": "n8n-nodes-base.postgres",
          "purpose": "Get Daily Statistics"
        },
        {
          "id": "code_2",
          "type": "n8n-nodes-base.code",
          "purpose": "Generate Report Summary"
        },
        {
          "id": "emailSend_1",
          "type": "n8n-nodes-base.emailSend",
          "purpose": "Send Daily Digest"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754920766637",
        "createdAt": "2025-08-11T13:59:27.210Z",
        "state": {
          "phase": "validation",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging"
            }
          ],
          "selected": [
            "task_node_4",
            "task_node_3",
            "task_node_1",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Social Media Post Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "options": {},
                  "httpMethod": "POST",
                  "responseMode": "responseNode"
                },
                "typeVersion": 1
              },
              {
                "id": "code_1",
                "name": "Transform Post Data",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                  "language": "javascript"
                },
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "name": "AI Content Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "model": "gpt-3.5-turbo",
                  "options": {
                    "maxTokens": 200,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "typeVersion": 1
              },
              {
                "id": "if_1",
                "name": "Check If Content Flagged",
                "type": "n8n-nodes-base.if",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "combinator": "and",
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        },
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": 2
              },
              {
                "id": "postgres_1",
                "name": "Store Analysis Results",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "options": {},
                  "operation": "insert"
                },
                "typeVersion": 2
              },
              {
                "id": "postgres_2",
                "name": "Store Clean Content",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "options": {},
                  "operation": "insert"
                },
                "typeVersion": 2
              },
              {
                "id": "scheduleTrigger_1",
                "name": "Daily Digest Schedule",
                "type": "n8n-nodes-base.scheduleTrigger",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "typeVersion": 1
              },
              {
                "id": "postgres_3",
                "name": "Get Daily Statistics",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                        "column": "analyzed_at",
                        "condition": ">="
                      }
                    ]
                  },
                  "schema": "public",
                  "options": {},
                  "operation": "select"
                },
                "typeVersion": 2
              },
              {
                "id": "code_2",
                "name": "Generate Report Summary",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                  "language": "javascript"
                },
                "typeVersion": 2
              },
              {
                "id": "emailSend_1",
                "name": "Send Daily Digest",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                  "options": {
                    "allowUnauthorizedCerts": false
                  },
                  "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "moderation@company.com"
                },
                "typeVersion": 2
              }
            ],
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1"
              ],
              "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1",
                "postgres_2"
              ],
              "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
            },
            {
              "type": "trigger",
              "nodeIds": [
                "scheduleTrigger_1"
              ],
              "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "postgres_3"
              ],
              "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
            },
            {
              "type": "aggregation",
              "nodeIds": [
                "code_2"
              ],
              "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
            },
            {
              "type": "notification",
              "nodeIds": [
                "emailSend_1"
              ],
              "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Triggers daily digest email workflow on schedule"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.webhook",
                "purpose": "Receives new social media posts from external platforms"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Routes content based on AI analysis results for flagging"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:10.702Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T14:00:11.115Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.361Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T14:00:11.362Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.570Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
              "timestamp": "2025-08-11T14:00:11.570Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.809Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T14:00:11.809Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.979Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "triggerAtHour": 9
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_1",
              "purpose": "Triggers daily digest email workflow on schedule",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
              "timestamp": "2025-08-11T14:00:11.979Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.155Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_2",
              "purpose": "Receives new social media posts from external platforms",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
              "timestamp": "2025-08-11T14:00:12.156Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.391Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Routes content based on AI analysis results for flagging",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
              "timestamp": "2025-08-11T14:00:12.391Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.574Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:12.574Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T14:01:07.955Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T14:01:08.295Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "configuredNodes": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "purpose": "Send an email notification",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000,
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "purpose": "Insert data into PostgreSQL table",
              "config": {
                "onError": "stopWorkflow",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 1000,
                "typeVersion": 2.4,
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*",
                  "schema": "public"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 2,
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "purpose": "Send a message to an AI model and get response",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000,
                "typeVersion": 1,
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "parameters": {
                  "modelId": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule",
              "config": {
                "typeVersion": "1.2",
                "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                "parameters": {
                  "notice": "",
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "triggerAtHour": 9
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms",
              "config": {
                "typeVersion": "2",
                "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "onReceived",
                  "responseData": "firstEntryJson",
                  "responseCode": 200
                }
              },
              "validated": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging",
              "config": {
                "typeVersion": "2.2",
                "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        }
                      }
                    ]
                  }
                }
              },
              "validated": true
            }
          ]
        },
        "output": {
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "message",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 200
                  }
                },
                "name": "AI Content Analysis",
                "typeVersion": 1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Check If Content Flagged",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Analysis Results",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Clean Content",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "postgres_3",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "select",
                  "schema": "public",
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "column": "analyzed_at",
                        "condition": ">=",
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}"
                      }
                    ]
                  },
                  "options": {}
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_2",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];"
                },
                "name": "Generate Report Summary",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                  "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Send Daily Digest",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "transformations": [
          "Workflow Generation",
          "Connection Building",
          "Settings Configuration"
        ]
      },
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "name": "Social Media Content Moderation Workflow",
              "settings": {
                "executionOrder": "v1",
                "saveManualExecutions": true,
                "saveDataErrorExecution": "all",
                "saveDataSuccessExecution": "all"
              },
              "connections": {
                "AI Content Analysis": {
                  "main": [
                    [
                      {
                        "node": "Check If Content Flagged",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Transform Post Data": {
                  "main": [
                    [
                      {
                        "node": "AI Content Analysis",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Daily Statistics": {
                  "main": [
                    [
                      {
                        "node": "Generate Report Summary",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Daily Digest Schedule": {
                  "main": [
                    [
                      {
                        "node": "Get Daily Statistics",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Generate Report Summary": {
                  "main": [
                    [
                      {
                        "node": "Send Daily Digest",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Check If Content Flagged": {
                  "main": [
                    [
                      {
                        "node": "Store Analysis Results",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Store Clean Content",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Social Media Post Webhook": {
                  "main": [
                    [
                      {
                        "node": "Transform Post Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "building",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:10.702Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T14:00:11.115Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.361Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T14:00:11.362Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.570Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
                  "timestamp": "2025-08-11T14:00:11.570Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.809Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T14:00:11.809Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.979Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "triggerAtHour": 9
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Triggers daily digest email workflow on schedule",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
                  "timestamp": "2025-08-11T14:00:11.979Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.155Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Receives new social media posts from external platforms",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
                  "timestamp": "2025-08-11T14:00:12.156Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.391Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Routes content based on AI analysis results for flagging",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
                  "timestamp": "2025-08-11T14:00:12.391Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:12.574Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "validation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:10.702Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T14:00:11.115Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.361Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T14:00:11.362Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.570Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
                  "timestamp": "2025-08-11T14:00:11.570Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.809Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T14:00:11.809Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.979Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "triggerAtHour": 9
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Triggers daily digest email workflow on schedule",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
                  "timestamp": "2025-08-11T14:00:11.979Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.155Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Receives new social media posts from external platforms",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
                  "timestamp": "2025-08-11T14:00:12.156Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.391Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Routes content based on AI analysis results for flagging",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
                  "timestamp": "2025-08-11T14:00:12.391Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:07.955Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1",
                        "postgres_2"
                      ],
                      "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_3"
                      ],
                      "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                    },
                    {
                      "type": "aggregation",
                      "nodeIds": [
                        "code_2"
                      ],
                      "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                    }
                  ],
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:08.295Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "validation": {
      "name": "Validation",
      "success": true,
      "metrics": {
        "startTime": 1754920868676,
        "endTime": 1754920900867,
        "duration": 32191,
        "memoryUsage": {
          "heapUsed": 1260544,
          "heapTotal": 36896768,
          "external": 7441788
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T14:01:08.676Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting validation phase"
        },
        {
          "timestamp": "2025-08-11T14:01:08.676Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for validation phase"
        },
        {
          "timestamp": "2025-08-11T14:01:08.678Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T14:01:08.678Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Social Media Content Moderation Workflow\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\",\"responseMode\":\"responseNode\",\"options\":{}},\"name\":\"Social Media Post Webhook\",\"typeVersion\":1,\"onError\":\"stopWorkflow\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[550,300],\"parameters\":{\"language\":\"javascript\",\"jsCode\":\"// Transform social media post data for AI content analysis\\nconst items = $input.all();\\n\\nreturn items.map(item => {\\n  const postData = item.json;\\n  \\n  return {\\n    json: {\\n      postId: postData.id || postData.post_id,\\n      content: postData.content || postData.text || postData.message,\\n      platform: postData.platform || 'unknown',\\n      author: postData.author || postData.username || postData.user,\\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\\n      url: postData.url || postData.permalink,\\n      metadata: {\\n        likes: postData.likes || 0,\\n        shares: postData.shares || 0,\\n        comments: postData.comments || 0,\\n        hashtags: postData.hashtags || [],\\n        mentions: postData.mentions || []\\n      }\\n    }\\n  };\\n});\"},\"name\":\"Transform Post Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[850,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"message\",\"model\":\"gpt-3.5-turbo\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\\\"flagged\\\": boolean, \\\"confidence\\\": number (0-1), \\\"categories\\\": [array of violation types], \\\"severity\\\": \\\"low|medium|high\\\", \\\"explanation\\\": \\\"brief reason\\\"}\"},{\"role\":\"user\",\"content\":\"=Analyze this social media post:\\n\\nContent: {{ $json.content }}\\nPlatform: {{ $json.platform }}\\nAuthor: {{ $json.author }}\\nHashtags: {{ $json.metadata.hashtags }}\"}]},\"options\":{\"temperature\":0.1,\"maxTokens\":200}},\"name\":\"AI Content Analysis\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"leftValue\":\"={{ JSON.parse($json.choices[0].message.content).flagged }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equal\"}}],\"combinator\":\"and\"}},\"name\":\"Check If Content Flagged\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,200],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $('Transform Post Data').item.json.postId }}\",\"content\":\"={{ $('Transform Post Data').item.json.content }}\",\"platform\":\"={{ $('Transform Post Data').item.json.platform }}\",\"author\":\"={{ $('Transform Post Data').item.json.author }}\",\"flagged\":\"={{ JSON.parse($json.choices[0].message.content).flagged }}\",\"confidence\":\"={{ JSON.parse($json.choices[0].message.content).confidence }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}\",\"severity\":\"={{ JSON.parse($json.choices[0].message.content).severity }}\",\"explanation\":\"={{ JSON.parse($json.choices[0].message.content).explanation }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}},\"options\":{}},\"name\":\"Store Analysis Results\",\"typeVersion\":2,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"postgres_2\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,400],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $('Transform Post Data').item.json.postId }}\",\"content\":\"={{ $('Transform Post Data').item.json.content }}\",\"platform\":\"={{ $('Transform Post Data').item.json.platform }}\",\"author\":\"={{ $('Transform Post Data').item.json.author }}\",\"flagged\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}\",\"confidence\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}\",\"severity\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}\",\"explanation\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}},\"options\":{}},\"name\":\"Store Clean Content\",\"typeVersion\":2,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"scheduleTrigger_1\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[250,600],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":24}]},\"triggerAtHour\":9},\"name\":\"Daily Digest Schedule\",\"typeVersion\":1,\"onError\":\"stopWorkflow\"},{\"id\":\"postgres_3\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[550,600],\"parameters\":{\"operation\":\"select\",\"schema\":\"public\",\"table\":\"content_moderation\",\"where\":{\"values\":[{\"column\":\"analyzed_at\",\"condition\":\">=\",\"value\":\"={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}\"}]},\"options\":{}},\"name\":\"Get Daily Statistics\",\"typeVersion\":2,\"onError\":\"stopWorkflow\"},{\"id\":\"code_2\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,600],\"parameters\":{\"language\":\"javascript\",\"jsCode\":\"// Generate daily moderation report summary\\nconst items = $input.all();\\nconst data = items.map(item => item.json);\\n\\nconst totalPosts = data.length;\\nconst flaggedPosts = data.filter(post => post.flagged).length;\\nconst cleanPosts = totalPosts - flaggedPosts;\\n\\nconst severityBreakdown = {\\n  high: data.filter(post => post.severity === 'high').length,\\n  medium: data.filter(post => post.severity === 'medium').length,\\n  low: data.filter(post => post.severity === 'low').length\\n};\\n\\nconst platformBreakdown = {};\\ndata.forEach(post => {\\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\\n});\\n\\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\\n\\nreturn [{\\n  json: {\\n    reportDate: new Date().toISOString().split('T')[0],\\n    summary: {\\n      totalPosts,\\n      flaggedPosts,\\n      cleanPosts,\\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\\n    },\\n    severityBreakdown,\\n    platformBreakdown,\\n    flaggedItems: flaggedItems.map(item => ({\\n      postId: item.post_id,\\n      platform: item.platform,\\n      author: item.author,\\n      severity: item.severity,\\n      categories: JSON.parse(item.categories || '[]'),\\n      explanation: item.explanation,\\n      content: item.content.substring(0, 100) + '...'\\n    }))\\n  }\\n}];\"},\"name\":\"Generate Report Summary\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[1150,600],\"parameters\":{\"fromEmail\":\"moderation@company.com\",\"toEmail\":\"moderators@company.com\",\"subject\":\"=Daily Content Moderation Report - {{ $json.reportDate }}\",\"text\":\"=Daily Content Moderation Summary\\n\\nDate: {{ $json.reportDate }}\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\\n• Clean Posts: {{ $json.summary.cleanPosts }}\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: {{ $json.severityBreakdown.high }}\\n• Medium Risk: {{ $json.severityBreakdown.medium }}\\n• Low Risk: {{ $json.severityBreakdown.low }}\\n\\n📱 PLATFORM BREAKDOWN:\\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\\\n') }}\\n\\n🔍 TOP FLAGGED ITEMS:\\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\\\n   Categories: ${item.categories.join(', ')}\\\\n   Reason: ${item.explanation}\\\\n   Content: ${item.content}\\\\n`).join('\\\\n') }}\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System\",\"options\":{\"allowUnauthorizedCerts\":false}},\"name\":\"Send Daily Digest\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Social Media Post Webhook\":{\"main\":[[{\"node\":\"Transform Post Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Post Data\":{\"main\":[[{\"node\":\"AI Content Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Content Analysis\":{\"main\":[[{\"node\":\"Check If Content Flagged\",\"type\":\"main\",\"index\":0}]]},\"Check If Content Flagged\":{\"main\":[[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Store Clean Content\",\"type\":\"main\",\"index\":0}]]},\"Daily Digest Schedule\":{\"main\":[[{\"node\":\"Get Daily Statistics\",\"type\":\"main\",\"index\":0}]]},\"Get Daily Statistics\":{\"main\":[[{\"node\":\"Generate Report Summary\",\"type\":\"main\",\"index\":0}]]},\"Generate Report Summary\":{\"main\":[[{\"node\":\"Send Daily Digest\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T14:01:08.876Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:01:30.888Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T14:01:30.894Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Social Media Content Moderation Workflow\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\",\"responseMode\":\"responseNode\",\"options\":{}},\"name\":\"Social Media Post Webhook\",\"typeVersion\":2,\"onError\":\"stopWorkflow\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[550,300],\"parameters\":{\"language\":\"javascript\",\"jsCode\":\"// Transform social media post data for AI content analysis\\nconst items = $input.all();\\n\\nreturn items.map(item => {\\n  const postData = item.json;\\n  \\n  return {\\n    json: {\\n      postId: postData.id || postData.post_id,\\n      content: postData.content || postData.text || postData.message,\\n      platform: postData.platform || 'unknown',\\n      author: postData.author || postData.username || postData.user,\\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\\n      url: postData.url || postData.permalink,\\n      metadata: {\\n        likes: postData.likes || 0,\\n        shares: postData.shares || 0,\\n        comments: postData.comments || 0,\\n        hashtags: postData.hashtags || [],\\n        mentions: postData.mentions || []\\n      }\\n    }\\n  };\\n});\"},\"name\":\"Transform Post Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[850,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"complete\",\"model\":\"gpt-3.5-turbo\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\\\"flagged\\\": boolean, \\\"confidence\\\": number (0-1), \\\"categories\\\": [array of violation types], \\\"severity\\\": \\\"low|medium|high\\\", \\\"explanation\\\": \\\"brief reason\\\"}\"},{\"role\":\"user\",\"content\":\"=Analyze this social media post:\\n\\nContent: {{ $json.content }}\\nPlatform: {{ $json.platform }}\\nAuthor: {{ $json.author }}\\nHashtags: {{ $json.metadata.hashtags }}\"}]},\"options\":{\"temperature\":0.1,\"maxTokens\":200}},\"name\":\"AI Content Analysis\",\"typeVersion\":1.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"leftValue\":\"={{ JSON.parse($json.choices[0].message.content).flagged }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equal\"}}],\"combinator\":\"and\"}},\"name\":\"Check If Content Flagged\",\"typeVersion\":2.2,\"onError\":\"continueRegularOutput\"},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,200],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $('Transform Post Data').item.json.postId }}\",\"content\":\"={{ $('Transform Post Data').item.json.content }}\",\"platform\":\"={{ $('Transform Post Data').item.json.platform }}\",\"author\":\"={{ $('Transform Post Data').item.json.author }}\",\"flagged\":\"={{ JSON.parse($json.choices[0].message.content).flagged }}\",\"confidence\":\"={{ JSON.parse($json.choices[0].message.content).confidence }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}\",\"severity\":\"={{ JSON.parse($json.choices[0].message.content).severity }}\",\"explanation\":\"={{ JSON.parse($json.choices[0].message.content).explanation }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}},\"options\":{}},\"name\":\"Store Analysis Results\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"postgres_2\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,400],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $('Transform Post Data').item.json.postId }}\",\"content\":\"={{ $('Transform Post Data').item.json.content }}\",\"platform\":\"={{ $('Transform Post Data').item.json.platform }}\",\"author\":\"={{ $('Transform Post Data').item.json.author }}\",\"flagged\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}\",\"confidence\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}\",\"severity\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}\",\"explanation\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}},\"options\":{}},\"name\":\"Store Clean Content\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"scheduleTrigger_1\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[250,600],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":24}]},\"triggerAtHour\":9},\"name\":\"Daily Digest Schedule\",\"typeVersion\":1.2,\"onError\":\"stopWorkflow\"},{\"id\":\"postgres_3\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[550,600],\"parameters\":{\"operation\":\"select\",\"schema\":\"public\",\"table\":\"content_moderation\",\"where\":{\"values\":[{\"column\":\"analyzed_at\",\"condition\":\">=\",\"value\":\"={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}\"}]},\"options\":{}},\"name\":\"Get Daily Statistics\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\"},{\"id\":\"code_2\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,600],\"parameters\":{\"language\":\"javascript\",\"jsCode\":\"// Generate daily moderation report summary\\nconst items = $input.all();\\nconst data = items.map(item => item.json);\\n\\nconst totalPosts = data.length;\\nconst flaggedPosts = data.filter(post => post.flagged).length;\\nconst cleanPosts = totalPosts - flaggedPosts;\\n\\nconst severityBreakdown = {\\n  high: data.filter(post => post.severity === 'high').length,\\n  medium: data.filter(post => post.severity === 'medium').length,\\n  low: data.filter(post => post.severity === 'low').length\\n};\\n\\nconst platformBreakdown = {};\\ndata.forEach(post => {\\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\\n});\\n\\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\\n\\nreturn [{\\n  json: {\\n    reportDate: new Date().toISOString().split('T')[0],\\n    summary: {\\n      totalPosts,\\n      flaggedPosts,\\n      cleanPosts,\\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\\n    },\\n    severityBreakdown,\\n    platformBreakdown,\\n    flaggedItems: flaggedItems.map(item => ({\\n      postId: item.post_id,\\n      platform: item.platform,\\n      author: item.author,\\n      severity: item.severity,\\n      categories: JSON.parse(item.categories || '[]'),\\n      explanation: item.explanation,\\n      content: item.content.substring(0, 100) + '...'\\n    }))\\n  }\\n}];\"},\"name\":\"Generate Report Summary\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[1150,600],\"parameters\":{\"fromEmail\":\"moderation@company.com\",\"toEmail\":\"moderators@company.com\",\"subject\":\"={{ `Daily Content Moderation Report - ${$json.reportDate}` }}\",\"text\":\"={{ `Daily Content Moderation Summary\\n\\nDate: ${$json.reportDate}\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ${$json.summary.totalPosts}\\n• Flagged Posts: ${$json.summary.flaggedPosts} (${$json.summary.flaggedPercentage}%)\\n• Clean Posts: ${$json.summary.cleanPosts}\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ${$json.severityBreakdown.high}\\n• Medium Risk: ${$json.severityBreakdown.medium}\\n• Low Risk: ${$json.severityBreakdown.low}\\n\\n📱 PLATFORM BREAKDOWN:\\n${Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\\\n')}\\n\\n🔍 TOP FLAGGED ITEMS:\\n${$json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\\\n   Categories: ${item.categories.join(', ')}\\\\n   Reason: ${item.explanation}\\\\n   Content: ${item.content}\\\\n`).join('\\\\n')}\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System` }}\",\"options\":{\"allowUnauthorizedCerts\":false}},\"name\":\"Send Daily Digest\",\"typeVersion\":2.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Social Media Post Webhook\":{\"main\":[[{\"node\":\"Transform Post Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Post Data\":{\"main\":[[{\"node\":\"AI Content Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Content Analysis\":{\"main\":[[{\"node\":\"Check If Content Flagged\",\"type\":\"main\",\"index\":0}]]},\"Check If Content Flagged\":{\"main\":[[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Store Clean Content\",\"type\":\"main\",\"index\":0}]]},\"Daily Digest Schedule\":{\"main\":[[{\"node\":\"Get Daily Statistics\",\"type\":\"main\",\"index\":0}]]},\"Get Daily Statistics\":{\"main\":[[{\"node\":\"Generate Report Summary\",\"type\":\"main\",\"index\":0}]]},\"Generate Report Summary\":{\"main\":[[{\"node\":\"Send Daily Digest\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T14:01:31.213Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:01:39.371Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T14:01:39.371Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Social Media Content Moderation Workflow\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\",\"responseMode\":\"responseNode\",\"options\":{}},\"name\":\"Social Media Post Webhook\",\"typeVersion\":2,\"onError\":\"stopWorkflow\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[550,300],\"parameters\":{\"language\":\"javascript\",\"jsCode\":\"// Transform social media post data for AI content analysis\\nconst items = $input.all();\\n\\nreturn items.map(item => {\\n  const postData = item.json;\\n  \\n  return {\\n    json: {\\n      postId: postData.id || postData.post_id,\\n      content: postData.content || postData.text || postData.message,\\n      platform: postData.platform || 'unknown',\\n      author: postData.author || postData.username || postData.user,\\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\\n      url: postData.url || postData.permalink,\\n      metadata: {\\n        likes: postData.likes || 0,\\n        shares: postData.shares || 0,\\n        comments: postData.comments || 0,\\n        hashtags: postData.hashtags || [],\\n        mentions: postData.mentions || []\\n      }\\n    }\\n  };\\n});\"},\"name\":\"Transform Post Data\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[850,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"complete\",\"model\":\"gpt-3.5-turbo\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\\\"flagged\\\": boolean, \\\"confidence\\\": number (0-1), \\\"categories\\\": [array of violation types], \\\"severity\\\": \\\"low|medium|high\\\", \\\"explanation\\\": \\\"brief reason\\\"}\"},{\"role\":\"user\",\"content\":\"=Analyze this social media post:\\n\\nContent: {{ $json.content }}\\nPlatform: {{ $json.platform }}\\nAuthor: {{ $json.author }}\\nHashtags: {{ $json.metadata.hashtags }}\"}]},\"options\":{\"temperature\":0.1,\"maxTokens\":200}},\"name\":\"AI Content Analysis\",\"typeVersion\":1.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"leftValue\":\"={{ JSON.parse($json.choices[0].message.content).flagged }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equal\"}}],\"combinator\":\"and\"}},\"name\":\"Check If Content Flagged\",\"typeVersion\":2.2,\"onError\":\"continueRegularOutput\"},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,200],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $('Transform Post Data').item.json.postId }}\",\"content\":\"={{ $('Transform Post Data').item.json.content }}\",\"platform\":\"={{ $('Transform Post Data').item.json.platform }}\",\"author\":\"={{ $('Transform Post Data').item.json.author }}\",\"flagged\":\"={{ JSON.parse($json.choices[0].message.content).flagged }}\",\"confidence\":\"={{ JSON.parse($json.choices[0].message.content).confidence }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}\",\"severity\":\"={{ JSON.parse($json.choices[0].message.content).severity }}\",\"explanation\":\"={{ JSON.parse($json.choices[0].message.content).explanation }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}},\"options\":{}},\"name\":\"Store Analysis Results\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"postgres_2\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,400],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $('Transform Post Data').item.json.postId }}\",\"content\":\"={{ $('Transform Post Data').item.json.content }}\",\"platform\":\"={{ $('Transform Post Data').item.json.platform }}\",\"author\":\"={{ $('Transform Post Data').item.json.author }}\",\"flagged\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}\",\"confidence\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}\",\"severity\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}\",\"explanation\":\"={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}},\"options\":{}},\"name\":\"Store Clean Content\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"scheduleTrigger_1\",\"type\":\"n8n-nodes-base.scheduleTrigger\",\"position\":[250,600],\"parameters\":{\"rule\":{\"interval\":[{\"field\":\"hours\",\"hoursInterval\":24}]},\"triggerAtHour\":9},\"name\":\"Daily Digest Schedule\",\"typeVersion\":1.2,\"onError\":\"stopWorkflow\"},{\"id\":\"postgres_3\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[550,600],\"parameters\":{\"operation\":\"select\",\"schema\":\"public\",\"table\":\"content_moderation\",\"where\":{\"values\":[{\"column\":\"analyzed_at\",\"condition\":\">=\",\"value\":\"={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}\"}]},\"options\":{}},\"name\":\"Get Daily Statistics\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\"},{\"id\":\"code_2\",\"type\":\"n8n-nodes-base.code\",\"position\":[850,600],\"parameters\":{\"language\":\"javascript\",\"jsCode\":\"// Generate daily moderation report summary\\nconst items = $input.all();\\nconst data = items.map(item => item.json);\\n\\nconst totalPosts = data.length;\\nconst flaggedPosts = data.filter(post => post.flagged).length;\\nconst cleanPosts = totalPosts - flaggedPosts;\\n\\nconst severityBreakdown = {\\n  high: data.filter(post => post.severity === 'high').length,\\n  medium: data.filter(post => post.severity === 'medium').length,\\n  low: data.filter(post => post.severity === 'low').length\\n};\\n\\nconst platformBreakdown = {};\\ndata.forEach(post => {\\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\\n});\\n\\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\\n\\nreturn [{\\n  json: {\\n    reportDate: new Date().toISOString().split('T')[0],\\n    summary: {\\n      totalPosts,\\n      flaggedPosts,\\n      cleanPosts,\\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\\n    },\\n    severityBreakdown,\\n    platformBreakdown,\\n    flaggedItems: flaggedItems.map(item => ({\\n      postId: item.post_id,\\n      platform: item.platform,\\n      author: item.author,\\n      severity: item.severity,\\n      categories: JSON.parse(item.categories || '[]'),\\n      explanation: item.explanation,\\n      content: item.content.substring(0, 100) + '...'\\n    }))\\n  }\\n}];\"},\"name\":\"Generate Report Summary\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\"},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[1150,600],\"parameters\":{\"fromEmail\":\"moderation@company.com\",\"toEmail\":\"moderators@company.com\",\"subject\":\"={{ 'Daily Content Moderation Report - ' + $json.reportDate }}\",\"text\":\"={{ 'Daily Content Moderation Summary\\\\n\\\\nDate: ' + $json.reportDate + '\\\\n\\\\n📊 STATISTICS:\\\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\\\n\\\\n🚨 SEVERITY BREAKDOWN:\\\\n• High Risk: ' + $json.severityBreakdown.high + '\\\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\\\n• Low Risk: ' + $json.severityBreakdown.low + '\\\\n\\\\n📱 PLATFORM BREAKDOWN:\\\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\\\n') + '\\\\n\\\\n🔍 TOP FLAGGED ITEMS:\\\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\\\n   Categories: ' + item.categories.join(', ') + '\\\\n   Reason: ' + item.explanation + '\\\\n   Content: ' + item.content + '\\\\n').join('\\\\n') + '\\\\n\\\\nPlease review flagged content in the moderation dashboard.\\\\n\\\\nBest regards,\\\\nContent Moderation System' }}\",\"options\":{\"allowUnauthorizedCerts\":false}},\"name\":\"Send Daily Digest\",\"typeVersion\":2.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Social Media Post Webhook\":{\"main\":[[{\"node\":\"Transform Post Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Post Data\":{\"main\":[[{\"node\":\"AI Content Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Content Analysis\":{\"main\":[[{\"node\":\"Check If Content Flagged\",\"type\":\"main\",\"index\":0}]]},\"Check If Content Flagged\":{\"main\":[[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Store Clean Content\",\"type\":\"main\",\"index\":0}]]},\"Daily Digest Schedule\":{\"main\":[[{\"node\":\"Get Daily Statistics\",\"type\":\"main\",\"index\":0}]]},\"Get Daily Statistics\":{\"main\":[[{\"node\":\"Generate Report Summary\",\"type\":\"main\",\"index\":0}]]},\"Generate Report Summary\":{\"main\":[[{\"node\":\"Send Daily Digest\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T14:01:39.565Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T14:01:40.699Z",
          "level": "ERROR",
          "source": "Orchestrator",
          "message": "Error in validation: Error 1"
        },
        {
          "timestamp": "2025-08-11T14:01:40.699Z",
          "level": "ERROR",
          "source": "Orchestrator",
          "message": "Error in validation: Error 2"
        },
        {
          "timestamp": "2025-08-11T14:01:40.699Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Validation completed in 3 attempts"
        },
        {
          "timestamp": "2025-08-11T14:01:40.699Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Applied 2 fixes"
        },
        {
          "timestamp": "2025-08-11T14:01:40.865Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T14:01:40.866Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754920766637",
        "createdAt": "2025-08-11T13:59:27.210Z",
        "state": {
          "phase": "documentation",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging"
            }
          ],
          "selected": [
            "task_node_4",
            "task_node_3",
            "task_node_1",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Social Media Post Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "options": {},
                  "httpMethod": "POST",
                  "responseMode": "responseNode"
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Transform Post Data",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                  "language": "javascript"
                },
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "name": "AI Content Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "model": "gpt-3.5-turbo",
                  "options": {
                    "maxTokens": 200,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "complete"
                },
                "typeVersion": 1.1
              },
              {
                "id": "if_1",
                "name": "Check If Content Flagged",
                "type": "n8n-nodes-base.if",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "combinator": "and",
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        },
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "postgres_1",
                "name": "Store Analysis Results",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "options": {},
                  "operation": "insert"
                },
                "typeVersion": 2.6
              },
              {
                "id": "postgres_2",
                "name": "Store Clean Content",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "options": {},
                  "operation": "insert"
                },
                "typeVersion": 2.6
              },
              {
                "id": "scheduleTrigger_1",
                "name": "Daily Digest Schedule",
                "type": "n8n-nodes-base.scheduleTrigger",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "typeVersion": 1.2
              },
              {
                "id": "postgres_3",
                "name": "Get Daily Statistics",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                        "column": "analyzed_at",
                        "condition": ">="
                      }
                    ]
                  },
                  "schema": "public",
                  "options": {},
                  "operation": "select"
                },
                "typeVersion": 2.6
              },
              {
                "id": "code_2",
                "name": "Generate Report Summary",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                  "language": "javascript"
                },
                "typeVersion": 2
              },
              {
                "id": "emailSend_1",
                "name": "Send Daily Digest",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  },
                  "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "moderation@company.com"
                },
                "typeVersion": 2.1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1"
              ],
              "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1",
                "postgres_2"
              ],
              "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
            },
            {
              "type": "trigger",
              "nodeIds": [
                "scheduleTrigger_1"
              ],
              "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "postgres_3"
              ],
              "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
            },
            {
              "type": "aggregation",
              "nodeIds": [
                "code_2"
              ],
              "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
            },
            {
              "type": "notification",
              "nodeIds": [
                "emailSend_1"
              ],
              "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Triggers daily digest email workflow on schedule"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.webhook",
                "purpose": "Receives new social media posts from external platforms"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Routes content based on AI analysis results for flagging"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:10.702Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T14:00:11.115Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.361Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T14:00:11.362Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.570Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
              "timestamp": "2025-08-11T14:00:11.570Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.809Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T14:00:11.809Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.979Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "triggerAtHour": 9
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_1",
              "purpose": "Triggers daily digest email workflow on schedule",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
              "timestamp": "2025-08-11T14:00:11.979Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.155Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_2",
              "purpose": "Receives new social media posts from external platforms",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
              "timestamp": "2025-08-11T14:00:12.156Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.391Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Routes content based on AI analysis results for flagging",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
              "timestamp": "2025-08-11T14:00:12.391Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.574Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:12.574Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T14:01:07.955Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T14:01:39.566Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_3",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 2,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T14:01:40.448Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "message",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 200
                  }
                },
                "name": "AI Content Analysis",
                "typeVersion": 1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Check If Content Flagged",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Analysis Results",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Clean Content",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "postgres_3",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "select",
                  "schema": "public",
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "column": "analyzed_at",
                        "condition": ">=",
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}"
                      }
                    ]
                  },
                  "options": {}
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_2",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];"
                },
                "name": "Generate Report Summary",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                  "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Send Daily Digest",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "output": {
          "validatedWorkflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 200
                  }
                },
                "name": "AI Content Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Check If Content Flagged",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Analysis Results",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Clean Content",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1.2,
                "onError": "stopWorkflow"
              },
              {
                "id": "postgres_3",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "select",
                  "schema": "public",
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "column": "analyzed_at",
                        "condition": ">=",
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}"
                      }
                    ]
                  },
                  "options": {}
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2.6,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_2",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];"
                },
                "name": "Generate Report Summary",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                  "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Send Daily Digest",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "report": {
            "initial": {
              "workflow": {
                "errors": [
                  {
                    "node": "AI Content Analysis",
                    "message": {
                      "type": "invalid_value",
                      "property": "operation",
                      "message": "Invalid value for 'operation'. Must be one of: complete",
                      "fix": "Change operation to one of the valid options"
                    }
                  },
                  {
                    "node": "Send Daily Digest",
                    "message": "Expression error: text: Nested expressions are not supported"
                  },
                  {
                    "node": "Send Daily Digest",
                    "message": "Expression error: text: Template literals ${} are not supported. Use string concatenation instead"
                  },
                  {
                    "node": "Send Daily Digest",
                    "message": "Expression error: text: Template literals ${} are not supported. Use string concatenation instead"
                  },
                  {
                    "node": "workflow",
                    "message": "Workflow validation failed: e.message.includes is not a function"
                  },
                  {
                    "node": "Social Media Post Webhook",
                    "message": "Outdated typeVersion: 1. Latest is 2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "AI Content Analysis",
                    "message": "Outdated typeVersion: 1. Latest is 1.1",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Check If Content Flagged",
                    "message": "Outdated typeVersion: 2. Latest is 2.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Outdated typeVersion: 2. Latest is 2.6",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Outdated typeVersion: 2. Latest is 2.6",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Daily Digest Schedule",
                    "message": "Outdated typeVersion: 1. Latest is 1.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Get Daily Statistics",
                    "message": "Outdated typeVersion: 2. Latest is 2.6",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Send Daily Digest",
                    "message": "Outdated typeVersion: 2. Latest is 2.1",
                    "type": "typeVersion",
                    "severity": "error"
                  }
                ],
                "warnings": [
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.post_id: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.content: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.platform: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.author: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.post_id: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.content: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.platform: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.author: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.flagged: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.confidence: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.categories: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.severity: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.explanation: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  }
                ],
                "valid": false,
                "statistics": {
                  "totalNodes": 10,
                  "enabledNodes": 10,
                  "triggerNodes": 2,
                  "validConnections": 8,
                  "invalidConnections": 0,
                  "expressionsValidated": 4,
                  "errorCount": 5,
                  "warningCount": 22
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "fixesApplied": [
              {
                "type": "entity-replacement",
                "attempt": 1,
                "timestamp": "2025-08-11T14:01:30.881Z",
                "description": "Replaced 8 nodes",
                "reasoning": [
                  "Fixed AI Content Analysis node: Changed operation from 'message' to 'complete' (the only valid operation) and updated typeVersion from 1 to 1.1",
                  "Fixed Send Daily Digest node: Converted nested expressions to single template literal format using backticks and ${} syntax within a single {{ }} expression, and updated typeVersion from 2 to 2.1",
                  "Updated all node typeVersions to their latest versions: Social Media Post Webhook (1→2), Check If Content Flagged (2→2.2), Store Analysis Results (2→2.6), Store Clean Content (2→2.6), Daily Digest Schedule (1→1.2), Get Daily Statistics (2→2.6)"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "openAi_1",
                    "emailSend_1",
                    "webhook_1",
                    "if_1",
                    "postgres_1",
                    "postgres_2",
                    "scheduleTrigger_1",
                    "postgres_3"
                  ],
                  "connections": false
                }
              },
              {
                "type": "entity-replacement",
                "attempt": 2,
                "timestamp": "2025-08-11T14:01:39.370Z",
                "description": "Replaced 1 nodes",
                "reasoning": [
                  "Fixed template literal syntax error by converting from template literals (${}) to string concatenation using the + operator",
                  "Replaced the subject field expression from template literal format to string concatenation: 'Daily Content Moderation Report - ' + $json.reportDate",
                  "Converted the complex text field expression from template literals to string concatenation, maintaining all the dynamic content and formatting while using proper n8n expression syntax",
                  "All expressions now use single {{ }} blocks with string concatenation instead of template literals, which resolves the validation error"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "emailSend_1"
                  ],
                  "connections": false
                }
              }
            ],
            "final": {
              "workflow": {
                "errors": [],
                "warnings": [
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.post_id: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.content: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.platform: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.author: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.post_id: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.content: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.platform: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.author: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.flagged: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.confidence: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.categories: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.severity: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Clean Content",
                    "message": "Expression warning: columns.value.explanation: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  }
                ],
                "valid": true,
                "statistics": {
                  "totalNodes": 10,
                  "enabledNodes": 10,
                  "triggerNodes": 2,
                  "validConnections": 8,
                  "invalidConnections": 0,
                  "expressionsValidated": 4,
                  "errorCount": 0,
                  "warningCount": 14
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "attempts": 3
          }
        },
        "transformations": [
          "Validation Check",
          "Error Detection",
          "Automatic Fixes"
        ]
      },
      "errors": [
        {
          "type": "ValidationError",
          "message": "Error 1",
          "resolution": "Applied automatic fix",
          "attemptNumber": 1
        },
        {
          "type": "ValidationError",
          "message": "Error 2",
          "resolution": "Applied automatic fix",
          "attemptNumber": 2
        }
      ],
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "valid": true
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "validation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:10.702Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T14:00:11.115Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.361Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T14:00:11.362Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.570Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
                  "timestamp": "2025-08-11T14:00:11.570Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.809Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T14:00:11.809Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.979Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "triggerAtHour": 9
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Triggers daily digest email workflow on schedule",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
                  "timestamp": "2025-08-11T14:00:11.979Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.155Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Receives new social media posts from external platforms",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
                  "timestamp": "2025-08-11T14:00:12.156Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.391Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Routes content based on AI analysis results for flagging",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
                  "timestamp": "2025-08-11T14:00:12.391Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:07.955Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1",
                        "postgres_2"
                      ],
                      "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_3"
                      ],
                      "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                    },
                    {
                      "type": "aggregation",
                      "nodeIds": [
                        "code_2"
                      ],
                      "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                    }
                  ],
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:08.295Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "documentation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:10.702Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T14:00:11.115Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.361Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T14:00:11.362Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.570Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
                  "timestamp": "2025-08-11T14:00:11.570Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.809Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T14:00:11.809Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.979Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "triggerAtHour": 9
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Triggers daily digest email workflow on schedule",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
                  "timestamp": "2025-08-11T14:00:11.979Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.155Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Receives new social media posts from external platforms",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
                  "timestamp": "2025-08-11T14:00:12.156Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.391Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Routes content based on AI analysis results for flagging",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
                  "timestamp": "2025-08-11T14:00:12.391Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:07.955Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1",
                        "postgres_2"
                      ],
                      "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_3"
                      ],
                      "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                    },
                    {
                      "type": "aggregation",
                      "nodeIds": [
                        "code_2"
                      ],
                      "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                    }
                  ],
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T14:01:39.566Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_3",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T14:01:40.448Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "documentation": {
      "name": "Documentation",
      "success": true,
      "metrics": {
        "startTime": 1754920900868,
        "endTime": 1754920901592,
        "duration": 724,
        "memoryUsage": {
          "heapUsed": 171696,
          "heapTotal": 37650432,
          "external": 8397833
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T14:01:40.868Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting documentation phase"
        },
        {
          "timestamp": "2025-08-11T14:01:40.868Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for documentation phase"
        },
        {
          "timestamp": "2025-08-11T14:01:41.493Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Added 7 sticky notes for documentation"
        },
        {
          "timestamp": "2025-08-11T14:01:41.591Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T14:01:41.592Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754920766637",
        "createdAt": "2025-08-11T13:59:27.210Z",
        "state": {
          "phase": "complete",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.scheduleTrigger",
              "purpose": "Triggers daily digest email workflow on schedule"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.webhook",
              "purpose": "Receives new social media posts from external platforms"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.if",
              "purpose": "Routes content based on AI analysis results for flagging"
            }
          ],
          "selected": [
            "task_node_4",
            "task_node_3",
            "task_node_1",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Social Media Post Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "options": {},
                  "httpMethod": "POST",
                  "responseMode": "responseNode"
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Transform Post Data",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                  "language": "javascript"
                },
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "name": "AI Content Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "model": "gpt-3.5-turbo",
                  "options": {
                    "maxTokens": 200,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "complete"
                },
                "typeVersion": 1.1
              },
              {
                "id": "if_1",
                "name": "Check If Content Flagged",
                "type": "n8n-nodes-base.if",
                "onError": "continueRegularOutput",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "combinator": "and",
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        },
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "postgres_1",
                "name": "Store Analysis Results",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "options": {},
                  "operation": "insert"
                },
                "typeVersion": 2.6
              },
              {
                "id": "postgres_2",
                "name": "Store Clean Content",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "options": {},
                  "operation": "insert"
                },
                "typeVersion": 2.6
              },
              {
                "id": "scheduleTrigger_1",
                "name": "Daily Digest Schedule",
                "type": "n8n-nodes-base.scheduleTrigger",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "typeVersion": 1.2
              },
              {
                "id": "postgres_3",
                "name": "Get Daily Statistics",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                        "column": "analyzed_at",
                        "condition": ">="
                      }
                    ]
                  },
                  "schema": "public",
                  "options": {},
                  "operation": "select"
                },
                "typeVersion": 2.6
              },
              {
                "id": "code_2",
                "name": "Generate Report Summary",
                "type": "n8n-nodes-base.code",
                "onError": "continueRegularOutput",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                  "language": "javascript"
                },
                "typeVersion": 2
              },
              {
                "id": "emailSend_1",
                "name": "Send Daily Digest",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  },
                  "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "moderation@company.com"
                },
                "typeVersion": 2.1
              },
              {
                "id": "sticky_promo_1754920900964",
                "name": "Ghost Team Promo",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  100,
                  -130
                ],
                "parameters": {
                  "color": 4,
                  "width": 280,
                  "height": 910,
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_triggers_1754920900964",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  170,
                  -130
                ],
                "parameters": {
                  "color": 6,
                  "width": 310,
                  "height": 910,
                  "content": "## 📥 Triggers\nWebhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests.\n\nDaily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_inputs_1754920900964",
                "name": "Inputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "color": 5,
                  "width": 310,
                  "height": 910,
                  "content": "## 📊 Inputs\nRetrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_transforms_1754920900964",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "color": 4,
                  "width": 610,
                  "height": 910,
                  "content": "## ⚙️ Transform\nTransform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis.\n\nAI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_decision_1754920900964",
                "name": "Decision Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1070,
                  -130
                ],
                "parameters": {
                  "color": 3,
                  "width": 310,
                  "height": 910,
                  "content": "## 🔀 Decision\nRoute posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_aggregation_1754920900964",
                "name": "Aggregation Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  770,
                  -130
                ],
                "parameters": {
                  "color": 2,
                  "width": 310,
                  "height": 910,
                  "content": "## 🔄 Aggregation\nGenerate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_outputs_1754920900964",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1070,
                  -130
                ],
                "parameters": {
                  "color": 7,
                  "width": 610,
                  "height": 910,
                  "content": "## 🚀 Outputs\nStore both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail.\n\nSend formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                },
                "typeVersion": 1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1"
              ],
              "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1",
                "postgres_2"
              ],
              "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
            },
            {
              "type": "trigger",
              "nodeIds": [
                "scheduleTrigger_1"
              ],
              "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "postgres_3"
              ],
              "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
            },
            {
              "type": "aggregation",
              "nodeIds": [
                "code_2"
              ],
              "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
            },
            {
              "type": "notification",
              "nodeIds": [
                "emailSend_1"
              ],
              "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.scheduleTrigger",
                "purpose": "Triggers daily digest email workflow on schedule"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:59:48.138Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.webhook",
                "purpose": "Receives new social media posts from external platforms"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.if",
                "purpose": "Routes content based on AI analysis results for flagging"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:59:48.407Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:10.702Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T14:00:11.115Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.361Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T14:00:11.362Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.570Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
              "timestamp": "2025-08-11T14:00:11.570Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.809Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T14:00:11.809Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:11.979Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "triggerAtHour": 9
                      }
                    ]
                  },
                  "notice": ""
                },
                "typeVersion": "1.2"
              },
              "nodeId": "search_node_1",
              "purpose": "Triggers daily digest email workflow on schedule",
              "nodeType": "nodes-base.scheduleTrigger",
              "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
              "timestamp": "2025-08-11T14:00:11.979Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.155Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_2",
              "purpose": "Receives new social media posts from external platforms",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
              "timestamp": "2025-08-11T14:00:12.156Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.391Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_3",
              "purpose": "Routes content based on AI analysis results for flagging",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
              "timestamp": "2025-08-11T14:00:12.391Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T14:00:12.574Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T14:00:12.574Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T14:01:07.955Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T14:01:08.295Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T14:01:39.566Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_3",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 2,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:39.900Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "scheduleTrigger_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T14:01:40.216Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T14:01:40.448Z"
            },
            {
              "type": "setPhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T14:01:40.964Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  },
                  {
                    "id": "sticky_promo_1754920900964",
                    "name": "Ghost Team Promo",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      100,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 910,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_triggers_1754920900964",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      170,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 910,
                      "content": "## 📥 Triggers\nWebhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests.\n\nDaily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1754920900964",
                    "name": "Inputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 910,
                      "content": "## 📊 Inputs\nRetrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754920900964",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 610,
                      "height": 910,
                      "content": "## ⚙️ Transform\nTransform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis.\n\nAI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1754920900964",
                    "name": "Decision Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1070,
                      -130
                    ],
                    "parameters": {
                      "color": 3,
                      "width": 310,
                      "height": 910,
                      "content": "## 🔀 Decision\nRoute posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_aggregation_1754920900964",
                    "name": "Aggregation Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      770,
                      -130
                    ],
                    "parameters": {
                      "color": 2,
                      "width": 310,
                      "height": 910,
                      "content": "## 🔄 Aggregation\nGenerate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754920900964",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1070,
                      -130
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 610,
                      "height": 910,
                      "content": "## 🚀 Outputs\nStore both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail.\n\nSend formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T14:01:41.238Z"
            },
            {
              "type": "completePhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T14:01:41.238Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "validatedWorkflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 200
                  }
                },
                "name": "AI Content Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Check If Content Flagged",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Analysis Results",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Clean Content",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1.2,
                "onError": "stopWorkflow"
              },
              {
                "id": "postgres_3",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "select",
                  "schema": "public",
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "column": "analyzed_at",
                        "condition": ">=",
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}"
                      }
                    ]
                  },
                  "options": {}
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2.6,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_2",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];"
                },
                "name": "Generate Report Summary",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                  "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Send Daily Digest",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          }
        },
        "output": {
          "documentedWorkflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "responseNode",
                  "options": {}
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                      },
                      {
                        "role": "user",
                        "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                      }
                    ]
                  },
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 200
                  }
                },
                "name": "AI Content Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Check If Content Flagged",
                "typeVersion": 2.2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Analysis Results",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  400
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                      "content": "={{ $('Transform Post Data').item.json.content }}",
                      "platform": "={{ $('Transform Post Data').item.json.platform }}",
                      "author": "={{ $('Transform Post Data').item.json.author }}",
                      "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                      "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                      "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                      "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                      "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  },
                  "options": {}
                },
                "name": "Store Clean Content",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "scheduleTrigger_1",
                "type": "n8n-nodes-base.scheduleTrigger",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "rule": {
                    "interval": [
                      {
                        "field": "hours",
                        "hoursInterval": 24
                      }
                    ]
                  },
                  "triggerAtHour": 9
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1.2,
                "onError": "stopWorkflow"
              },
              {
                "id": "postgres_3",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "select",
                  "schema": "public",
                  "table": "content_moderation",
                  "where": {
                    "values": [
                      {
                        "column": "analyzed_at",
                        "condition": ">=",
                        "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}"
                      }
                    ]
                  },
                  "options": {}
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2.6,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_2",
                "type": "n8n-nodes-base.code",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "language": "javascript",
                  "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];"
                },
                "name": "Generate Report Summary",
                "typeVersion": 2,
                "onError": "continueRegularOutput"
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  1150,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                  "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "options": {
                    "allowUnauthorizedCerts": false
                  }
                },
                "name": "Send Daily Digest",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "sticky_promo_1754920900964",
                "name": "Ghost Team Promo",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  100,
                  -130
                ],
                "parameters": {
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team.",
                  "height": 910,
                  "width": 280,
                  "color": 4
                }
              },
              {
                "id": "sticky_triggers_1754920900964",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  170,
                  -130
                ],
                "parameters": {
                  "content": "## 📥 Triggers\nWebhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests.\n\nDaily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day.",
                  "height": 910,
                  "width": 310,
                  "color": 6
                }
              },
              {
                "id": "sticky_inputs_1754920900964",
                "name": "Inputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "content": "## 📊 Inputs\nRetrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation.",
                  "height": 910,
                  "width": 310,
                  "color": 5
                }
              },
              {
                "id": "sticky_transforms_1754920900964",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "content": "## ⚙️ Transform\nTransform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis.\n\nAI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring.",
                  "height": 910,
                  "width": 610,
                  "color": 4
                }
              },
              {
                "id": "sticky_decision_1754920900964",
                "name": "Decision Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1070,
                  -130
                ],
                "parameters": {
                  "content": "## 🔀 Decision\nRoute posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths.",
                  "height": 910,
                  "width": 310,
                  "color": 3
                }
              },
              {
                "id": "sticky_aggregation_1754920900964",
                "name": "Aggregation Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  770,
                  -130
                ],
                "parameters": {
                  "content": "## 🔄 Aggregation\nGenerate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review.",
                  "height": 910,
                  "width": 310,
                  "color": 2
                }
              },
              {
                "id": "sticky_outputs_1754920900964",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1070,
                  -130
                ],
                "parameters": {
                  "content": "## 🚀 Outputs\nStore both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail.\n\nSend formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review.",
                  "height": 910,
                  "width": 610,
                  "color": 7
                }
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Check If Content Flagged",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Check If Content Flagged": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Clean Content",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Generate Report Summary",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Generate Report Summary": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "stickyNotesAdded": 7
        },
        "transformations": [
          "Documentation Generation",
          "Sticky Note Placement",
          "Workflow Finalization"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "documentation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:10.702Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T14:00:11.115Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.361Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T14:00:11.362Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.570Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
                  "timestamp": "2025-08-11T14:00:11.570Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.809Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T14:00:11.809Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.979Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "triggerAtHour": 9
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Triggers daily digest email workflow on schedule",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
                  "timestamp": "2025-08-11T14:00:11.979Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.155Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Receives new social media posts from external platforms",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
                  "timestamp": "2025-08-11T14:00:12.156Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.391Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Routes content based on AI analysis results for flagging",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
                  "timestamp": "2025-08-11T14:00:12.391Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:07.955Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1",
                        "postgres_2"
                      ],
                      "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_3"
                      ],
                      "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                    },
                    {
                      "type": "aggregation",
                      "nodeIds": [
                        "code_2"
                      ],
                      "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                    }
                  ],
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T14:01:39.566Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_3",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T14:01:40.448Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "complete",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.scheduleTrigger",
                  "purpose": "Triggers daily digest email workflow on schedule"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.webhook",
                  "purpose": "Receives new social media posts from external platforms"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.if",
                  "purpose": "Routes content based on AI analysis results for flagging"
                }
              ],
              "selected": [
                "task_node_4",
                "task_node_3",
                "task_node_1",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "options": {},
                      "httpMethod": "POST",
                      "responseMode": "responseNode"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "options": {
                        "maxTokens": 200,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                          },
                          {
                            "role": "user",
                            "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "complete"
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Check If Content Flagged",
                    "type": "n8n-nodes-base.if",
                    "onError": "continueRegularOutput",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "postgres_2",
                    "name": "Store Clean Content",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      400
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $('Transform Post Data').item.json.author }}",
                          "content": "={{ $('Transform Post Data').item.json.content }}",
                          "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                          "platform": "={{ $('Transform Post Data').item.json.platform }}",
                          "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                          "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                          "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "options": {},
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "scheduleTrigger_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.scheduleTrigger",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "hoursInterval": 24
                          }
                        ]
                      },
                      "triggerAtHour": 9
                    },
                    "typeVersion": 1.2
                  },
                  {
                    "id": "postgres_3",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "where": {
                        "values": [
                          {
                            "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                            "column": "analyzed_at",
                            "condition": ">="
                          }
                        ]
                      },
                      "schema": "public",
                      "options": {},
                      "operation": "select"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "code_2",
                    "name": "Generate Report Summary",
                    "type": "n8n-nodes-base.code",
                    "onError": "continueRegularOutput",
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                      "language": "javascript"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      1150,
                      600
                    ],
                    "parameters": {
                      "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "options": {
                        "allowUnauthorizedCerts": false
                      },
                      "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  },
                  {
                    "id": "sticky_promo_1754920900964",
                    "name": "Ghost Team Promo",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      100,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 910,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_triggers_1754920900964",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      170,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 910,
                      "content": "## 📥 Triggers\nWebhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests.\n\nDaily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1754920900964",
                    "name": "Inputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 910,
                      "content": "## 📊 Inputs\nRetrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754920900964",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 610,
                      "height": 910,
                      "content": "## ⚙️ Transform\nTransform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis.\n\nAI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1754920900964",
                    "name": "Decision Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1070,
                      -130
                    ],
                    "parameters": {
                      "color": 3,
                      "width": 310,
                      "height": 910,
                      "content": "## 🔀 Decision\nRoute posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_aggregation_1754920900964",
                    "name": "Aggregation Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      770,
                      -130
                    ],
                    "parameters": {
                      "color": 2,
                      "width": 310,
                      "height": 910,
                      "content": "## 🔄 Aggregation\nGenerate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754920900964",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1070,
                      -130
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 610,
                      "height": 910,
                      "content": "## 🚀 Outputs\nStore both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail.\n\nSend formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Check If Content Flagged",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Generate Report Summary",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Generate Report Summary": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Check If Content Flagged": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Clean Content",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1",
                    "postgres_2"
                  ],
                  "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "scheduleTrigger_1"
                  ],
                  "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_3"
                  ],
                  "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                },
                {
                  "type": "aggregation",
                  "nodeIds": [
                    "code_2"
                  ],
                  "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.scheduleTrigger",
                    "purpose": "Triggers daily digest email workflow on schedule"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:59:48.138Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.webhook",
                    "purpose": "Receives new social media posts from external platforms"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.if",
                    "purpose": "Routes content based on AI analysis results for flagging"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:59:48.407Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:10.702Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T14:00:11.115Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.361Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T14:00:11.362Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.570Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Timestamps\n    createdAt: postData.created_at || postData.timestamp || new Date().toISOString(),\n    processedAt: new Date().toISOString(),\n    \n    // Analysis preparation flags\n    requiresAnalysis: true,\n    contentLength: (postData.text || postData.content || '').length,\n    hasMedia: (postData.images?.length > 0 || postData.videos?.length > 0 || false),\n    \n    // Risk indicators for prioritization\n    riskFactors: {\n      hasExternalLinks: /https?:\\/\\//.test(postData.text || postData.content || ''),\n      highEngagement: (postData.likes_count || 0) > 1000,\n      newAccount: postData.author?.account_age_days < 30 || false,\n      multipleHashtags: (postData.hashtags?.length || 0) > 5\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template to handle social media post data transformation for AI content analysis workflow",
                  "timestamp": "2025-08-11T14:00:11.570Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.809Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T14:00:11.809Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:11.979Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email workflow to send moderation reports to administrators",
                    "parameters": {
                      "rule": {
                        "interval": [
                          {
                            "field": "hours",
                            "triggerAtHour": 9
                          }
                        ]
                      },
                      "notice": ""
                    },
                    "typeVersion": "1.2"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Triggers daily digest email workflow on schedule",
                  "nodeType": "nodes-base.scheduleTrigger",
                  "reasoning": "Configured Schedule Trigger to run daily at 9 AM to send digest emails to moderators with flagged content statistics",
                  "timestamp": "2025-08-11T14:00:11.979Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.155Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives new social media posts from external platforms to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Receives new social media posts from external platforms",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests containing social media post data at '/social-media-posts' endpoint",
                  "timestamp": "2025-08-11T14:00:12.156Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.391Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI analysis results to flag inappropriate content",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Routes content based on AI analysis results for flagging",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node routes social media posts based on AI analysis results, checking if content is flagged as inappropriate",
                  "timestamp": "2025-08-11T14:00:12.391Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T14:00:12.574Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:07.955Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "message"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "=Daily Content Moderation Summary\n\nDate: {{ $json.reportDate }}\n\n📊 STATISTICS:\n• Total Posts Analyzed: {{ $json.summary.totalPosts }}\n• Flagged Posts: {{ $json.summary.flaggedPosts }} ({{ $json.summary.flaggedPercentage }}%)\n• Clean Posts: {{ $json.summary.cleanPosts }}\n\n🚨 SEVERITY BREAKDOWN:\n• High Risk: {{ $json.severityBreakdown.high }}\n• Medium Risk: {{ $json.severityBreakdown.medium }}\n• Low Risk: {{ $json.severityBreakdown.low }}\n\n📱 PLATFORM BREAKDOWN:\n{{ Object.entries($json.platformBreakdown).map(([platform, count]) => `• ${platform}: ${count}`).join('\\n') }}\n\n🔍 TOP FLAGGED ITEMS:\n{{ $json.flaggedItems.map((item, index) => `${index + 1}. [${item.severity.toUpperCase()}] ${item.platform} - ${item.author}\\n   Categories: ${item.categories.join(', ')}\\n   Reason: ${item.explanation}\\n   Content: ${item.content}\\n`).join('\\n') }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "=Daily Content Moderation Report - {{ $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Webhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "AI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Route posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1",
                        "postgres_2"
                      ],
                      "description": "Store both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "scheduleTrigger_1"
                      ],
                      "description": "Daily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_3"
                      ],
                      "description": "Retrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                    },
                    {
                      "type": "aggregation",
                      "nodeIds": [
                        "code_2"
                      ],
                      "description": "Generate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Send formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                    }
                  ],
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T14:01:08.295Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T14:01:39.566Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_3",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:39.900Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "scheduleTrigger_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:40.216Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T14:01:40.448Z"
                },
                {
                  "type": "setPhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T14:01:40.964Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "options": {},
                          "httpMethod": "POST",
                          "responseMode": "responseNode"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.content || postData.text || postData.message,\n      platform: postData.platform || 'unknown',\n      author: postData.author || postData.username || postData.user,\n      timestamp: postData.timestamp || postData.created_at || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0,\n        hashtags: postData.hashtags || [],\n        mentions: postData.mentions || []\n      }\n    }\n  };\n});",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "options": {
                            "maxTokens": 200,
                            "temperature": 0.1
                          },
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, and misinformation. Return a JSON response with: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low|medium|high\", \"explanation\": \"brief reason\"}"
                              },
                              {
                                "role": "user",
                                "content": "=Analyze this social media post:\n\nContent: {{ $json.content }}\nPlatform: {{ $json.platform }}\nAuthor: {{ $json.author }}\nHashtags: {{ $json.metadata.hashtags }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "operation": "complete"
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Check If Content Flagged",
                        "type": "n8n-nodes-base.if",
                        "onError": "continueRegularOutput",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "1",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "postgres_2",
                        "name": "Store Clean Content",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          400
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $('Transform Post Data').item.json.author }}",
                              "content": "={{ $('Transform Post Data').item.json.content }}",
                              "flagged": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $('Transform Post Data').item.json.postId }}",
                              "platform": "={{ $('Transform Post Data').item.json.platform }}",
                              "severity": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).severity }}",
                              "categories": "={{ JSON.stringify(JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).categories) }}",
                              "confidence": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).confidence }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "explanation": "={{ JSON.parse($('AI Content Analysis').item.json.choices[0].message.content).explanation }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "options": {},
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "scheduleTrigger_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.scheduleTrigger",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "rule": {
                            "interval": [
                              {
                                "field": "hours",
                                "hoursInterval": 24
                              }
                            ]
                          },
                          "triggerAtHour": 9
                        },
                        "typeVersion": 1.2
                      },
                      {
                        "id": "postgres_3",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "where": {
                            "values": [
                              {
                                "value": "={{ new Date(Date.now() - 24*60*60*1000).toISOString() }}",
                                "column": "analyzed_at",
                                "condition": ">="
                              }
                            ]
                          },
                          "schema": "public",
                          "options": {},
                          "operation": "select"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "code_2",
                        "name": "Generate Report Summary",
                        "type": "n8n-nodes-base.code",
                        "onError": "continueRegularOutput",
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "jsCode": "// Generate daily moderation report summary\nconst items = $input.all();\nconst data = items.map(item => item.json);\n\nconst totalPosts = data.length;\nconst flaggedPosts = data.filter(post => post.flagged).length;\nconst cleanPosts = totalPosts - flaggedPosts;\n\nconst severityBreakdown = {\n  high: data.filter(post => post.severity === 'high').length,\n  medium: data.filter(post => post.severity === 'medium').length,\n  low: data.filter(post => post.severity === 'low').length\n};\n\nconst platformBreakdown = {};\ndata.forEach(post => {\n  platformBreakdown[post.platform] = (platformBreakdown[post.platform] || 0) + 1;\n});\n\nconst flaggedItems = data.filter(post => post.flagged).slice(0, 10); // Top 10 flagged items\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    summary: {\n      totalPosts,\n      flaggedPosts,\n      cleanPosts,\n      flaggedPercentage: ((flaggedPosts / totalPosts) * 100).toFixed(2)\n    },\n    severityBreakdown,\n    platformBreakdown,\n    flaggedItems: flaggedItems.map(item => ({\n      postId: item.post_id,\n      platform: item.platform,\n      author: item.author,\n      severity: item.severity,\n      categories: JSON.parse(item.categories || '[]'),\n      explanation: item.explanation,\n      content: item.content.substring(0, 100) + '...'\n    }))\n  }\n}];",
                          "language": "javascript"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          1150,
                          600
                        ],
                        "parameters": {
                          "text": "={{ 'Daily Content Moderation Summary\\n\\nDate: ' + $json.reportDate + '\\n\\n📊 STATISTICS:\\n• Total Posts Analyzed: ' + $json.summary.totalPosts + '\\n• Flagged Posts: ' + $json.summary.flaggedPosts + ' (' + $json.summary.flaggedPercentage + '%)\\n• Clean Posts: ' + $json.summary.cleanPosts + '\\n\\n🚨 SEVERITY BREAKDOWN:\\n• High Risk: ' + $json.severityBreakdown.high + '\\n• Medium Risk: ' + $json.severityBreakdown.medium + '\\n• Low Risk: ' + $json.severityBreakdown.low + '\\n\\n📱 PLATFORM BREAKDOWN:\\n' + Object.entries($json.platformBreakdown).map(([platform, count]) => '• ' + platform + ': ' + count).join('\\n') + '\\n\\n🔍 TOP FLAGGED ITEMS:\\n' + $json.flaggedItems.map((item, index) => (index + 1) + '. [' + item.severity.toUpperCase() + '] ' + item.platform + ' - ' + item.author + '\\n   Categories: ' + item.categories.join(', ') + '\\n   Reason: ' + item.explanation + '\\n   Content: ' + item.content + '\\n').join('\\n') + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "options": {
                            "allowUnauthorizedCerts": false
                          },
                          "subject": "={{ 'Daily Content Moderation Report - ' + $json.reportDate }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      },
                      {
                        "id": "sticky_promo_1754920900964",
                        "name": "Ghost Team Promo",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          100,
                          -130
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 280,
                          "height": 910,
                          "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_triggers_1754920900964",
                        "name": "Triggers Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          170,
                          -130
                        ],
                        "parameters": {
                          "color": 6,
                          "width": 310,
                          "height": 910,
                          "content": "## 📥 Triggers\nWebhook receives new social media posts from external platforms to initiate the content moderation workflow. Posts are received via HTTP POST requests.\n\nDaily scheduled trigger that initiates the digest email workflow to generate and send moderation reports to administrators at 9 AM each day."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_inputs_1754920900964",
                        "name": "Inputs Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          470,
                          -130
                        ],
                        "parameters": {
                          "color": 5,
                          "width": 310,
                          "height": 910,
                          "content": "## 📊 Inputs\nRetrieve daily content moderation statistics from the database, including all posts analyzed in the last 24 hours for report generation."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_transforms_1754920900964",
                        "name": "Transform Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          470,
                          -130
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 610,
                          "height": 910,
                          "content": "## ⚙️ Transform\nTransform and normalize incoming social media post data, extracting key fields like content, author, platform, and metadata to prepare for AI analysis.\n\nAI-powered content analysis using OpenAI to detect inappropriate material, hate speech, harassment, and other policy violations with confidence scoring."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_decision_1754920900964",
                        "name": "Decision Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1070,
                          -130
                        ],
                        "parameters": {
                          "color": 3,
                          "width": 310,
                          "height": 910,
                          "content": "## 🔀 Decision\nRoute posts based on AI analysis results, separating flagged inappropriate content from clean content for different storage and handling paths."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_aggregation_1754920900964",
                        "name": "Aggregation Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          770,
                          -130
                        ],
                        "parameters": {
                          "color": 2,
                          "width": 310,
                          "height": 910,
                          "content": "## 🔄 Aggregation\nGenerate comprehensive daily report summary with statistics, severity breakdowns, platform analysis, and details of top flagged items for moderator review."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_outputs_1754920900964",
                        "name": "Outputs Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1070,
                          -130
                        ],
                        "parameters": {
                          "color": 7,
                          "width": 610,
                          "height": 910,
                          "content": "## 🚀 Outputs\nStore both flagged and clean content analysis results in PostgreSQL database with detailed metadata, confidence scores, and violation categories for audit trail.\n\nSend formatted daily digest email to moderators containing moderation statistics, flagged content summaries, and actionable insights for content review."
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Check If Content Flagged",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Generate Report Summary",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Generate Report Summary": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Check If Content Flagged": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Clean Content",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T14:01:41.238Z"
                },
                {
                  "type": "completePhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T14:01:41.238Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    }
  },
  "summary": {
    "totalNodes": 17,
    "totalConnections": 7,
    "validationAttempts": 3,
    "errorsFixed": 2,
    "stickyNotesAdded": 7,
    "performanceScore": 20,
    "qualityScore": 95,
    "completenessScore": 100
  },
  "optimizationSuggestions": [
    "Consider optimizing discovery phase (took 21877ms)",
    "Consider optimizing configuration phase (took 23779ms)",
    "Consider optimizing building phase (took 55808ms)",
    "Consider optimizing validation phase (took 32191ms)",
    "High validation attempts detected. Consider improving initial node configuration."
  ],
  "errorPatterns": [
    {
      "pattern": "ValidationError",
      "frequency": 2,
      "suggestedFix": "Review node configuration requirements and ensure all required fields are set"
    }
  ]
}