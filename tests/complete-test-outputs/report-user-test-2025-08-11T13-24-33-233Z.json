{
  "testName": "User Test",
  "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
  "sessionId": "complete_e2e_user_test_1754918555640",
  "timestamp": "2025-08-11T13:22:35.641Z",
  "duration": 117592,
  "success": true,
  "phases": {
    "discovery": {
      "name": "Discovery",
      "success": true,
      "metrics": {
        "startTime": 1754918556133,
        "endTime": 1754918579064,
        "duration": 22931,
        "memoryUsage": {
          "heapUsed": -3166648,
          "heapTotal": 34013184,
          "external": 6343412
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T13:22:36.133Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting discovery phase"
        },
        {
          "timestamp": "2025-08-11T13:22:36.133Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for discovery phase"
        },
        {
          "timestamp": "2025-08-11T13:22:50.967Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:22:50.967Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"transform_data\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:50.967Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:22:50.967Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"chat_with_ai\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:50.967Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:22:50.968Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"insert_postgres_data\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:50.968Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_for_task"
        },
        {
          "timestamp": "2025-08-11T13:22:50.968Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"task\":\"send_email\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:51.112Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:51.135Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:51.204Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:51.615Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_for_task completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:51.617Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T13:22:51.617Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"webhook\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T13:22:51.617Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T13:22:51.617Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"if\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T13:22:51.617Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: search_nodes"
        },
        {
          "timestamp": "2025-08-11T13:22:51.617Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"query\":\"cron\",\"limit\":20}"
        },
        {
          "timestamp": "2025-08-11T13:22:51.754Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:51.810Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:51.828Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool search_nodes completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:58.962Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T13:22:58.962Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.emailSend (Send an email notification)"
        },
        {
          "timestamp": "2025-08-11T13:22:58.962Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.postgres (Insert data into PostgreSQL table)"
        },
        {
          "timestamp": "2025-08-11T13:22:58.962Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.openAi (Send a message to an AI model and get response)"
        },
        {
          "timestamp": "2025-08-11T13:22:58.962Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.cron (Schedule daily digest email generation at specific times)"
        },
        {
          "timestamp": "2025-08-11T13:22:58.962Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Route content based on AI analysis results - separate appropriate from inappropriate content)"
        },
        {
          "timestamp": "2025-08-11T13:22:58.962Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Receive real-time notifications when new social media posts are published)"
        },
        {
          "timestamp": "2025-08-11T13:22:59.063Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T13:22:59.063Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_1",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.emailSend",
          "purpose": "Send an email notification"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.postgres",
          "purpose": "Insert data into PostgreSQL table"
        },
        {
          "id": "task_node_2",
          "type": "nodes-base.openAi",
          "purpose": "Send a message to an AI model and get response"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.cron",
          "purpose": "Schedule daily digest email generation at specific times"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.if",
          "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
        },
        {
          "id": "search_node_3",
          "type": "nodes-base.webhook",
          "purpose": "Receive real-time notifications when new social media posts are published"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754918555640",
        "createdAt": "2025-08-11T13:22:36.092Z",
        "state": {
          "phase": "configuration",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_4",
            "task_node_3",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.cron",
                "purpose": "Schedule daily digest email generation at specific times"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.if",
                "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.webhook",
                "purpose": "Receive real-time notifications when new social media posts are published"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:22:58.494Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "prompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items"
        },
        "output": {
          "nodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "displayName": "send email",
              "purpose": "Send an email notification",
              "isPreConfigured": true,
              "config": {
                "fromEmail": "",
                "toEmail": "",
                "subject": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 3000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "displayName": "insert postgres data",
              "purpose": "Insert data into PostgreSQL table",
              "isPreConfigured": true,
              "config": {
                "operation": "insert",
                "table": "",
                "columns": "",
                "returnFields": "*",
                "onError": "stopWorkflow",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "displayName": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "displayName": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "needsConfiguration": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "displayName": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "needsConfiguration": true
            }
          ]
        },
        "transformations": [
          "Intent Analysis",
          "Node Discovery",
          "Selection"
        ]
      }
    },
    "configuration": {
      "name": "Configuration",
      "success": true,
      "metrics": {
        "startTime": 1754918579064,
        "endTime": 1754918603145,
        "duration": 24081,
        "memoryUsage": {
          "heapUsed": 3834152,
          "heapTotal": 36372480,
          "external": 7175754
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T13:22:59.064Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting configuration phase"
        },
        {
          "timestamp": "2025-08-11T13:22:59.064Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for configuration phase"
        },
        {
          "timestamp": "2025-08-11T13:22:59.172Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:22:59.172Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:59.172Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:22:59.172Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.emailSend\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:59.172Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:22:59.172Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:59.172Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:22:59.173Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.openAi\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:59.173Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:22:59.173Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.cron\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:59.173Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:22:59.173Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:59.173Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:22:59.173Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\"}"
        },
        {
          "timestamp": "2025-08-11T13:22:59.341Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:59.345Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:59.348Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:59.350Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:59.351Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:59.352Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:22:59.353Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:06.222Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:06.222Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\",\"config\":{\"table\":\"content_moderation\",\"columns\":\"post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle\",\"operation\":\"insert\",\"returnFields\":\"*\"}}"
        },
        {
          "timestamp": "2025-08-11T13:23:06.663Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:06.666Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:06.666Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.postgres\",\"config\":{\"table\":\"content_moderation\",\"columns\":\"post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle\",\"operation\":\"insert\",\"returnFields\":\"*\",\"schema\":\"public\"}}"
        },
        {
          "timestamp": "2025-08-11T13:23:06.827Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:09.056Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:09.056Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.emailSend\",\"config\":{\"text\":\"Daily Content Moderation Report\\n\\n📊 Statistics:\\n- Total posts analyzed: {{$json.totalPosts}}\\n- Flagged items: {{$json.flaggedCount}}\\n- Clean content: {{$json.cleanCount}}\\n- Flagging rate: {{$json.flaggingRate}}%\\n\\n🚩 Flagged Items Summary:\\n{{$json.flaggedItemsSummary}}\\n\\n📈 Trends:\\n- Compared to yesterday: {{$json.trendComparison}}\\n- Most common violation types: {{$json.topViolationTypes}}\\n\\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\\n\\nThis is an automated report from the content moderation system.\",\"subject\":\"Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}\",\"toEmail\":\"moderators@company.com\",\"fromEmail\":\"content-moderation@company.com\"}}"
        },
        {
          "timestamp": "2025-08-11T13:23:09.205Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:09.303Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:23:09.303Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.cron\"}"
        },
        {
          "timestamp": "2025-08-11T13:23:09.420Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:14.044Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:14.044Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.cron\",\"config\":{\"notice\":\"\",\"triggerTimes\":{\"item\":[{\"hour\":9,\"minute\":0}]}}}"
        },
        {
          "timestamp": "2025-08-11T13:23:14.203Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:14.296Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:23:14.296Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\"}"
        },
        {
          "timestamp": "2025-08-11T13:23:14.424Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:14.852Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:14.852Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.code\",\"config\":{\"jsCode\":\"// Transform social media posts for AI content analysis\\nconst results = [];\\n\\nfor (const item of items) {\\n  // Extract and normalize social media post data\\n  const postData = item.json;\\n  \\n  // Create standardized structure for AI analysis\\n  const transformedPost = {\\n    // Core identification\\n    postId: postData.id || postData.post_id,\\n    platform: postData.platform || 'unknown',\\n    \\n    // Content for AI analysis\\n    content: {\\n      text: postData.text || postData.content || postData.message || '',\\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\\n      hashtags: postData.hashtags || [],\\n      mentions: postData.mentions || []\\n    },\\n    \\n    // Author information\\n    author: {\\n      id: postData.author?.id || postData.user_id,\\n      username: postData.author?.username || postData.username,\\n      followerCount: postData.author?.followers_count || 0,\\n      verified: postData.author?.verified || false\\n    },\\n    \\n    // Engagement metrics\\n    engagement: {\\n      likes: postData.likes_count || postData.likes || 0,\\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\\n      comments: postData.comments_count || postData.replies || 0\\n    },\\n    \\n    // Metadata for processing\\n    metadata: {\\n      originalPostDate: postData.created_at || postData.timestamp,\\n      processedAt: new Date().toISOString(),\\n      language: postData.language || 'unknown',\\n      location: postData.location || null,\\n      contentLength: (postData.text || postData.content || '').length\\n    },\\n    \\n    // Initialize analysis fields\\n    analysis: {\\n      status: 'pending',\\n      riskScore: null,\\n      categories: [],\\n      flagged: false,\\n      reviewRequired: false\\n    }\\n  };\\n  \\n  results.push({\\n    json: transformedPost\\n  });\\n}\\n\\nreturn results;\",\"language\":\"javaScript\"}}"
        },
        {
          "timestamp": "2025-08-11T13:23:14.966Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:15.035Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: get_node_essentials"
        },
        {
          "timestamp": "2025-08-11T13:23:15.035Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\"}"
        },
        {
          "timestamp": "2025-08-11T13:23:15.154Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool get_node_essentials completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:17.886Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:17.886Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.openAi\",\"config\":{\"modelId\":\"gpt-4\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\\\"flagged\\\": boolean, \\\"confidence\\\": number (0-1), \\\"categories\\\": [array of violation types], \\\"severity\\\": \\\"low\\\"|\\\"medium\\\"|\\\"high\\\", \\\"summary\\\": \\\"brief explanation\\\"}\"},{\"role\":\"user\",\"content\":\"Please analyze this social media post for inappropriate content:\\n\\nPost Content: {{$json.content}}\\nAuthor: {{$json.author}}\\nPlatform: {{$json.platform}}\\nPost ID: {{$json.post_id}}\"}]},\"resource\":\"chat\",\"operation\":\"message\",\"options\":{\"temperature\":0.1,\"maxTokens\":500}}}"
        },
        {
          "timestamp": "2025-08-11T13:23:17.998Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:20.357Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:20.357Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.webhook\",\"config\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\",\"responseMode\":\"onReceived\",\"responseData\":\"firstEntryJson\",\"responseCode\":200}}"
        },
        {
          "timestamp": "2025-08-11T13:23:20.467Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:21.022Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_node_minimal"
        },
        {
          "timestamp": "2025-08-11T13:23:21.022Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"nodeType\":\"nodes-base.if\",\"config\":{\"conditions\":{\"conditions\":[{\"id\":\"1\",\"leftValue\":\"={{ $json.aiAnalysis.isInappropriate }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equals\"}}],\"combineOperation\":\"any\"}}}"
        },
        {
          "timestamp": "2025-08-11T13:23:21.204Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_node_minimal completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:23:23.033Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.code (Transform data structure using JavaScript)"
        },
        {
          "timestamp": "2025-08-11T13:23:23.034Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.emailSend (Send an email notification)"
        },
        {
          "timestamp": "2025-08-11T13:23:23.034Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.postgres (Insert data into PostgreSQL table)"
        },
        {
          "timestamp": "2025-08-11T13:23:23.034Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.openAi (Send a message to an AI model and get response)"
        },
        {
          "timestamp": "2025-08-11T13:23:23.034Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.cron (Schedule daily digest email generation at specific times)"
        },
        {
          "timestamp": "2025-08-11T13:23:23.034Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.if (Route content based on AI analysis results - separate appropriate from inappropriate content)"
        },
        {
          "timestamp": "2025-08-11T13:23:23.034Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: nodes-base.webhook (Receive real-time notifications when new social media posts are published)"
        },
        {
          "timestamp": "2025-08-11T13:23:23.144Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T13:23:23.145Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "task_node_1",
          "type": "nodes-base.code",
          "purpose": "Transform data structure using JavaScript",
          "configuration": {
            "typeVersion": 2,
            "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
            "parameters": {
              "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
              "language": "javaScript"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_4",
          "type": "nodes-base.emailSend",
          "purpose": "Send an email notification",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 3000,
            "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
            "parameters": {
              "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
              "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
              "toEmail": "moderators@company.com",
              "fromEmail": "content-moderation@company.com"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_3",
          "type": "nodes-base.postgres",
          "purpose": "Insert data into PostgreSQL table",
          "configuration": {
            "onError": "stopWorkflow",
            "maxTries": 2,
            "retryOnFail": true,
            "waitBetweenTries": 1000,
            "typeVersion": 2.4,
            "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
            "parameters": {
              "table": "content_moderation",
              "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
              "operation": "insert",
              "returnFields": "*",
              "schema": "public"
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "task_node_2",
          "type": "nodes-base.openAi",
          "purpose": "Send a message to an AI model and get response",
          "configuration": {
            "onError": "continueRegularOutput",
            "maxTries": 3,
            "retryOnFail": true,
            "alwaysOutputData": true,
            "waitBetweenTries": 5000,
            "typeVersion": 1,
            "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
            "parameters": {
              "modelId": "gpt-4",
              "messages": {
                "values": [
                  {
                    "role": "system",
                    "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                  },
                  {
                    "role": "user",
                    "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                  }
                ]
              },
              "resource": "chat",
              "operation": "message",
              "options": {
                "temperature": 0.1,
                "maxTokens": 500
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_1",
          "type": "nodes-base.cron",
          "purpose": "Schedule daily digest email generation at specific times",
          "configuration": {
            "typeVersion": "1",
            "notes": "Triggers daily digest email generation for content moderation reports",
            "parameters": {
              "notice": "",
              "triggerTimes": {
                "item": [
                  {
                    "hour": 9,
                    "minute": 0
                  }
                ]
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_2",
          "type": "nodes-base.if",
          "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
          "configuration": {
            "typeVersion": "2.2",
            "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
            "parameters": {
              "conditions": {
                "conditions": [
                  {
                    "id": "1",
                    "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "equals"
                    }
                  }
                ],
                "combineOperation": "any"
              }
            }
          },
          "validationStatus": "valid"
        },
        {
          "id": "search_node_3",
          "type": "nodes-base.webhook",
          "purpose": "Receive real-time notifications when new social media posts are published",
          "configuration": {
            "typeVersion": "2",
            "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
            "parameters": {
              "path": "social-media-posts",
              "httpMethod": "POST",
              "responseMode": "onReceived",
              "responseData": "firstEntryJson",
              "responseCode": 200
            }
          },
          "validationStatus": "valid"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754918555640",
        "createdAt": "2025-08-11T13:22:36.092Z",
        "state": {
          "phase": "building",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_4",
            "task_node_3",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "nodes": [],
            "settings": {},
            "connections": {}
          },
          "buildPhases": [],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.cron",
                "purpose": "Schedule daily digest email generation at specific times"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.if",
                "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.webhook",
                "purpose": "Receive real-time notifications when new social media posts are published"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:21.205Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
              "timestamp": "2025-08-11T13:23:21.390Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.687Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T13:23:21.687Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.883Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T13:23:21.883Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.077Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T13:23:22.078Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.278Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email generation for content moderation reports",
                "parameters": {
                  "notice": "",
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Schedule daily digest email generation at specific times",
              "nodeType": "nodes-base.cron",
              "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
              "timestamp": "2025-08-11T13:23:22.278Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.572Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ],
                    "combineOperation": "any"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
              "timestamp": "2025-08-11T13:23:22.573Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.764Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_3",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
              "timestamp": "2025-08-11T13:23:22.764Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.872Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:22.872Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "discoveredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "displayName": "transform data",
              "purpose": "Transform data structure using JavaScript",
              "isPreConfigured": true,
              "config": {
                "language": "javaScript",
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
              }
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "displayName": "send email",
              "purpose": "Send an email notification",
              "isPreConfigured": true,
              "config": {
                "fromEmail": "",
                "toEmail": "",
                "subject": "",
                "text": "",
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 3000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "displayName": "insert postgres data",
              "purpose": "Insert data into PostgreSQL table",
              "isPreConfigured": true,
              "config": {
                "operation": "insert",
                "table": "",
                "columns": "",
                "returnFields": "*",
                "onError": "stopWorkflow",
                "retryOnFail": true,
                "maxTries": 2,
                "waitBetweenTries": 1000
              }
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "displayName": "chat with ai",
              "purpose": "Send a message to an AI model and get response",
              "isPreConfigured": true,
              "config": {
                "resource": "chat",
                "operation": "message",
                "modelId": "gpt-3.5-turbo",
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "onError": "continueRegularOutput",
                "retryOnFail": true,
                "maxTries": 3,
                "waitBetweenTries": 5000,
                "alwaysOutputData": true
              }
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "displayName": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times",
              "needsConfiguration": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "displayName": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "needsConfiguration": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "displayName": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "needsConfiguration": true
            }
          ]
        },
        "output": {
          "configuredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 2,
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "purpose": "Send an email notification",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000,
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "purpose": "Insert data into PostgreSQL table",
              "config": {
                "onError": "stopWorkflow",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 1000,
                "typeVersion": 2.4,
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*",
                  "schema": "public"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "purpose": "Send a message to an AI model and get response",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000,
                "typeVersion": 1,
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "parameters": {
                  "modelId": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times",
              "config": {
                "typeVersion": "1",
                "notes": "Triggers daily digest email generation for content moderation reports",
                "parameters": {
                  "notice": "",
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "config": {
                "typeVersion": "2.2",
                "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combineOperation": "any"
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "config": {
                "typeVersion": "2",
                "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "onReceived",
                  "responseData": "firstEntryJson",
                  "responseCode": 200
                }
              },
              "validated": true
            }
          ]
        },
        "transformations": [
          "Parameter Configuration",
          "Validation",
          "Type Checking"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "configuration",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "building",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:21.205Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
                  "timestamp": "2025-08-11T13:23:21.390Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.687Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:21.687Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.883Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T13:23:21.883Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.077Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T13:23:22.078Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.278Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email generation for content moderation reports",
                    "parameters": {
                      "notice": "",
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Schedule daily digest email generation at specific times",
                  "nodeType": "nodes-base.cron",
                  "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:22.278Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.572Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ],
                        "combineOperation": "any"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
                  "timestamp": "2025-08-11T13:23:22.573Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.764Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Receive real-time notifications when new social media posts are published",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
                  "timestamp": "2025-08-11T13:23:22.764Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:22.872Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "building": {
      "name": "Building",
      "success": true,
      "metrics": {
        "startTime": 1754918603145,
        "endTime": 1754918645743,
        "duration": 42598,
        "memoryUsage": {
          "heapUsed": -1098480,
          "heapTotal": 40304640,
          "external": 6829655
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T13:23:23.145Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting building phase"
        },
        {
          "timestamp": "2025-08-11T13:23:23.145Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for building phase"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.webhook (Social Media Post Webhook)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.code (Transform Post Data)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.openAi (AI Content Analysis)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.if (Content Decision Router)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.postgres (Store Analysis Results)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.cron (Daily Digest Schedule)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.postgres (Get Daily Statistics)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.603Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Added node: n8n-nodes-base.emailSend (Send Daily Digest)"
        },
        {
          "timestamp": "2025-08-11T13:24:05.604Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 8 nodes"
        },
        {
          "timestamp": "2025-08-11T13:24:05.604Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Created 6 connection groups"
        },
        {
          "timestamp": "2025-08-11T13:24:05.742Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T13:24:05.743Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [
        {
          "id": "webhook_1",
          "type": "n8n-nodes-base.webhook",
          "purpose": "Social Media Post Webhook"
        },
        {
          "id": "code_1",
          "type": "n8n-nodes-base.code",
          "purpose": "Transform Post Data"
        },
        {
          "id": "openAi_1",
          "type": "n8n-nodes-base.openAi",
          "purpose": "AI Content Analysis"
        },
        {
          "id": "if_1",
          "type": "n8n-nodes-base.if",
          "purpose": "Content Decision Router"
        },
        {
          "id": "postgres_1",
          "type": "n8n-nodes-base.postgres",
          "purpose": "Store Analysis Results"
        },
        {
          "id": "cron_1",
          "type": "n8n-nodes-base.cron",
          "purpose": "Daily Digest Schedule"
        },
        {
          "id": "postgres_2",
          "type": "n8n-nodes-base.postgres",
          "purpose": "Get Daily Statistics"
        },
        {
          "id": "emailSend_1",
          "type": "n8n-nodes-base.emailSend",
          "purpose": "Send Daily Digest"
        }
      ],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754918555640",
        "createdAt": "2025-08-11T13:22:36.092Z",
        "state": {
          "phase": "validation",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_4",
            "task_node_3",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Social Media Post Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "typeVersion": 1
              },
              {
                "id": "code_1",
                "name": "Transform Post Data",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "name": "AI Content Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "maxTokens": 200,
                  "operation": "message",
                  "temperature": 0.1
                },
                "typeVersion": 1
              },
              {
                "id": "if_1",
                "name": "Content Decision Router",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "leftValue": "",
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "combinator": "and",
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        },
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": 2
              },
              {
                "id": "postgres_1",
                "name": "Store Analysis Results",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "operation": "insert"
                },
                "typeVersion": 2
              },
              {
                "id": "cron_1",
                "name": "Daily Digest Schedule",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "name": "Get Daily Statistics",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                  "operation": "executeQuery"
                },
                "typeVersion": 2
              },
              {
                "id": "emailSend_1",
                "name": "Send Daily Digest",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                  "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                  "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "moderation@company.com"
                },
                "typeVersion": 2
              }
            ],
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1"
              ],
              "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1"
              ],
              "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
            },
            {
              "type": "trigger",
              "nodeIds": [
                "cron_1"
              ],
              "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "postgres_2"
              ],
              "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
            },
            {
              "type": "notification",
              "nodeIds": [
                "emailSend_1"
              ],
              "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.cron",
                "purpose": "Schedule daily digest email generation at specific times"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.if",
                "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.webhook",
                "purpose": "Receive real-time notifications when new social media posts are published"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:21.205Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
              "timestamp": "2025-08-11T13:23:21.390Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.687Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T13:23:21.687Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.883Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T13:23:21.883Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.077Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T13:23:22.078Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.278Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email generation for content moderation reports",
                "parameters": {
                  "notice": "",
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Schedule daily digest email generation at specific times",
              "nodeType": "nodes-base.cron",
              "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
              "timestamp": "2025-08-11T13:23:22.278Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.572Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ],
                    "combineOperation": "any"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
              "timestamp": "2025-08-11T13:23:22.573Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.764Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_3",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
              "timestamp": "2025-08-11T13:23:22.764Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.872Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:22.872Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T13:24:05.049Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "message",
                      "temperature": 0.1
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                      "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T13:24:05.328Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "configuredNodes": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "purpose": "Transform data structure using JavaScript",
              "config": {
                "typeVersion": 2,
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "purpose": "Send an email notification",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000,
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "purpose": "Insert data into PostgreSQL table",
              "config": {
                "onError": "stopWorkflow",
                "maxTries": 2,
                "retryOnFail": true,
                "waitBetweenTries": 1000,
                "typeVersion": 2.4,
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*",
                  "schema": "public"
                }
              },
              "validated": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "purpose": "Send a message to an AI model and get response",
              "config": {
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000,
                "typeVersion": 1,
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "parameters": {
                  "modelId": "gpt-4",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "options": {
                    "temperature": 0.1,
                    "maxTokens": 500
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times",
              "config": {
                "typeVersion": "1",
                "notes": "Triggers daily digest email generation for content moderation reports",
                "parameters": {
                  "notice": "",
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "config": {
                "typeVersion": "2.2",
                "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combineOperation": "any"
                  }
                }
              },
              "validated": true
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "config": {
                "typeVersion": "2",
                "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseMode": "onReceived",
                  "responseData": "firstEntryJson",
                  "responseCode": 200
                }
              },
              "validated": true
            }
          ]
        },
        "output": {
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "message",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "temperature": 0.1,
                  "maxTokens": 200
                },
                "name": "AI Content Analysis",
                "typeVersion": 1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Content Decision Router",
                "typeVersion": 2
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  }
                },
                "name": "Store Analysis Results",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "cron_1",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "executeQuery",
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;"
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                  "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                  "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>"
                },
                "name": "Send Daily Digest",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "transformations": [
          "Workflow Generation",
          "Connection Building",
          "Settings Configuration"
        ]
      },
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "name": "Social Media Content Moderation Workflow",
              "settings": {
                "executionOrder": "v1",
                "saveManualExecutions": true,
                "saveDataErrorExecution": "all",
                "saveDataSuccessExecution": "all"
              },
              "connections": {
                "AI Content Analysis": {
                  "main": [
                    [
                      {
                        "node": "Content Decision Router",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Transform Post Data": {
                  "main": [
                    [
                      {
                        "node": "AI Content Analysis",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Get Daily Statistics": {
                  "main": [
                    [
                      {
                        "node": "Send Daily Digest",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Daily Digest Schedule": {
                  "main": [
                    [
                      {
                        "node": "Get Daily Statistics",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Content Decision Router": {
                  "main": [
                    [
                      {
                        "node": "Store Analysis Results",
                        "type": "main",
                        "index": 0
                      }
                    ],
                    [
                      {
                        "node": "Store Analysis Results",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                },
                "Social Media Post Webhook": {
                  "main": [
                    [
                      {
                        "node": "Transform Post Data",
                        "type": "main",
                        "index": 0
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "building",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "nodes": [],
                "settings": {},
                "connections": {}
              },
              "buildPhases": [],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:21.205Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
                  "timestamp": "2025-08-11T13:23:21.390Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.687Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:21.687Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.883Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T13:23:21.883Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.077Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T13:23:22.078Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.278Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email generation for content moderation reports",
                    "parameters": {
                      "notice": "",
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Schedule daily digest email generation at specific times",
                  "nodeType": "nodes-base.cron",
                  "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:22.278Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.572Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ],
                        "combineOperation": "any"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
                  "timestamp": "2025-08-11T13:23:22.573Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.764Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Receive real-time notifications when new social media posts are published",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
                  "timestamp": "2025-08-11T13:23:22.764Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:22.872Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "validation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "message",
                      "temperature": 0.1
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                      "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:21.205Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
                  "timestamp": "2025-08-11T13:23:21.390Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.687Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:21.687Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.883Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T13:23:21.883Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.077Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T13:23:22.078Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.278Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email generation for content moderation reports",
                    "parameters": {
                      "notice": "",
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Schedule daily digest email generation at specific times",
                  "nodeType": "nodes-base.cron",
                  "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:22.278Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.572Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ],
                        "combineOperation": "any"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
                  "timestamp": "2025-08-11T13:23:22.573Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.764Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Receive real-time notifications when new social media posts are published",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
                  "timestamp": "2025-08-11T13:23:22.764Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.049Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "message",
                          "temperature": 0.1
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                          "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "cron_1"
                      ],
                      "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_2"
                      ],
                      "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                    }
                  ],
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.328Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "validation": {
      "name": "Validation",
      "success": true,
      "metrics": {
        "startTime": 1754918645743,
        "endTime": 1754918672599,
        "duration": 26856,
        "memoryUsage": {
          "heapUsed": -27248,
          "heapTotal": 37224448,
          "external": 6937055
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T13:24:05.743Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting validation phase"
        },
        {
          "timestamp": "2025-08-11T13:24:05.743Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for validation phase"
        },
        {
          "timestamp": "2025-08-11T13:24:05.746Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T13:24:05.746Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Social Media Content Moderation Workflow\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\"},\"name\":\"Social Media Post Webhook\",\"typeVersion\":1,\"onError\":\"stopWorkflow\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[550,300],\"parameters\":{\"jsCode\":\"// Transform social media post data for AI content analysis\\nconst items = $input.all();\\n\\nreturn items.map(item => {\\n  const postData = item.json;\\n  \\n  return {\\n    json: {\\n      postId: postData.id || postData.post_id,\\n      content: postData.text || postData.content || postData.message,\\n      author: postData.author || postData.username || postData.user,\\n      platform: postData.platform || 'unknown',\\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\\n      url: postData.url || postData.permalink,\\n      metadata: {\\n        likes: postData.likes || 0,\\n        shares: postData.shares || 0,\\n        comments: postData.comments || 0\\n      }\\n    }\\n  };\\n});\"},\"name\":\"Transform Post Data\",\"typeVersion\":2},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[850,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"message\",\"model\":\"gpt-3.5-turbo\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\\\"flagged\\\": boolean, \\\"score\\\": number (0-100), \\\"categories\\\": [\\\"category1\\\", \\\"category2\\\"], \\\"reason\\\": \\\"explanation\\\"}\"},{\"role\":\"user\",\"content\":\"Analyze this post: {{ $json.content }}\"}]},\"temperature\":0.1,\"maxTokens\":200},\"name\":\"AI Content Analysis\",\"typeVersion\":1,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"id\":\"flagged_content\",\"leftValue\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equal\"}}],\"combinator\":\"and\"}},\"name\":\"Content Decision Router\",\"typeVersion\":2},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,200],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $node['Transform Post Data'].json.postId }}\",\"content\":\"={{ $node['Transform Post Data'].json.content }}\",\"author\":\"={{ $node['Transform Post Data'].json.author }}\",\"platform\":\"={{ $node['Transform Post Data'].json.platform }}\",\"flagged\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}\",\"moderation_score\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}\",\"reason\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}}},\"name\":\"Store Analysis Results\",\"typeVersion\":2,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"cron_1\",\"type\":\"n8n-nodes-base.cron\",\"position\":[250,600],\"parameters\":{\"triggerTimes\":{\"item\":[{\"hour\":9,\"minute\":0}]}},\"name\":\"Daily Digest Schedule\",\"typeVersion\":1},{\"id\":\"postgres_2\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[550,600],\"parameters\":{\"operation\":\"executeQuery\",\"query\":\"SELECT \\n  COUNT(*) as total_posts,\\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\\n  AVG(moderation_score) as avg_score,\\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\\nFROM content_moderation \\nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\\nAND analyzed_at < CURRENT_DATE;\"},\"name\":\"Get Daily Statistics\",\"typeVersion\":2},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[850,600],\"parameters\":{\"fromEmail\":\"moderation@company.com\",\"toEmail\":\"moderators@company.com\",\"subject\":\"Daily Content Moderation Report - {{ new Date().toDateString() }}\",\"text\":\"Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: {{ $json.total_posts }}\\nFlagged Posts: {{ $json.flagged_posts }}\\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\\nCategories Detected: {{ $json.all_categories }}\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System\",\"html\":\"<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>\"},\"name\":\"Send Daily Digest\",\"typeVersion\":2,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Social Media Post Webhook\":{\"main\":[[{\"node\":\"Transform Post Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Post Data\":{\"main\":[[{\"node\":\"AI Content Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Content Analysis\":{\"main\":[[{\"node\":\"Content Decision Router\",\"type\":\"main\",\"index\":0}]]},\"Content Decision Router\":{\"main\":[[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}]]},\"Daily Digest Schedule\":{\"main\":[[{\"node\":\"Get Daily Statistics\",\"type\":\"main\",\"index\":0}]]},\"Get Daily Statistics\":{\"main\":[[{\"node\":\"Send Daily Digest\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T13:24:05.984Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:24:24.243Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T13:24:24.243Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Social Media Content Moderation Workflow\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\"},\"name\":\"Social Media Post Webhook\",\"typeVersion\":2,\"onError\":\"stopWorkflow\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[550,300],\"parameters\":{\"jsCode\":\"// Transform social media post data for AI content analysis\\nconst items = $input.all();\\n\\nreturn items.map(item => {\\n  const postData = item.json;\\n  \\n  return {\\n    json: {\\n      postId: postData.id || postData.post_id,\\n      content: postData.text || postData.content || postData.message,\\n      author: postData.author || postData.username || postData.user,\\n      platform: postData.platform || 'unknown',\\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\\n      url: postData.url || postData.permalink,\\n      metadata: {\\n        likes: postData.likes || 0,\\n        shares: postData.shares || 0,\\n        comments: postData.comments || 0\\n      }\\n    }\\n  };\\n});\"},\"name\":\"Transform Post Data\",\"typeVersion\":2},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[850,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"complete\",\"model\":\"gpt-3.5-turbo\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\\\"flagged\\\": boolean, \\\"score\\\": number (0-100), \\\"categories\\\": [\\\"category1\\\", \\\"category2\\\"], \\\"reason\\\": \\\"explanation\\\"}\"},{\"role\":\"user\",\"content\":\"Analyze this post: {{ $json.content }}\"}]},\"temperature\":0.1,\"maxTokens\":200},\"name\":\"AI Content Analysis\",\"typeVersion\":1.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"id\":\"flagged_content\",\"leftValue\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equal\"}}],\"combinator\":\"and\"}},\"name\":\"Content Decision Router\",\"typeVersion\":2.2},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,200],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $node['Transform Post Data'].json.postId }}\",\"content\":\"={{ $node['Transform Post Data'].json.content }}\",\"author\":\"={{ $node['Transform Post Data'].json.author }}\",\"platform\":\"={{ $node['Transform Post Data'].json.platform }}\",\"flagged\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}\",\"moderation_score\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}\",\"reason\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}}},\"name\":\"Store Analysis Results\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"cron_1\",\"type\":\"n8n-nodes-base.cron\",\"position\":[250,600],\"parameters\":{\"triggerTimes\":{\"item\":[{\"hour\":9,\"minute\":0}]}},\"name\":\"Daily Digest Schedule\",\"typeVersion\":1},{\"id\":\"postgres_2\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[550,600],\"parameters\":{\"operation\":\"executeQuery\",\"query\":\"SELECT \\n  COUNT(*) as total_posts,\\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\\n  AVG(moderation_score) as avg_score,\\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\\nFROM content_moderation \\nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\\nAND analyzed_at < CURRENT_DATE;\"},\"name\":\"Get Daily Statistics\",\"typeVersion\":2.6},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[850,600],\"parameters\":{\"fromEmail\":\"moderation@company.com\",\"toEmail\":\"moderators@company.com\",\"subject\":\"{{ `Daily Content Moderation Report - ${new Date().toDateString()}` }}\",\"text\":\"{{ `Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ${$json.total_posts}\\nFlagged Posts: ${$json.flagged_posts}\\nAverage Moderation Score: ${Math.round($json.avg_score * 100) / 100}\\nCategories Detected: ${$json.all_categories}\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System` }}\",\"html\":\"{{ `<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ${$json.total_posts}</p><p><strong>Flagged Posts:</strong> ${$json.flagged_posts}</p><p><strong>Average Moderation Score:</strong> ${Math.round($json.avg_score * 100) / 100}</p><p><strong>Categories Detected:</strong> ${$json.all_categories}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>` }}\"},\"name\":\"Send Daily Digest\",\"typeVersion\":2.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Social Media Post Webhook\":{\"main\":[[{\"node\":\"Transform Post Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Post Data\":{\"main\":[[{\"node\":\"AI Content Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Content Analysis\":{\"main\":[[{\"node\":\"Content Decision Router\",\"type\":\"main\",\"index\":0}]]},\"Content Decision Router\":{\"main\":[[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}]]},\"Daily Digest Schedule\":{\"main\":[[{\"node\":\"Get Daily Statistics\",\"type\":\"main\",\"index\":0}]]},\"Get Daily Statistics\":{\"main\":[[{\"node\":\"Send Daily Digest\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T13:24:24.436Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:24:31.438Z",
          "level": "INFO",
          "source": "MCP",
          "message": "Calling tool: validate_workflow"
        },
        {
          "timestamp": "2025-08-11T13:24:31.438Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Parameters: {\"workflow\":{\"name\":\"Social Media Content Moderation Workflow\",\"nodes\":[{\"id\":\"webhook_1\",\"type\":\"n8n-nodes-base.webhook\",\"position\":[250,300],\"parameters\":{\"path\":\"social-media-posts\",\"httpMethod\":\"POST\"},\"name\":\"Social Media Post Webhook\",\"typeVersion\":2,\"onError\":\"stopWorkflow\"},{\"id\":\"code_1\",\"type\":\"n8n-nodes-base.code\",\"position\":[550,300],\"parameters\":{\"jsCode\":\"// Transform social media post data for AI content analysis\\nconst items = $input.all();\\n\\nreturn items.map(item => {\\n  const postData = item.json;\\n  \\n  return {\\n    json: {\\n      postId: postData.id || postData.post_id,\\n      content: postData.text || postData.content || postData.message,\\n      author: postData.author || postData.username || postData.user,\\n      platform: postData.platform || 'unknown',\\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\\n      url: postData.url || postData.permalink,\\n      metadata: {\\n        likes: postData.likes || 0,\\n        shares: postData.shares || 0,\\n        comments: postData.comments || 0\\n      }\\n    }\\n  };\\n});\"},\"name\":\"Transform Post Data\",\"typeVersion\":2},{\"id\":\"openAi_1\",\"type\":\"n8n-nodes-base.openAi\",\"position\":[850,300],\"parameters\":{\"resource\":\"chat\",\"operation\":\"complete\",\"model\":\"gpt-3.5-turbo\",\"messages\":{\"values\":[{\"role\":\"system\",\"content\":\"You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\\\"flagged\\\": boolean, \\\"score\\\": number (0-100), \\\"categories\\\": [\\\"category1\\\", \\\"category2\\\"], \\\"reason\\\": \\\"explanation\\\"}\"},{\"role\":\"user\",\"content\":\"Analyze this post: {{ $json.content }}\"}]},\"temperature\":0.1,\"maxTokens\":200},\"name\":\"AI Content Analysis\",\"typeVersion\":1.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3},{\"id\":\"if_1\",\"type\":\"n8n-nodes-base.if\",\"position\":[1150,300],\"parameters\":{\"conditions\":{\"options\":{\"caseSensitive\":true,\"leftValue\":\"\",\"typeValidation\":\"strict\"},\"conditions\":[{\"id\":\"flagged_content\",\"leftValue\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}\",\"rightValue\":true,\"operator\":{\"type\":\"boolean\",\"operation\":\"equal\"}}],\"combinator\":\"and\"}},\"name\":\"Content Decision Router\",\"typeVersion\":2.2},{\"id\":\"postgres_1\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[1450,200],\"parameters\":{\"operation\":\"insert\",\"schema\":\"public\",\"table\":\"content_moderation\",\"columns\":{\"mappingMode\":\"defineBelow\",\"value\":{\"post_id\":\"={{ $node['Transform Post Data'].json.postId }}\",\"content\":\"={{ $node['Transform Post Data'].json.content }}\",\"author\":\"={{ $node['Transform Post Data'].json.author }}\",\"platform\":\"={{ $node['Transform Post Data'].json.platform }}\",\"flagged\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}\",\"moderation_score\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}\",\"categories\":\"={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}\",\"reason\":\"={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}\",\"analyzed_at\":\"={{ new Date().toISOString() }}\"}}},\"name\":\"Store Analysis Results\",\"typeVersion\":2.6,\"onError\":\"stopWorkflow\",\"maxTries\":2},{\"id\":\"cron_1\",\"type\":\"n8n-nodes-base.cron\",\"position\":[250,600],\"parameters\":{\"triggerTimes\":{\"item\":[{\"hour\":9,\"minute\":0}]}},\"name\":\"Daily Digest Schedule\",\"typeVersion\":1},{\"id\":\"postgres_2\",\"type\":\"n8n-nodes-base.postgres\",\"position\":[550,600],\"parameters\":{\"operation\":\"executeQuery\",\"query\":\"SELECT \\n  COUNT(*) as total_posts,\\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\\n  AVG(moderation_score) as avg_score,\\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\\nFROM content_moderation \\nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\\nAND analyzed_at < CURRENT_DATE;\"},\"name\":\"Get Daily Statistics\",\"typeVersion\":2.6},{\"id\":\"emailSend_1\",\"type\":\"n8n-nodes-base.emailSend\",\"position\":[850,600],\"parameters\":{\"fromEmail\":\"moderation@company.com\",\"toEmail\":\"moderators@company.com\",\"subject\":\"{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}\",\"text\":\"{{ 'Daily Content Moderation Summary\\\\n\\\\nTotal Posts Analyzed: ' + $json.total_posts + '\\\\nFlagged Posts: ' + $json.flagged_posts + '\\\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\\\nCategories Detected: ' + $json.all_categories + '\\\\n\\\\nPlease review flagged content in the moderation dashboard.\\\\n\\\\nBest regards,\\\\nContent Moderation System' }}\",\"html\":\"{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}\"},\"name\":\"Send Daily Digest\",\"typeVersion\":2.1,\"onError\":\"continueRegularOutput\",\"maxTries\":3}],\"connections\":{\"Social Media Post Webhook\":{\"main\":[[{\"node\":\"Transform Post Data\",\"type\":\"main\",\"index\":0}]]},\"Transform Post Data\":{\"main\":[[{\"node\":\"AI Content Analysis\",\"type\":\"main\",\"index\":0}]]},\"AI Content Analysis\":{\"main\":[[{\"node\":\"Content Decision Router\",\"type\":\"main\",\"index\":0}]]},\"Content Decision Router\":{\"main\":[[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}],[{\"node\":\"Store Analysis Results\",\"type\":\"main\",\"index\":0}]]},\"Daily Digest Schedule\":{\"main\":[[{\"node\":\"Get Daily Statistics\",\"type\":\"main\",\"index\":0}]]},\"Get Daily Statistics\":{\"main\":[[{\"node\":\"Send Daily Digest\",\"type\":\"main\",\"index\":0}]]}},\"settings\":{\"executionOrder\":\"v1\",\"saveDataSuccessExecution\":\"all\",\"saveDataErrorExecution\":\"all\",\"saveManualExecutions\":true}},\"options\":{\"validateNodes\":true,\"validateConnections\":true,\"validateExpressions\":true,\"profile\":\"runtime\"}}"
        },
        {
          "timestamp": "2025-08-11T13:24:31.650Z",
          "level": "DEBUG",
          "source": "MCP",
          "message": "Tool validate_workflow completed successfully"
        },
        {
          "timestamp": "2025-08-11T13:24:32.431Z",
          "level": "ERROR",
          "source": "Orchestrator",
          "message": "Error in validation: Error 1"
        },
        {
          "timestamp": "2025-08-11T13:24:32.431Z",
          "level": "ERROR",
          "source": "Orchestrator",
          "message": "Error in validation: Error 2"
        },
        {
          "timestamp": "2025-08-11T13:24:32.431Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Validation completed in 3 attempts"
        },
        {
          "timestamp": "2025-08-11T13:24:32.431Z",
          "level": "INFO",
          "source": "Tools",
          "message": "Applied 2 fixes"
        },
        {
          "timestamp": "2025-08-11T13:24:32.598Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T13:24:32.598Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754918555640",
        "createdAt": "2025-08-11T13:22:36.092Z",
        "state": {
          "phase": "documentation",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_4",
            "task_node_3",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Social Media Post Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Transform Post Data",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "name": "AI Content Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "maxTokens": 200,
                  "operation": "complete",
                  "temperature": 0.1
                },
                "typeVersion": 1.1
              },
              {
                "id": "if_1",
                "name": "Content Decision Router",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "leftValue": "",
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "combinator": "and",
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        },
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "postgres_1",
                "name": "Store Analysis Results",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "operation": "insert"
                },
                "typeVersion": 2.6
              },
              {
                "id": "cron_1",
                "name": "Daily Digest Schedule",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "name": "Get Daily Statistics",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                  "operation": "executeQuery"
                },
                "typeVersion": 2.6
              },
              {
                "id": "emailSend_1",
                "name": "Send Daily Digest",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                  "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "moderation@company.com"
                },
                "typeVersion": 2.1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1"
              ],
              "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1"
              ],
              "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
            },
            {
              "type": "trigger",
              "nodeIds": [
                "cron_1"
              ],
              "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "postgres_2"
              ],
              "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
            },
            {
              "type": "notification",
              "nodeIds": [
                "emailSend_1"
              ],
              "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.cron",
                "purpose": "Schedule daily digest email generation at specific times"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.if",
                "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.webhook",
                "purpose": "Receive real-time notifications when new social media posts are published"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:21.205Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
              "timestamp": "2025-08-11T13:23:21.390Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.687Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T13:23:21.687Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.883Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T13:23:21.883Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.077Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T13:23:22.078Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.278Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email generation for content moderation reports",
                "parameters": {
                  "notice": "",
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Schedule daily digest email generation at specific times",
              "nodeType": "nodes-base.cron",
              "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
              "timestamp": "2025-08-11T13:23:22.278Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.572Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ],
                    "combineOperation": "any"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
              "timestamp": "2025-08-11T13:23:22.573Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.764Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_3",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
              "timestamp": "2025-08-11T13:23:22.764Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.872Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:22.872Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T13:24:05.049Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "message",
                      "temperature": 0.1
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                      "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T13:24:31.653Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 2,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "cron_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "complete",
                      "temperature": 0.1
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                      "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T13:24:32.246Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 1,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "message",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "temperature": 0.1,
                  "maxTokens": 200
                },
                "name": "AI Content Analysis",
                "typeVersion": 1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Content Decision Router",
                "typeVersion": 2
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  }
                },
                "name": "Store Analysis Results",
                "typeVersion": 2,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "cron_1",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "executeQuery",
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;"
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                  "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                  "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>"
                },
                "name": "Send Daily Digest",
                "typeVersion": 2,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            }
          }
        },
        "output": {
          "validatedWorkflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "temperature": 0.1,
                  "maxTokens": 200
                },
                "name": "AI Content Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Content Decision Router",
                "typeVersion": 2.2
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  }
                },
                "name": "Store Analysis Results",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "cron_1",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "executeQuery",
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;"
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2.6
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                  "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}"
                },
                "name": "Send Daily Digest",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "report": {
            "initial": {
              "workflow": {
                "errors": [
                  {
                    "node": "AI Content Analysis",
                    "message": {
                      "type": "invalid_value",
                      "property": "operation",
                      "message": "Invalid value for 'operation'. Must be one of: complete",
                      "fix": "Change operation to one of the valid options"
                    }
                  },
                  {
                    "node": "Send Daily Digest",
                    "message": "Expression error: html: Nested expressions are not supported"
                  },
                  {
                    "node": "workflow",
                    "message": "Workflow validation failed: e.message.includes is not a function"
                  },
                  {
                    "node": "Social Media Post Webhook",
                    "message": "Outdated typeVersion: 1. Latest is 2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "AI Content Analysis",
                    "message": "Outdated typeVersion: 1. Latest is 1.1",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Content Decision Router",
                    "message": "Outdated typeVersion: 2. Latest is 2.2",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Outdated typeVersion: 2. Latest is 2.6",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Get Daily Statistics",
                    "message": "Outdated typeVersion: 2. Latest is 2.6",
                    "type": "typeVersion",
                    "severity": "error"
                  },
                  {
                    "node": "Send Daily Digest",
                    "message": "Outdated typeVersion: 2. Latest is 2.1",
                    "type": "typeVersion",
                    "severity": "error"
                  }
                ],
                "warnings": [
                  {
                    "node": "Content Decision Router",
                    "message": "Expression warning: conditions.conditions[0].leftValue: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.post_id: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.content: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.author: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.platform: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.flagged: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.moderation_score: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.categories: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.reason: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  },
                  {
                    "node": "Get Daily Statistics",
                    "message": "Database operation without error handling. Consider adding \"retryOnFail: true\" for connection issues or \"onError: 'continueRegularOutput'\" for non-critical queries."
                  }
                ],
                "valid": false,
                "statistics": {
                  "totalNodes": 8,
                  "enabledNodes": 8,
                  "triggerNodes": 1,
                  "validConnections": 7,
                  "invalidConnections": 0,
                  "expressionsValidated": 2,
                  "errorCount": 3,
                  "warningCount": 17
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "fixesApplied": [
              {
                "type": "entity-replacement",
                "attempt": 1,
                "timestamp": "2025-08-11T13:24:24.243Z",
                "description": "Replaced 6 nodes",
                "reasoning": [
                  "Fixed AI Content Analysis operation from 'message' to 'complete' as required by validation",
                  "Updated all typeVersions to their latest versions: Webhook (1→2), AI Content Analysis (1→1.1), Content Decision Router (2→2.2), Store Analysis Results (2→2.6), Get Daily Statistics (2→2.6), Send Daily Digest (2→2.1)",
                  "Fixed nested expression error in Send Daily Digest by converting multiple {{ }} expressions to single template literal format using backticks and ${} syntax",
                  "Converted subject field from multiple expressions to single template literal",
                  "Converted text field from multiple expressions to single template literal",
                  "Converted html field from multiple expressions to single template literal"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "openAi_1",
                    "emailSend_1",
                    "webhook_1",
                    "if_1",
                    "postgres_1",
                    "postgres_2"
                  ],
                  "connections": false
                }
              },
              {
                "type": "entity-replacement",
                "attempt": 2,
                "timestamp": "2025-08-11T13:24:31.438Z",
                "description": "Replaced 1 nodes",
                "reasoning": [
                  "Converted template literal expressions to string concatenation format as required by n8n",
                  "Changed subject field from template literal `${}` syntax to string concatenation with '+' operator",
                  "Changed text field from template literal to string concatenation, preserving newline characters as \\n",
                  "Changed html field from template literal to string concatenation, maintaining HTML structure",
                  "Preserved all mathematical operations like Math.round() within the concatenation expressions"
                ],
                "entitiesFixed": {
                  "nodes": [
                    "emailSend_1"
                  ],
                  "connections": false
                }
              }
            ],
            "final": {
              "workflow": {
                "errors": [],
                "warnings": [
                  {
                    "node": "Content Decision Router",
                    "message": "Expression warning: conditions.conditions[0].leftValue: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.post_id: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.content: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.author: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.platform: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.flagged: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.moderation_score: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.categories: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "Store Analysis Results",
                    "message": "Expression warning: columns.value.reason: Possible missing $ prefix for variable (e.g., use $json instead of json)"
                  },
                  {
                    "node": "workflow",
                    "message": "Consider adding error handling to your workflow"
                  },
                  {
                    "node": "Get Daily Statistics",
                    "message": "Database operation without error handling. Consider adding \"retryOnFail: true\" for connection issues or \"onError: 'continueRegularOutput'\" for non-critical queries."
                  }
                ],
                "valid": true,
                "statistics": {
                  "totalNodes": 8,
                  "enabledNodes": 8,
                  "triggerNodes": 1,
                  "validConnections": 7,
                  "invalidConnections": 0,
                  "expressionsValidated": 2,
                  "errorCount": 0,
                  "warningCount": 11
                }
              },
              "connections": {
                "errors": [],
                "warnings": []
              },
              "expressions": {
                "errors": [],
                "warnings": []
              }
            },
            "attempts": 3
          }
        },
        "transformations": [
          "Validation Check",
          "Error Detection",
          "Automatic Fixes"
        ]
      },
      "errors": [
        {
          "type": "ValidationError",
          "message": "Error 1",
          "resolution": "Applied automatic fix",
          "attemptNumber": 1
        },
        {
          "type": "ValidationError",
          "message": "Error 2",
          "resolution": "Applied automatic fix",
          "attemptNumber": 2
        }
      ],
      "stateDelta": {
        "added": {
          "state": {
            "workflow": {
              "valid": true
            }
          }
        },
        "modified": {
          "state": {
            "old": {
              "phase": "validation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "message",
                      "temperature": 0.1
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                      "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:21.205Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
                  "timestamp": "2025-08-11T13:23:21.390Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.687Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:21.687Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.883Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T13:23:21.883Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.077Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T13:23:22.078Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.278Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email generation for content moderation reports",
                    "parameters": {
                      "notice": "",
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Schedule daily digest email generation at specific times",
                  "nodeType": "nodes-base.cron",
                  "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:22.278Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.572Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ],
                        "combineOperation": "any"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
                  "timestamp": "2025-08-11T13:23:22.573Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.764Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Receive real-time notifications when new social media posts are published",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
                  "timestamp": "2025-08-11T13:23:22.764Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.049Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "message",
                          "temperature": 0.1
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                          "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "cron_1"
                      ],
                      "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_2"
                      ],
                      "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                    }
                  ],
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.328Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "documentation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "complete",
                      "temperature": 0.1
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                      "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:21.205Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
                  "timestamp": "2025-08-11T13:23:21.390Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.687Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:21.687Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.883Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T13:23:21.883Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.077Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T13:23:22.078Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.278Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email generation for content moderation reports",
                    "parameters": {
                      "notice": "",
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Schedule daily digest email generation at specific times",
                  "nodeType": "nodes-base.cron",
                  "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:22.278Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.572Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ],
                        "combineOperation": "any"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
                  "timestamp": "2025-08-11T13:23:22.573Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.764Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Receive real-time notifications when new social media posts are published",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
                  "timestamp": "2025-08-11T13:23:22.764Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.049Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "message",
                          "temperature": 0.1
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                          "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "cron_1"
                      ],
                      "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_2"
                      ],
                      "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                    }
                  ],
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T13:24:31.653Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "cron_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "complete",
                          "temperature": 0.1
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                          "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T13:24:32.246Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    },
    "documentation": {
      "name": "Documentation",
      "success": true,
      "metrics": {
        "startTime": 1754918672599,
        "endTime": 1754918673230,
        "duration": 631,
        "memoryUsage": {
          "heapUsed": 1849568,
          "heapTotal": 37896192,
          "external": 7684196
        }
      },
      "logs": [
        {
          "timestamp": "2025-08-11T13:24:32.599Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Starting documentation phase"
        },
        {
          "timestamp": "2025-08-11T13:24:32.599Z",
          "level": "DEBUG",
          "source": "Claude",
          "message": "Sending request for documentation phase"
        },
        {
          "timestamp": "2025-08-11T13:24:33.101Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Added 6 sticky notes for documentation"
        },
        {
          "timestamp": "2025-08-11T13:24:33.230Z",
          "level": "DEBUG",
          "source": "Orchestrator",
          "message": "Session state updated"
        },
        {
          "timestamp": "2025-08-11T13:24:33.230Z",
          "level": "INFO",
          "source": "Orchestrator",
          "message": "Data flow captured: 3 transformations"
        }
      ],
      "nodes": [],
      "sessionState": {
        "sessionId": "complete_e2e_user_test_1754918555640",
        "createdAt": "2025-08-11T13:22:36.092Z",
        "state": {
          "phase": "complete",
          "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
          "discovered": [
            {
              "id": "task_node_1",
              "type": "nodes-base.code",
              "config": {
                "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                "language": "javaScript"
              },
              "purpose": "Transform data structure using JavaScript",
              "displayName": "transform data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_4",
              "type": "nodes-base.emailSend",
              "config": {
                "text": "",
                "onError": "continueRegularOutput",
                "subject": "",
                "toEmail": "",
                "maxTries": 3,
                "fromEmail": "",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "purpose": "Send an email notification",
              "displayName": "send email",
              "isPreConfigured": true
            },
            {
              "id": "task_node_3",
              "type": "nodes-base.postgres",
              "config": {
                "table": "",
                "columns": "",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "operation": "insert",
                "retryOnFail": true,
                "returnFields": "*",
                "waitBetweenTries": 1000
              },
              "purpose": "Insert data into PostgreSQL table",
              "displayName": "insert postgres data",
              "isPreConfigured": true
            },
            {
              "id": "task_node_2",
              "type": "nodes-base.openAi",
              "config": {
                "modelId": "gpt-3.5-turbo",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "messages": {
                  "values": [
                    {
                      "role": "user",
                      "content": ""
                    }
                  ]
                },
                "resource": "chat",
                "operation": "message",
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "purpose": "Send a message to an AI model and get response",
              "displayName": "chat with ai",
              "isPreConfigured": true
            },
            {
              "id": "search_node_1",
              "type": "nodes-base.cron",
              "purpose": "Schedule daily digest email generation at specific times"
            },
            {
              "id": "search_node_2",
              "type": "nodes-base.if",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
            },
            {
              "id": "search_node_3",
              "type": "nodes-base.webhook",
              "purpose": "Receive real-time notifications when new social media posts are published"
            }
          ],
          "selected": [
            "task_node_1",
            "task_node_4",
            "task_node_3",
            "task_node_2",
            "search_node_1",
            "search_node_2",
            "search_node_3"
          ],
          "configured": {},
          "validated": {},
          "workflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "name": "Social Media Post Webhook",
                "type": "n8n-nodes-base.webhook",
                "onError": "stopWorkflow",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "typeVersion": 2
              },
              {
                "id": "code_1",
                "name": "Transform Post Data",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "name": "AI Content Analysis",
                "type": "n8n-nodes-base.openAi",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "maxTokens": 200,
                  "operation": "complete",
                  "temperature": 0.1
                },
                "typeVersion": 1.1
              },
              {
                "id": "if_1",
                "name": "Content Decision Router",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "leftValue": "",
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "combinator": "and",
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        },
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true
                      }
                    ]
                  }
                },
                "typeVersion": 2.2
              },
              {
                "id": "postgres_1",
                "name": "Store Analysis Results",
                "type": "n8n-nodes-base.postgres",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "table": "content_moderation",
                  "schema": "public",
                  "columns": {
                    "value": {
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "analyzed_at": "={{ new Date().toISOString() }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                    },
                    "mappingMode": "defineBelow"
                  },
                  "operation": "insert"
                },
                "typeVersion": 2.6
              },
              {
                "id": "cron_1",
                "name": "Daily Digest Schedule",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "name": "Get Daily Statistics",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                  "operation": "executeQuery"
                },
                "typeVersion": 2.6
              },
              {
                "id": "emailSend_1",
                "name": "Send Daily Digest",
                "type": "n8n-nodes-base.emailSend",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                  "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "moderation@company.com"
                },
                "typeVersion": 2.1
              },
              {
                "id": "sticky_promo_1754918672681",
                "name": "Ghost Team Promo",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  100,
                  -130
                ],
                "parameters": {
                  "color": 4,
                  "width": 280,
                  "height": 910,
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_triggers_1754918672681",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  170,
                  -130
                ],
                "parameters": {
                  "color": 6,
                  "width": 310,
                  "height": 910,
                  "content": "## 📥 Triggers\nReceives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published.\n\nScheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_inputs_1754918672681",
                "name": "Inputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "color": 5,
                  "width": 310,
                  "height": 910,
                  "content": "## 📊 Inputs\nRetrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_transforms_1754918672681",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "color": 4,
                  "width": 610,
                  "height": 910,
                  "content": "## ⚙️ Transform\nTransforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis.\n\nPerforms AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_decision_1754918672681",
                "name": "Decision Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  1070,
                  -130
                ],
                "parameters": {
                  "color": 3,
                  "width": 310,
                  "height": 910,
                  "content": "## 🔀 Decision\nRoutes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                "typeVersion": 1
              },
              {
                "id": "sticky_outputs_1754918672681",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "position": [
                  770,
                  -130
                ],
                "parameters": {
                  "color": 7,
                  "width": 910,
                  "height": 910,
                  "content": "## 🚀 Outputs\nStores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions.\n\nSends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                },
                "typeVersion": 1
              }
            ],
            "valid": true,
            "settings": {
              "executionOrder": "v1",
              "saveManualExecutions": true,
              "saveDataErrorExecution": "all",
              "saveDataSuccessExecution": "all"
            },
            "connections": {
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            }
          },
          "buildPhases": [
            {
              "type": "trigger",
              "nodeIds": [
                "webhook_1"
              ],
              "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "code_1"
              ],
              "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
            },
            {
              "type": "data_processing",
              "nodeIds": [
                "openAi_1"
              ],
              "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
            },
            {
              "type": "decision",
              "nodeIds": [
                "if_1"
              ],
              "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
            },
            {
              "type": "storage",
              "nodeIds": [
                "postgres_1"
              ],
              "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
            },
            {
              "type": "trigger",
              "nodeIds": [
                "cron_1"
              ],
              "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
            },
            {
              "type": "data_collection",
              "nodeIds": [
                "postgres_2"
              ],
              "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
            },
            {
              "type": "notification",
              "nodeIds": [
                "emailSend_1"
              ],
              "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
            }
          ],
          "operationHistory": [
            {
              "node": {
                "id": "task_node_1",
                "type": "nodes-base.code",
                "config": {
                  "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "purpose": "Transform data structure using JavaScript",
                "displayName": "transform data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_4",
                "type": "nodes-base.emailSend",
                "config": {
                  "text": "",
                  "onError": "continueRegularOutput",
                  "subject": "",
                  "toEmail": "",
                  "maxTries": 3,
                  "fromEmail": "",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 3000
                },
                "purpose": "Send an email notification",
                "displayName": "send email",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_4",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_3",
                "type": "nodes-base.postgres",
                "config": {
                  "table": "",
                  "columns": "",
                  "onError": "stopWorkflow",
                  "maxTries": 2,
                  "operation": "insert",
                  "retryOnFail": true,
                  "returnFields": "*",
                  "waitBetweenTries": 1000
                },
                "purpose": "Insert data into PostgreSQL table",
                "displayName": "insert postgres data",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_3",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "task_node_2",
                "type": "nodes-base.openAi",
                "config": {
                  "modelId": "gpt-3.5-turbo",
                  "onError": "continueRegularOutput",
                  "maxTries": 3,
                  "messages": {
                    "values": [
                      {
                        "role": "user",
                        "content": ""
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message",
                  "retryOnFail": true,
                  "alwaysOutputData": true,
                  "waitBetweenTries": 5000
                },
                "purpose": "Send a message to an AI model and get response",
                "displayName": "chat with ai",
                "isPreConfigured": true
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "task_node_2",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_1",
                "type": "nodes-base.cron",
                "purpose": "Schedule daily digest email generation at specific times"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_1",
              "timestamp": "2025-08-11T13:22:58.233Z"
            },
            {
              "node": {
                "id": "search_node_2",
                "type": "nodes-base.if",
                "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_2",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "node": {
                "id": "search_node_3",
                "type": "nodes-base.webhook",
                "purpose": "Receive real-time notifications when new social media posts are published"
              },
              "type": "discoverNode",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "selectNode",
              "nodeId": "search_node_3",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "completePhase",
              "phase": "discovery",
              "timestamp": "2025-08-11T13:22:58.494Z"
            },
            {
              "type": "setPhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:21.205Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                "parameters": {
                  "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                  "language": "javaScript"
                },
                "typeVersion": 2
              },
              "nodeId": "task_node_1",
              "purpose": "Transform data structure using JavaScript",
              "nodeType": "nodes-base.code",
              "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
              "timestamp": "2025-08-11T13:23:21.390Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.687Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                  "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                  "toEmail": "moderators@company.com",
                  "fromEmail": "content-moderation@company.com"
                },
                "retryOnFail": true,
                "alwaysOutputData": true,
                "waitBetweenTries": 3000
              },
              "nodeId": "task_node_4",
              "purpose": "Send an email notification",
              "nodeType": "nodes-base.emailSend",
              "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
              "timestamp": "2025-08-11T13:23:21.687Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_4",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:21.883Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                "onError": "stopWorkflow",
                "maxTries": 2,
                "parameters": {
                  "table": "content_moderation",
                  "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                  "operation": "insert",
                  "returnFields": "*"
                },
                "retryOnFail": true,
                "typeVersion": 2.4,
                "waitBetweenTries": 1000
              },
              "nodeId": "task_node_3",
              "purpose": "Insert data into PostgreSQL table",
              "nodeType": "nodes-base.postgres",
              "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
              "timestamp": "2025-08-11T13:23:21.883Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.077Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                "onError": "continueRegularOutput",
                "maxTries": 3,
                "parameters": {
                  "modelId": "gpt-4",
                  "options": {
                    "maxTokens": 500,
                    "temperature": 0.1
                  },
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                      }
                    ]
                  },
                  "resource": "chat",
                  "operation": "message"
                },
                "retryOnFail": true,
                "typeVersion": 1,
                "alwaysOutputData": true,
                "waitBetweenTries": 5000
              },
              "nodeId": "task_node_2",
              "purpose": "Send a message to an AI model and get response",
              "nodeType": "nodes-base.openAi",
              "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
              "timestamp": "2025-08-11T13:23:22.078Z",
              "operationIndex": 0,
              "customizedFromTemplate": true
            },
            {
              "type": "validateNode",
              "nodeId": "task_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.278Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Triggers daily digest email generation for content moderation reports",
                "parameters": {
                  "notice": "",
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "typeVersion": "1"
              },
              "nodeId": "search_node_1",
              "purpose": "Schedule daily digest email generation at specific times",
              "nodeType": "nodes-base.cron",
              "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
              "timestamp": "2025-08-11T13:23:22.278Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.572Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                "parameters": {
                  "conditions": {
                    "conditions": [
                      {
                        "id": "1",
                        "operator": {
                          "type": "boolean",
                          "operation": "equals"
                        },
                        "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                        "rightValue": true
                      }
                    ],
                    "combineOperation": "any"
                  }
                },
                "typeVersion": "2.2"
              },
              "nodeId": "search_node_2",
              "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
              "nodeType": "nodes-base.if",
              "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
              "timestamp": "2025-08-11T13:23:22.573Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.764Z"
            },
            {
              "type": "configureNode",
              "config": {
                "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST",
                  "responseCode": 200,
                  "responseData": "firstEntryJson",
                  "responseMode": "onReceived"
                },
                "typeVersion": "2"
              },
              "nodeId": "search_node_3",
              "purpose": "Receive real-time notifications when new social media posts are published",
              "nodeType": "nodes-base.webhook",
              "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
              "timestamp": "2025-08-11T13:23:22.764Z",
              "operationIndex": 0
            },
            {
              "type": "validateNode",
              "nodeId": "search_node_3",
              "result": {
                "valid": true,
                "errors": []
              },
              "timestamp": "2025-08-11T13:23:22.872Z"
            },
            {
              "type": "completePhase",
              "phase": "configuration",
              "timestamp": "2025-08-11T13:23:22.872Z"
            },
            {
              "type": "setPhase",
              "phase": "building",
              "timestamp": "2025-08-11T13:24:05.049Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "message",
                      "temperature": 0.1
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                      "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                      "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2
                  }
                ],
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "setBuildPhases",
              "phases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "completePhase",
              "phase": "building",
              "timestamp": "2025-08-11T13:24:05.328Z"
            },
            {
              "type": "setPhase",
              "phase": "validation",
              "timestamp": "2025-08-11T13:24:31.653Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 1,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.909Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": false,
                "errors": [
                  "Node replaced entirely"
                ]
              },
              "attempt": 2,
              "reasoning": "Node replaced to fix validation errors",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "webhook_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "code_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "openAi_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:31.910Z"
            },
            {
              "type": "validateNode",
              "nodeId": "if_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "cron_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "postgres_2",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "validateNode",
              "nodeId": "emailSend_1",
              "result": {
                "valid": true,
                "errors": []
              },
              "attempt": 3,
              "reasoning": "Node passed all validation checks",
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "complete",
                      "temperature": 0.1
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                      "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T13:24:32.245Z"
            },
            {
              "type": "completePhase",
              "phase": "validation",
              "timestamp": "2025-08-11T13:24:32.246Z"
            },
            {
              "type": "setPhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T13:24:32.681Z"
            },
            {
              "type": "setWorkflow",
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "complete",
                      "temperature": 0.1
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                      "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  },
                  {
                    "id": "sticky_promo_1754918672681",
                    "name": "Ghost Team Promo",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      100,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 910,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_triggers_1754918672681",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      170,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 910,
                      "content": "## 📥 Triggers\nReceives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published.\n\nScheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1754918672681",
                    "name": "Inputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 910,
                      "content": "## 📊 Inputs\nRetrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754918672681",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 610,
                      "height": 910,
                      "content": "## ⚙️ Transform\nTransforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis.\n\nPerforms AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1754918672681",
                    "name": "Decision Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1070,
                      -130
                    ],
                    "parameters": {
                      "color": 3,
                      "width": 310,
                      "height": 910,
                      "content": "## 🔀 Decision\nRoutes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754918672681",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      770,
                      -130
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 910,
                      "height": 910,
                      "content": "## 🚀 Outputs\nStores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions.\n\nSends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "timestamp": "2025-08-11T13:24:32.883Z"
            },
            {
              "type": "completePhase",
              "phase": "documentation",
              "timestamp": "2025-08-11T13:24:32.883Z"
            }
          ],
          "pendingClarifications": [],
          "clarificationHistory": []
        }
      },
      "stateChanges": {},
      "dataFlow": {
        "input": {
          "validatedWorkflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "temperature": 0.1,
                  "maxTokens": 200
                },
                "name": "AI Content Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Content Decision Router",
                "typeVersion": 2.2
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  }
                },
                "name": "Store Analysis Results",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "cron_1",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "executeQuery",
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;"
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2.6
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                  "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}"
                },
                "name": "Send Daily Digest",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          }
        },
        "output": {
          "documentedWorkflow": {
            "name": "Social Media Content Moderation Workflow",
            "nodes": [
              {
                "id": "webhook_1",
                "type": "n8n-nodes-base.webhook",
                "position": [
                  250,
                  300
                ],
                "parameters": {
                  "path": "social-media-posts",
                  "httpMethod": "POST"
                },
                "name": "Social Media Post Webhook",
                "typeVersion": 2,
                "onError": "stopWorkflow"
              },
              {
                "id": "code_1",
                "type": "n8n-nodes-base.code",
                "position": [
                  550,
                  300
                ],
                "parameters": {
                  "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                },
                "name": "Transform Post Data",
                "typeVersion": 2
              },
              {
                "id": "openAi_1",
                "type": "n8n-nodes-base.openAi",
                "position": [
                  850,
                  300
                ],
                "parameters": {
                  "resource": "chat",
                  "operation": "complete",
                  "model": "gpt-3.5-turbo",
                  "messages": {
                    "values": [
                      {
                        "role": "system",
                        "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                      },
                      {
                        "role": "user",
                        "content": "Analyze this post: {{ $json.content }}"
                      }
                    ]
                  },
                  "temperature": 0.1,
                  "maxTokens": 200
                },
                "name": "AI Content Analysis",
                "typeVersion": 1.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "if_1",
                "type": "n8n-nodes-base.if",
                "position": [
                  1150,
                  300
                ],
                "parameters": {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "id": "flagged_content",
                        "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                        "rightValue": true,
                        "operator": {
                          "type": "boolean",
                          "operation": "equal"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                "name": "Content Decision Router",
                "typeVersion": 2.2
              },
              {
                "id": "postgres_1",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  1450,
                  200
                ],
                "parameters": {
                  "operation": "insert",
                  "schema": "public",
                  "table": "content_moderation",
                  "columns": {
                    "mappingMode": "defineBelow",
                    "value": {
                      "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                      "content": "={{ $node['Transform Post Data'].json.content }}",
                      "author": "={{ $node['Transform Post Data'].json.author }}",
                      "platform": "={{ $node['Transform Post Data'].json.platform }}",
                      "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                      "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}",
                      "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                      "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                      "analyzed_at": "={{ new Date().toISOString() }}"
                    }
                  }
                },
                "name": "Store Analysis Results",
                "typeVersion": 2.6,
                "onError": "stopWorkflow",
                "maxTries": 2
              },
              {
                "id": "cron_1",
                "type": "n8n-nodes-base.cron",
                "position": [
                  250,
                  600
                ],
                "parameters": {
                  "triggerTimes": {
                    "item": [
                      {
                        "hour": 9,
                        "minute": 0
                      }
                    ]
                  }
                },
                "name": "Daily Digest Schedule",
                "typeVersion": 1
              },
              {
                "id": "postgres_2",
                "type": "n8n-nodes-base.postgres",
                "position": [
                  550,
                  600
                ],
                "parameters": {
                  "operation": "executeQuery",
                  "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;"
                },
                "name": "Get Daily Statistics",
                "typeVersion": 2.6
              },
              {
                "id": "emailSend_1",
                "type": "n8n-nodes-base.emailSend",
                "position": [
                  850,
                  600
                ],
                "parameters": {
                  "fromEmail": "moderation@company.com",
                  "toEmail": "moderators@company.com",
                  "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                  "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                  "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}"
                },
                "name": "Send Daily Digest",
                "typeVersion": 2.1,
                "onError": "continueRegularOutput",
                "maxTries": 3
              },
              {
                "id": "sticky_promo_1754918672681",
                "name": "Ghost Team Promo",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  100,
                  -130
                ],
                "parameters": {
                  "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team.",
                  "height": 910,
                  "width": 280,
                  "color": 4
                }
              },
              {
                "id": "sticky_triggers_1754918672681",
                "name": "Triggers Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  170,
                  -130
                ],
                "parameters": {
                  "content": "## 📥 Triggers\nReceives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published.\n\nScheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight.",
                  "height": 910,
                  "width": 310,
                  "color": 6
                }
              },
              {
                "id": "sticky_inputs_1754918672681",
                "name": "Inputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "content": "## 📊 Inputs\nRetrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting.",
                  "height": 910,
                  "width": 310,
                  "color": 5
                }
              },
              {
                "id": "sticky_transforms_1754918672681",
                "name": "Transform Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  470,
                  -130
                ],
                "parameters": {
                  "content": "## ⚙️ Transform\nTransforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis.\n\nPerforms AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization.",
                  "height": 910,
                  "width": 610,
                  "color": 4
                }
              },
              {
                "id": "sticky_decision_1754918672681",
                "name": "Decision Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  1070,
                  -130
                ],
                "parameters": {
                  "content": "## 🔀 Decision\nRoutes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags.",
                  "height": 910,
                  "width": 310,
                  "color": 3
                }
              },
              {
                "id": "sticky_outputs_1754918672681",
                "name": "Outputs Notes",
                "type": "n8n-nodes-base.stickyNote",
                "typeVersion": 1,
                "position": [
                  770,
                  -130
                ],
                "parameters": {
                  "content": "## 🚀 Outputs\nStores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions.\n\nSends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review.",
                  "height": 910,
                  "width": 910,
                  "color": 7
                }
              }
            ],
            "connections": {
              "Social Media Post Webhook": {
                "main": [
                  [
                    {
                      "node": "Transform Post Data",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Transform Post Data": {
                "main": [
                  [
                    {
                      "node": "AI Content Analysis",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "AI Content Analysis": {
                "main": [
                  [
                    {
                      "node": "Content Decision Router",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Content Decision Router": {
                "main": [
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ],
                  [
                    {
                      "node": "Store Analysis Results",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Daily Digest Schedule": {
                "main": [
                  [
                    {
                      "node": "Get Daily Statistics",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              },
              "Get Daily Statistics": {
                "main": [
                  [
                    {
                      "node": "Send Daily Digest",
                      "type": "main",
                      "index": 0
                    }
                  ]
                ]
              }
            },
            "settings": {
              "executionOrder": "v1",
              "saveDataSuccessExecution": "all",
              "saveDataErrorExecution": "all",
              "saveManualExecutions": true
            },
            "valid": true
          },
          "stickyNotesAdded": 6
        },
        "transformations": [
          "Documentation Generation",
          "Sticky Note Placement",
          "Workflow Finalization"
        ]
      },
      "stateDelta": {
        "added": {},
        "modified": {
          "state": {
            "old": {
              "phase": "documentation",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "complete",
                      "temperature": 0.1
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                      "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:21.205Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
                  "timestamp": "2025-08-11T13:23:21.390Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.687Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:21.687Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.883Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T13:23:21.883Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.077Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T13:23:22.078Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.278Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email generation for content moderation reports",
                    "parameters": {
                      "notice": "",
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Schedule daily digest email generation at specific times",
                  "nodeType": "nodes-base.cron",
                  "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:22.278Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.572Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ],
                        "combineOperation": "any"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
                  "timestamp": "2025-08-11T13:23:22.573Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.764Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Receive real-time notifications when new social media posts are published",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
                  "timestamp": "2025-08-11T13:23:22.764Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.049Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "message",
                          "temperature": 0.1
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                          "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "cron_1"
                      ],
                      "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_2"
                      ],
                      "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                    }
                  ],
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T13:24:31.653Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "cron_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "complete",
                          "temperature": 0.1
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                          "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T13:24:32.246Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            },
            "new": {
              "phase": "complete",
              "userPrompt": "Design a workflow triggered by new social media posts that uses AI to analyze content for inappropriate material, automatically flags suspicious content, generates summary reports, stores results in a database, and sends daily digest emails to moderators with statistics and flagged items",
              "discovered": [
                {
                  "id": "task_node_1",
                  "type": "nodes-base.code",
                  "config": {
                    "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                    "language": "javaScript"
                  },
                  "purpose": "Transform data structure using JavaScript",
                  "displayName": "transform data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_4",
                  "type": "nodes-base.emailSend",
                  "config": {
                    "text": "",
                    "onError": "continueRegularOutput",
                    "subject": "",
                    "toEmail": "",
                    "maxTries": 3,
                    "fromEmail": "",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "purpose": "Send an email notification",
                  "displayName": "send email",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_3",
                  "type": "nodes-base.postgres",
                  "config": {
                    "table": "",
                    "columns": "",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "operation": "insert",
                    "retryOnFail": true,
                    "returnFields": "*",
                    "waitBetweenTries": 1000
                  },
                  "purpose": "Insert data into PostgreSQL table",
                  "displayName": "insert postgres data",
                  "isPreConfigured": true
                },
                {
                  "id": "task_node_2",
                  "type": "nodes-base.openAi",
                  "config": {
                    "modelId": "gpt-3.5-turbo",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "messages": {
                      "values": [
                        {
                          "role": "user",
                          "content": ""
                        }
                      ]
                    },
                    "resource": "chat",
                    "operation": "message",
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "purpose": "Send a message to an AI model and get response",
                  "displayName": "chat with ai",
                  "isPreConfigured": true
                },
                {
                  "id": "search_node_1",
                  "type": "nodes-base.cron",
                  "purpose": "Schedule daily digest email generation at specific times"
                },
                {
                  "id": "search_node_2",
                  "type": "nodes-base.if",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                },
                {
                  "id": "search_node_3",
                  "type": "nodes-base.webhook",
                  "purpose": "Receive real-time notifications when new social media posts are published"
                }
              ],
              "selected": [
                "task_node_1",
                "task_node_4",
                "task_node_3",
                "task_node_2",
                "search_node_1",
                "search_node_2",
                "search_node_3"
              ],
              "configured": {},
              "validated": {},
              "workflow": {
                "name": "Social Media Content Moderation Workflow",
                "nodes": [
                  {
                    "id": "webhook_1",
                    "name": "Social Media Post Webhook",
                    "type": "n8n-nodes-base.webhook",
                    "onError": "stopWorkflow",
                    "position": [
                      250,
                      300
                    ],
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "code_1",
                    "name": "Transform Post Data",
                    "type": "n8n-nodes-base.code",
                    "position": [
                      550,
                      300
                    ],
                    "parameters": {
                      "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                    },
                    "typeVersion": 2
                  },
                  {
                    "id": "openAi_1",
                    "name": "AI Content Analysis",
                    "type": "n8n-nodes-base.openAi",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      300
                    ],
                    "parameters": {
                      "model": "gpt-3.5-turbo",
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Analyze this post: {{ $json.content }}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "maxTokens": 200,
                      "operation": "complete",
                      "temperature": 0.1
                    },
                    "typeVersion": 1.1
                  },
                  {
                    "id": "if_1",
                    "name": "Content Decision Router",
                    "type": "n8n-nodes-base.if",
                    "position": [
                      1150,
                      300
                    ],
                    "parameters": {
                      "conditions": {
                        "options": {
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "flagged_content",
                            "operator": {
                              "type": "boolean",
                              "operation": "equal"
                            },
                            "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                            "rightValue": true
                          }
                        ]
                      }
                    },
                    "typeVersion": 2.2
                  },
                  {
                    "id": "postgres_1",
                    "name": "Store Analysis Results",
                    "type": "n8n-nodes-base.postgres",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "position": [
                      1450,
                      200
                    ],
                    "parameters": {
                      "table": "content_moderation",
                      "schema": "public",
                      "columns": {
                        "value": {
                          "author": "={{ $node['Transform Post Data'].json.author }}",
                          "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                          "content": "={{ $node['Transform Post Data'].json.content }}",
                          "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                          "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                          "platform": "={{ $node['Transform Post Data'].json.platform }}",
                          "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                          "analyzed_at": "={{ new Date().toISOString() }}",
                          "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                        },
                        "mappingMode": "defineBelow"
                      },
                      "operation": "insert"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "cron_1",
                    "name": "Daily Digest Schedule",
                    "type": "n8n-nodes-base.cron",
                    "position": [
                      250,
                      600
                    ],
                    "parameters": {
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "postgres_2",
                    "name": "Get Daily Statistics",
                    "type": "n8n-nodes-base.postgres",
                    "position": [
                      550,
                      600
                    ],
                    "parameters": {
                      "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                      "operation": "executeQuery"
                    },
                    "typeVersion": 2.6
                  },
                  {
                    "id": "emailSend_1",
                    "name": "Send Daily Digest",
                    "type": "n8n-nodes-base.emailSend",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "position": [
                      850,
                      600
                    ],
                    "parameters": {
                      "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                      "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                      "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "moderation@company.com"
                    },
                    "typeVersion": 2.1
                  },
                  {
                    "id": "sticky_promo_1754918672681",
                    "name": "Ghost Team Promo",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      100,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 280,
                      "height": 910,
                      "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_triggers_1754918672681",
                    "name": "Triggers Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      170,
                      -130
                    ],
                    "parameters": {
                      "color": 6,
                      "width": 310,
                      "height": 910,
                      "content": "## 📥 Triggers\nReceives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published.\n\nScheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_inputs_1754918672681",
                    "name": "Inputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 5,
                      "width": 310,
                      "height": 910,
                      "content": "## 📊 Inputs\nRetrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_transforms_1754918672681",
                    "name": "Transform Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      470,
                      -130
                    ],
                    "parameters": {
                      "color": 4,
                      "width": 610,
                      "height": 910,
                      "content": "## ⚙️ Transform\nTransforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis.\n\nPerforms AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_decision_1754918672681",
                    "name": "Decision Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      1070,
                      -130
                    ],
                    "parameters": {
                      "color": 3,
                      "width": 310,
                      "height": 910,
                      "content": "## 🔀 Decision\nRoutes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                    },
                    "typeVersion": 1
                  },
                  {
                    "id": "sticky_outputs_1754918672681",
                    "name": "Outputs Notes",
                    "type": "n8n-nodes-base.stickyNote",
                    "position": [
                      770,
                      -130
                    ],
                    "parameters": {
                      "color": 7,
                      "width": 910,
                      "height": 910,
                      "content": "## 🚀 Outputs\nStores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions.\n\nSends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                    },
                    "typeVersion": 1
                  }
                ],
                "valid": true,
                "settings": {
                  "executionOrder": "v1",
                  "saveManualExecutions": true,
                  "saveDataErrorExecution": "all",
                  "saveDataSuccessExecution": "all"
                },
                "connections": {
                  "AI Content Analysis": {
                    "main": [
                      [
                        {
                          "node": "Content Decision Router",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Transform Post Data": {
                    "main": [
                      [
                        {
                          "node": "AI Content Analysis",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Get Daily Statistics": {
                    "main": [
                      [
                        {
                          "node": "Send Daily Digest",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Daily Digest Schedule": {
                    "main": [
                      [
                        {
                          "node": "Get Daily Statistics",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Content Decision Router": {
                    "main": [
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ],
                      [
                        {
                          "node": "Store Analysis Results",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  },
                  "Social Media Post Webhook": {
                    "main": [
                      [
                        {
                          "node": "Transform Post Data",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    ]
                  }
                }
              },
              "buildPhases": [
                {
                  "type": "trigger",
                  "nodeIds": [
                    "webhook_1"
                  ],
                  "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "code_1"
                  ],
                  "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                },
                {
                  "type": "data_processing",
                  "nodeIds": [
                    "openAi_1"
                  ],
                  "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                },
                {
                  "type": "decision",
                  "nodeIds": [
                    "if_1"
                  ],
                  "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                },
                {
                  "type": "storage",
                  "nodeIds": [
                    "postgres_1"
                  ],
                  "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                },
                {
                  "type": "trigger",
                  "nodeIds": [
                    "cron_1"
                  ],
                  "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                },
                {
                  "type": "data_collection",
                  "nodeIds": [
                    "postgres_2"
                  ],
                  "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                },
                {
                  "type": "notification",
                  "nodeIds": [
                    "emailSend_1"
                  ],
                  "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                }
              ],
              "operationHistory": [
                {
                  "node": {
                    "id": "task_node_1",
                    "type": "nodes-base.code",
                    "config": {
                      "jsCode": "// Transform each item\nconst results = [];\n\nfor (const item of items) {\n  results.push({\n    json: {\n      // Transform your data here\n      id: item.json.id,\n      processedAt: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "purpose": "Transform data structure using JavaScript",
                    "displayName": "transform data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_4",
                    "type": "nodes-base.emailSend",
                    "config": {
                      "text": "",
                      "onError": "continueRegularOutput",
                      "subject": "",
                      "toEmail": "",
                      "maxTries": 3,
                      "fromEmail": "",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 3000
                    },
                    "purpose": "Send an email notification",
                    "displayName": "send email",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_4",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_3",
                    "type": "nodes-base.postgres",
                    "config": {
                      "table": "",
                      "columns": "",
                      "onError": "stopWorkflow",
                      "maxTries": 2,
                      "operation": "insert",
                      "retryOnFail": true,
                      "returnFields": "*",
                      "waitBetweenTries": 1000
                    },
                    "purpose": "Insert data into PostgreSQL table",
                    "displayName": "insert postgres data",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_3",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "task_node_2",
                    "type": "nodes-base.openAi",
                    "config": {
                      "modelId": "gpt-3.5-turbo",
                      "onError": "continueRegularOutput",
                      "maxTries": 3,
                      "messages": {
                        "values": [
                          {
                            "role": "user",
                            "content": ""
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message",
                      "retryOnFail": true,
                      "alwaysOutputData": true,
                      "waitBetweenTries": 5000
                    },
                    "purpose": "Send a message to an AI model and get response",
                    "displayName": "chat with ai",
                    "isPreConfigured": true
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "task_node_2",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_1",
                    "type": "nodes-base.cron",
                    "purpose": "Schedule daily digest email generation at specific times"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_1",
                  "timestamp": "2025-08-11T13:22:58.233Z"
                },
                {
                  "node": {
                    "id": "search_node_2",
                    "type": "nodes-base.if",
                    "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_2",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "node": {
                    "id": "search_node_3",
                    "type": "nodes-base.webhook",
                    "purpose": "Receive real-time notifications when new social media posts are published"
                  },
                  "type": "discoverNode",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "selectNode",
                  "nodeId": "search_node_3",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "completePhase",
                  "phase": "discovery",
                  "timestamp": "2025-08-11T13:22:58.494Z"
                },
                {
                  "type": "setPhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:21.205Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Transform social media post data for AI content analysis - extracts key fields, normalizes content structure, and prepares data for inappropriate content detection",
                    "parameters": {
                      "jsCode": "// Transform social media posts for AI content analysis\nconst results = [];\n\nfor (const item of items) {\n  // Extract and normalize social media post data\n  const postData = item.json;\n  \n  // Create standardized structure for AI analysis\n  const transformedPost = {\n    // Core identification\n    postId: postData.id || postData.post_id,\n    platform: postData.platform || 'unknown',\n    \n    // Content for AI analysis\n    content: {\n      text: postData.text || postData.content || postData.message || '',\n      images: postData.images || postData.media?.filter(m => m.type === 'image') || [],\n      videos: postData.videos || postData.media?.filter(m => m.type === 'video') || [],\n      hashtags: postData.hashtags || [],\n      mentions: postData.mentions || []\n    },\n    \n    // Author information\n    author: {\n      id: postData.author?.id || postData.user_id,\n      username: postData.author?.username || postData.username,\n      followerCount: postData.author?.followers_count || 0,\n      verified: postData.author?.verified || false\n    },\n    \n    // Engagement metrics\n    engagement: {\n      likes: postData.likes_count || postData.likes || 0,\n      shares: postData.shares_count || postData.retweets || postData.shares || 0,\n      comments: postData.comments_count || postData.replies || 0\n    },\n    \n    // Metadata for processing\n    metadata: {\n      originalPostDate: postData.created_at || postData.timestamp,\n      processedAt: new Date().toISOString(),\n      language: postData.language || 'unknown',\n      location: postData.location || null,\n      contentLength: (postData.text || postData.content || '').length\n    },\n    \n    // Initialize analysis fields\n    analysis: {\n      status: 'pending',\n      riskScore: null,\n      categories: [],\n      flagged: false,\n      reviewRequired: false\n    }\n  };\n  \n  results.push({\n    json: transformedPost\n  });\n}\n\nreturn results;",
                      "language": "javaScript"
                    },
                    "typeVersion": 2
                  },
                  "nodeId": "task_node_1",
                  "purpose": "Transform data structure using JavaScript",
                  "nodeType": "nodes-base.code",
                  "reasoning": "Customized the template's generic data transformation to specifically handle social media post data structure normalization",
                  "timestamp": "2025-08-11T13:23:21.390Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.687Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Send daily digest email to moderators with content moderation statistics and flagged items summary",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "text": "Daily Content Moderation Report\n\n📊 Statistics:\n- Total posts analyzed: {{$json.totalPosts}}\n- Flagged items: {{$json.flaggedCount}}\n- Clean content: {{$json.cleanCount}}\n- Flagging rate: {{$json.flaggingRate}}%\n\n🚩 Flagged Items Summary:\n{{$json.flaggedItemsSummary}}\n\n📈 Trends:\n- Compared to yesterday: {{$json.trendComparison}}\n- Most common violation types: {{$json.topViolationTypes}}\n\nGenerated on: {{$now.format('YYYY-MM-DD HH:mm:ss')}}\n\nThis is an automated report from the content moderation system.",
                      "subject": "Daily Content Moderation Report - {{$now.format('YYYY-MM-DD')}}",
                      "toEmail": "moderators@company.com",
                      "fromEmail": "content-moderation@company.com"
                    },
                    "retryOnFail": true,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 3000
                  },
                  "nodeId": "task_node_4",
                  "purpose": "Send an email notification",
                  "nodeType": "nodes-base.emailSend",
                  "reasoning": "Customized the email template for daily content moderation digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:21.687Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_4",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:21.883Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Insert AI content analysis results into PostgreSQL database - stores flagged content, analysis scores, and metadata for moderation workflow",
                    "onError": "stopWorkflow",
                    "maxTries": 2,
                    "parameters": {
                      "table": "content_moderation",
                      "columns": "post_id, platform, content_text, analysis_score, is_flagged, flag_reasons, analyzed_at, post_url, user_handle",
                      "operation": "insert",
                      "returnFields": "*"
                    },
                    "retryOnFail": true,
                    "typeVersion": 2.4,
                    "waitBetweenTries": 1000
                  },
                  "nodeId": "task_node_3",
                  "purpose": "Insert data into PostgreSQL table",
                  "nodeType": "nodes-base.postgres",
                  "reasoning": "Customized the template for content moderation workflow by setting table name to 'content_moderation' to store AI analysis results",
                  "timestamp": "2025-08-11T13:23:21.883Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.077Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "AI content moderation - analyzes social media posts for inappropriate material and flags suspicious content",
                    "onError": "continueRegularOutput",
                    "maxTries": 3,
                    "parameters": {
                      "modelId": "gpt-4",
                      "options": {
                        "maxTokens": 500,
                        "temperature": 0.1
                      },
                      "messages": {
                        "values": [
                          {
                            "role": "system",
                            "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, adult content, violence, and misinformation. Respond with a JSON object containing: {\"flagged\": boolean, \"confidence\": number (0-1), \"categories\": [array of violation types], \"severity\": \"low\"|\"medium\"|\"high\", \"summary\": \"brief explanation\"}"
                          },
                          {
                            "role": "user",
                            "content": "Please analyze this social media post for inappropriate content:\n\nPost Content: {{$json.content}}\nAuthor: {{$json.author}}\nPlatform: {{$json.platform}}\nPost ID: {{$json.post_id}}"
                          }
                        ]
                      },
                      "resource": "chat",
                      "operation": "message"
                    },
                    "retryOnFail": true,
                    "typeVersion": 1,
                    "alwaysOutputData": true,
                    "waitBetweenTries": 5000
                  },
                  "nodeId": "task_node_2",
                  "purpose": "Send a message to an AI model and get response",
                  "nodeType": "nodes-base.openAi",
                  "reasoning": "Upgraded model from gpt-3.5-turbo to gpt-4 for better content moderation accuracy and nuanced understanding of context",
                  "timestamp": "2025-08-11T13:23:22.078Z",
                  "operationIndex": 0,
                  "customizedFromTemplate": true
                },
                {
                  "type": "validateNode",
                  "nodeId": "task_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.278Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Triggers daily digest email generation for content moderation reports",
                    "parameters": {
                      "notice": "",
                      "triggerTimes": {
                        "item": [
                          {
                            "hour": 9,
                            "minute": 0
                          }
                        ]
                      }
                    },
                    "typeVersion": "1"
                  },
                  "nodeId": "search_node_1",
                  "purpose": "Schedule daily digest email generation at specific times",
                  "nodeType": "nodes-base.cron",
                  "reasoning": "Configured Cron trigger to run daily at 9:00 AM for generating digest emails to moderators",
                  "timestamp": "2025-08-11T13:23:22.278Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.572Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Routes social media posts based on AI content analysis - separates inappropriate content for flagging from appropriate content for normal processing",
                    "parameters": {
                      "conditions": {
                        "conditions": [
                          {
                            "id": "1",
                            "operator": {
                              "type": "boolean",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $json.aiAnalysis.isInappropriate }}",
                            "rightValue": true
                          }
                        ],
                        "combineOperation": "any"
                      }
                    },
                    "typeVersion": "2.2"
                  },
                  "nodeId": "search_node_2",
                  "purpose": "Route content based on AI analysis results - separate appropriate from inappropriate content",
                  "nodeType": "nodes-base.if",
                  "reasoning": "This If node configuration creates a content filtering decision point that routes social media posts based on AI analysis results",
                  "timestamp": "2025-08-11T13:23:22.573Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.764Z"
                },
                {
                  "type": "configureNode",
                  "config": {
                    "notes": "Receives real-time notifications when new social media posts are published to trigger content moderation workflow",
                    "parameters": {
                      "path": "social-media-posts",
                      "httpMethod": "POST",
                      "responseCode": 200,
                      "responseData": "firstEntryJson",
                      "responseMode": "onReceived"
                    },
                    "typeVersion": "2"
                  },
                  "nodeId": "search_node_3",
                  "purpose": "Receive real-time notifications when new social media posts are published",
                  "nodeType": "nodes-base.webhook",
                  "reasoning": "Configured webhook to receive POST requests at '/social-media-posts' endpoint for incoming social media post notifications",
                  "timestamp": "2025-08-11T13:23:22.764Z",
                  "operationIndex": 0
                },
                {
                  "type": "validateNode",
                  "nodeId": "search_node_3",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "completePhase",
                  "phase": "configuration",
                  "timestamp": "2025-08-11T13:23:22.872Z"
                },
                {
                  "type": "setPhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.049Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "message",
                          "temperature": 0.1
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> {{ $json.total_posts }}</p><p><strong>Flagged Posts:</strong> {{ $json.flagged_posts }}</p><p><strong>Average Moderation Score:</strong> {{ Math.round($json.avg_score * 100) / 100 }}</p><p><strong>Categories Detected:</strong> {{ $json.all_categories }}</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>",
                          "text": "Daily Content Moderation Summary\n\nTotal Posts Analyzed: {{ $json.total_posts }}\nFlagged Posts: {{ $json.flagged_posts }}\nAverage Moderation Score: {{ Math.round($json.avg_score * 100) / 100 }}\nCategories Detected: {{ $json.all_categories }}\n\nPlease review flagged content in the moderation dashboard.\n\nBest regards,\nContent Moderation System",
                          "subject": "Daily Content Moderation Report - {{ new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2
                      }
                    ],
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setBuildPhases",
                  "phases": [
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "webhook_1"
                      ],
                      "description": "Receives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "code_1"
                      ],
                      "description": "Transforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis."
                    },
                    {
                      "type": "data_processing",
                      "nodeIds": [
                        "openAi_1"
                      ],
                      "description": "Performs AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                    },
                    {
                      "type": "decision",
                      "nodeIds": [
                        "if_1"
                      ],
                      "description": "Routes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                    },
                    {
                      "type": "storage",
                      "nodeIds": [
                        "postgres_1"
                      ],
                      "description": "Stores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions."
                    },
                    {
                      "type": "trigger",
                      "nodeIds": [
                        "cron_1"
                      ],
                      "description": "Scheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                    },
                    {
                      "type": "data_collection",
                      "nodeIds": [
                        "postgres_2"
                      ],
                      "description": "Retrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                    },
                    {
                      "type": "notification",
                      "nodeIds": [
                        "emailSend_1"
                      ],
                      "description": "Sends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                    }
                  ],
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "completePhase",
                  "phase": "building",
                  "timestamp": "2025-08-11T13:24:05.328Z"
                },
                {
                  "type": "setPhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T13:24:31.653Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 1,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.909Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": false,
                    "errors": [
                      "Node replaced entirely"
                    ]
                  },
                  "attempt": 2,
                  "reasoning": "Node replaced to fix validation errors",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "webhook_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "code_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "openAi_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:31.910Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "if_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "cron_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "postgres_2",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "validateNode",
                  "nodeId": "emailSend_1",
                  "result": {
                    "valid": true,
                    "errors": []
                  },
                  "attempt": 3,
                  "reasoning": "Node passed all validation checks",
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "complete",
                          "temperature": 0.1
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                          "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:32.245Z"
                },
                {
                  "type": "completePhase",
                  "phase": "validation",
                  "timestamp": "2025-08-11T13:24:32.246Z"
                },
                {
                  "type": "setPhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T13:24:32.681Z"
                },
                {
                  "type": "setWorkflow",
                  "workflow": {
                    "name": "Social Media Content Moderation Workflow",
                    "nodes": [
                      {
                        "id": "webhook_1",
                        "name": "Social Media Post Webhook",
                        "type": "n8n-nodes-base.webhook",
                        "onError": "stopWorkflow",
                        "position": [
                          250,
                          300
                        ],
                        "parameters": {
                          "path": "social-media-posts",
                          "httpMethod": "POST"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "code_1",
                        "name": "Transform Post Data",
                        "type": "n8n-nodes-base.code",
                        "position": [
                          550,
                          300
                        ],
                        "parameters": {
                          "jsCode": "// Transform social media post data for AI content analysis\nconst items = $input.all();\n\nreturn items.map(item => {\n  const postData = item.json;\n  \n  return {\n    json: {\n      postId: postData.id || postData.post_id,\n      content: postData.text || postData.content || postData.message,\n      author: postData.author || postData.username || postData.user,\n      platform: postData.platform || 'unknown',\n      timestamp: postData.created_at || postData.timestamp || new Date().toISOString(),\n      url: postData.url || postData.permalink,\n      metadata: {\n        likes: postData.likes || 0,\n        shares: postData.shares || 0,\n        comments: postData.comments || 0\n      }\n    }\n  };\n});"
                        },
                        "typeVersion": 2
                      },
                      {
                        "id": "openAi_1",
                        "name": "AI Content Analysis",
                        "type": "n8n-nodes-base.openAi",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          300
                        ],
                        "parameters": {
                          "model": "gpt-3.5-turbo",
                          "messages": {
                            "values": [
                              {
                                "role": "system",
                                "content": "You are a content moderation AI. Analyze social media posts for inappropriate content including hate speech, harassment, spam, violence, adult content, or misinformation. Respond with JSON: {\"flagged\": boolean, \"score\": number (0-100), \"categories\": [\"category1\", \"category2\"], \"reason\": \"explanation\"}"
                              },
                              {
                                "role": "user",
                                "content": "Analyze this post: {{ $json.content }}"
                              }
                            ]
                          },
                          "resource": "chat",
                          "maxTokens": 200,
                          "operation": "complete",
                          "temperature": 0.1
                        },
                        "typeVersion": 1.1
                      },
                      {
                        "id": "if_1",
                        "name": "Content Decision Router",
                        "type": "n8n-nodes-base.if",
                        "position": [
                          1150,
                          300
                        ],
                        "parameters": {
                          "conditions": {
                            "options": {
                              "leftValue": "",
                              "caseSensitive": true,
                              "typeValidation": "strict"
                            },
                            "combinator": "and",
                            "conditions": [
                              {
                                "id": "flagged_content",
                                "operator": {
                                  "type": "boolean",
                                  "operation": "equal"
                                },
                                "leftValue": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                                "rightValue": true
                              }
                            ]
                          }
                        },
                        "typeVersion": 2.2
                      },
                      {
                        "id": "postgres_1",
                        "name": "Store Analysis Results",
                        "type": "n8n-nodes-base.postgres",
                        "onError": "stopWorkflow",
                        "maxTries": 2,
                        "position": [
                          1450,
                          200
                        ],
                        "parameters": {
                          "table": "content_moderation",
                          "schema": "public",
                          "columns": {
                            "value": {
                              "author": "={{ $node['Transform Post Data'].json.author }}",
                              "reason": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).reason }}",
                              "content": "={{ $node['Transform Post Data'].json.content }}",
                              "flagged": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).flagged }}",
                              "post_id": "={{ $node['Transform Post Data'].json.postId }}",
                              "platform": "={{ $node['Transform Post Data'].json.platform }}",
                              "categories": "={{ JSON.stringify(JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).categories) }}",
                              "analyzed_at": "={{ new Date().toISOString() }}",
                              "moderation_score": "={{ JSON.parse($node['AI Content Analysis'].json.choices[0].message.content).score }}"
                            },
                            "mappingMode": "defineBelow"
                          },
                          "operation": "insert"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "cron_1",
                        "name": "Daily Digest Schedule",
                        "type": "n8n-nodes-base.cron",
                        "position": [
                          250,
                          600
                        ],
                        "parameters": {
                          "triggerTimes": {
                            "item": [
                              {
                                "hour": 9,
                                "minute": 0
                              }
                            ]
                          }
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "postgres_2",
                        "name": "Get Daily Statistics",
                        "type": "n8n-nodes-base.postgres",
                        "position": [
                          550,
                          600
                        ],
                        "parameters": {
                          "query": "SELECT \n  COUNT(*) as total_posts,\n  COUNT(CASE WHEN flagged = true THEN 1 END) as flagged_posts,\n  AVG(moderation_score) as avg_score,\n  STRING_AGG(DISTINCT categories, ', ') as all_categories\nFROM content_moderation \nWHERE analyzed_at >= CURRENT_DATE - INTERVAL '1 day'\nAND analyzed_at < CURRENT_DATE;",
                          "operation": "executeQuery"
                        },
                        "typeVersion": 2.6
                      },
                      {
                        "id": "emailSend_1",
                        "name": "Send Daily Digest",
                        "type": "n8n-nodes-base.emailSend",
                        "onError": "continueRegularOutput",
                        "maxTries": 3,
                        "position": [
                          850,
                          600
                        ],
                        "parameters": {
                          "html": "{{ '<h2>Daily Content Moderation Summary</h2><p><strong>Total Posts Analyzed:</strong> ' + $json.total_posts + '</p><p><strong>Flagged Posts:</strong> ' + $json.flagged_posts + '</p><p><strong>Average Moderation Score:</strong> ' + (Math.round($json.avg_score * 100) / 100) + '</p><p><strong>Categories Detected:</strong> ' + $json.all_categories + '</p><p>Please review flagged content in the moderation dashboard.</p><p>Best regards,<br>Content Moderation System</p>' }}",
                          "text": "{{ 'Daily Content Moderation Summary\\n\\nTotal Posts Analyzed: ' + $json.total_posts + '\\nFlagged Posts: ' + $json.flagged_posts + '\\nAverage Moderation Score: ' + (Math.round($json.avg_score * 100) / 100) + '\\nCategories Detected: ' + $json.all_categories + '\\n\\nPlease review flagged content in the moderation dashboard.\\n\\nBest regards,\\nContent Moderation System' }}",
                          "subject": "{{ 'Daily Content Moderation Report - ' + new Date().toDateString() }}",
                          "toEmail": "moderators@company.com",
                          "fromEmail": "moderation@company.com"
                        },
                        "typeVersion": 2.1
                      },
                      {
                        "id": "sticky_promo_1754918672681",
                        "name": "Ghost Team Promo",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          100,
                          -130
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 280,
                          "height": 910,
                          "content": "## 🚀 Grow your AI business\n\nNeed help in implementing this workflow for your business? Join the Ghost Team community.\n\nThis workflow is made with 💚 by Ghost Team."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_triggers_1754918672681",
                        "name": "Triggers Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          170,
                          -130
                        ],
                        "parameters": {
                          "color": 6,
                          "width": 310,
                          "height": 910,
                          "content": "## 📥 Triggers\nReceives incoming social media posts via webhook to initiate the content moderation workflow. This phase captures new posts in real-time as they are published.\n\nScheduled trigger that runs daily at 9 AM to initiate the generation of moderation digest reports. Provides regular reporting cadence for moderation team oversight."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_inputs_1754918672681",
                        "name": "Inputs Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          470,
                          -130
                        ],
                        "parameters": {
                          "color": 5,
                          "width": 310,
                          "height": 910,
                          "content": "## 📊 Inputs\nRetrieves daily content moderation statistics from the database including total posts analyzed, flagged content counts, average scores, and detected categories for reporting."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_transforms_1754918672681",
                        "name": "Transform Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          470,
                          -130
                        ],
                        "parameters": {
                          "color": 4,
                          "width": 610,
                          "height": 910,
                          "content": "## ⚙️ Transform\nTransforms and normalizes incoming social media post data into a standardized format. Extracts key fields like content, author, platform, and metadata for consistent AI analysis.\n\nPerforms AI-powered content analysis using OpenAI to detect inappropriate material. Analyzes posts for hate speech, harassment, spam, violence, and other policy violations with scoring and categorization."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_decision_1754918672681",
                        "name": "Decision Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          1070,
                          -130
                        ],
                        "parameters": {
                          "color": 3,
                          "width": 310,
                          "height": 910,
                          "content": "## 🔀 Decision\nRoutes content based on AI analysis results to separate flagged inappropriate content from appropriate content. Determines the next processing steps based on moderation scores and flags."
                        },
                        "typeVersion": 1
                      },
                      {
                        "id": "sticky_outputs_1754918672681",
                        "name": "Outputs Notes",
                        "type": "n8n-nodes-base.stickyNote",
                        "position": [
                          770,
                          -130
                        ],
                        "parameters": {
                          "color": 7,
                          "width": 910,
                          "height": 910,
                          "content": "## 🚀 Outputs\nStores all content analysis results in PostgreSQL database including post details, moderation scores, flags, categories, and timestamps. Maintains comprehensive audit trail for moderation decisions.\n\nSends daily digest email to moderators with comprehensive statistics and flagged content summary. Provides actionable insights and alerts for content moderation team review."
                        },
                        "typeVersion": 1
                      }
                    ],
                    "valid": true,
                    "settings": {
                      "executionOrder": "v1",
                      "saveManualExecutions": true,
                      "saveDataErrorExecution": "all",
                      "saveDataSuccessExecution": "all"
                    },
                    "connections": {
                      "AI Content Analysis": {
                        "main": [
                          [
                            {
                              "node": "Content Decision Router",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Transform Post Data": {
                        "main": [
                          [
                            {
                              "node": "AI Content Analysis",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Get Daily Statistics": {
                        "main": [
                          [
                            {
                              "node": "Send Daily Digest",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Daily Digest Schedule": {
                        "main": [
                          [
                            {
                              "node": "Get Daily Statistics",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Content Decision Router": {
                        "main": [
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ],
                          [
                            {
                              "node": "Store Analysis Results",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      },
                      "Social Media Post Webhook": {
                        "main": [
                          [
                            {
                              "node": "Transform Post Data",
                              "type": "main",
                              "index": 0
                            }
                          ]
                        ]
                      }
                    }
                  },
                  "timestamp": "2025-08-11T13:24:32.883Z"
                },
                {
                  "type": "completePhase",
                  "phase": "documentation",
                  "timestamp": "2025-08-11T13:24:32.883Z"
                }
              ],
              "pendingClarifications": [],
              "clarificationHistory": []
            }
          }
        },
        "removed": [],
        "unchanged": [
          "sessionId",
          "createdAt"
        ]
      }
    }
  },
  "summary": {
    "totalNodes": 14,
    "totalConnections": 6,
    "validationAttempts": 3,
    "errorsFixed": 2,
    "stickyNotesAdded": 6,
    "performanceScore": 20,
    "qualityScore": 95,
    "completenessScore": 100
  },
  "optimizationSuggestions": [
    "Consider optimizing discovery phase (took 22931ms)",
    "Consider optimizing configuration phase (took 24081ms)",
    "Consider optimizing building phase (took 42598ms)",
    "Consider optimizing validation phase (took 26856ms)",
    "High validation attempts detected. Consider improving initial node configuration."
  ],
  "errorPatterns": [
    {
      "pattern": "ValidationError",
      "frequency": 2,
      "suggestedFix": "Review node configuration requirements and ensure all required fields are set"
    }
  ]
}